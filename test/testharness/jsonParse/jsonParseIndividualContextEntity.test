# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
JSON Parse IndividualContextEntity
--SHELL-INIT--
source ../harnessFunctions.sh

dbInit CB
brokerStart CB

--SHELL--
source ../harnessFunctions.sh

# 1. GET that fails
echo "1: +++++++++++++++++++++++++++++"
curlJsonNoPayload "/NGSI10/contextEntities/ENTITY_ID"

# 2. POST that fails
echo "2: +++++++++++++++++++++++++++++"
url="/NGSI10/contextEntities/ENTITY_ID"
payload='{
  "attributeDomainName" : "",
  "attributes" : [
    {
      "name" : "pressure",
      "type" : "clima",
      "value" : "p23"
    }
  ]
}'
curlJson ${url} "${payload}"

# 3. PUT that fails
echo "3: +++++++++++++++++++++++++++++"
url="/NGSI10/contextEntities/ENTITY_ID"
payload='{
  "attributeDomainName" : "",
  "attributes" : [
    {
      "name" : "temperature",
      "type" : "degree",
      "value" : "10"
    }
  ]
}'
curlJson ${url} "${payload}" "-X PUT"

# 4. DELETE that fails
echo "4: +++++++++++++++++++++++++++++"
curlJsonNoPayload "/NGSI10/contextEntities/ENTITY_ID" "-X DELETE"

# 5. Register an entity
echo "5: +++++++++++++++++++++++++++++"
url="/NGSI9/registerContext"
payload='{
    "contextRegistrations": [
        {
            "entities": [
                {
                    "type": "Room",
                    "isPattern": "false",
                    "id": "ENTITY_ID"
                }
            ],
            "attributes": [
                {
                    "name": "temperature",
                    "type": "degree",
                    "isDomain": "false"
                }
            ],
            "providingApplication": "http://localhost:1028/application"
        }
    ],
    "duration": "PT1H"
}'
curlJson ${url} "${payload}"

# 6. GET that is OK
echo "6: +++++++++++++++++++++++++++++"
curlJsonNoPayload "/NGSI10/contextEntities/ENTITY_ID"

# 7. POST that is OK
echo "7: +++++++++++++++++++++++++++++"
url="/NGSI10/contextEntities/ENTITY_ID"
payload='{
  "attributeDomainName" : "",
  "attributes" : [
    {
      "name" : "pressure",
      "type" : "clima",
      "value" : "p23"
    }
  ]
}'
curlJson ${url} "${payload}"

# 8. PUT that is OK
echo "8: +++++++++++++++++++++++++++++"
url="/NGSI10/contextEntities/ENTITY_ID"
payload='{
  "attributeDomainName" : "",
  "attributes" : [
    {
      "name" : "temperature",
      "type" : "degree",
      "value" : "10"
    }
  ]
}'
curlJson ${url} "${payload}" "-X PUT"

# 9. DELETE that is OK
echo "9: +++++++++++++++++++++++++++++"
curlJsonNoPayload "/NGSI10/contextEntities/ENTITY_ID" "-X DELETE"

--REGEXPECT--
1: +++++++++++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 232
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "id": "ENTITY_ID",
        "isPattern": "false",
        "type": ""
    },
    "statusCode": {
        "code": "404",
        "details": "Entity id: 'ENTITY_ID'",
        "reasonPhrase": "No context element found"
    }
}
2: +++++++++++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 264
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "pressure",
                    "type": "clima",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}
3: +++++++++++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 203
Content-Type: application/json
Date: REGEX(.*)

{
    "errorCode": {
        "code": "472",
        "details": "action: UPDATE - entity: (ENTITY_ID, ) - offending attribute: temperature",
        "reasonPhrase": "request parameter is invalid/not allowed"
    }
}
4: +++++++++++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 46
Content-Type: application/json
Date: REGEX(.*)

{
    "code": "200",
    "reasonPhrase": "OK"
}
5: +++++++++++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 75
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "PT1H",
    "registrationId": "REGEX([0-9a-f]{24})"
}
6: +++++++++++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 291
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "pressure",
                "type": "clima",
                "value": "p23"
            }
        ],
        "id": "ENTITY_ID",
        "isPattern": "false",
        "type": ""
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}
7: +++++++++++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 264
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "pressure",
                    "type": "clima",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}
8: +++++++++++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 203
Content-Type: application/json
Date: REGEX(.*)

{
    "errorCode": {
        "code": "472",
        "details": "action: UPDATE - entity: (ENTITY_ID, ) - offending attribute: temperature",
        "reasonPhrase": "request parameter is invalid/not allowed"
    }
}
9: +++++++++++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 46
Content-Type: application/json
Date: REGEX(.*)

{
    "code": "200",
    "reasonPhrase": "OK"
}
--TEARDOWN--
source ../harnessFunctions.sh
brokerStop CB

