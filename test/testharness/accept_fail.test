# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Accept header fail

--SHELL-INIT--
source harnessFunctions.sh

dbInit CB
brokerStart CB

--SHELL--
source harnessFunctions.sh

# Note that curl by default uses "Accept: */*" so this step is testing that "no header" is interpreted as
# "Accept: */*" according to HTTP RFC
url="localhost:${BROKER_PORT}/NGSI10/queryContext"
payload='<?xml version="1.0"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
curlIt "XML" "$url" "$payload" "Content-Type: application/xml" "Accept:"
echo "1: ++++++++++++++++++++"

# This test will always fail
url="localhost:${BROKER_PORT}/NGSI10/queryContext"
payload='no meaningful payload (failing tests)'
curlIt "XML" "$url" "$payload" "Content-Type: application/xml" "Accept: text/plain"
echo "2: ++++++++++++++++++++"

# This test that explicit "Accept: application/xml" is ok
url="localhost:${BROKER_PORT}/NGSI10/queryContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
curlIt "XML" "$url" "$payload" "Content-Type: application/xml" "Accept: application/xml"
echo "3: ++++++++++++++++++++"

# This test uses a list in Accept which a valid type is found is ok
url="localhost:${BROKER_PORT}/NGSI10/queryContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
curlIt "XML" "$url" "$payload" "Content-Type: application/xml" "Accept: text/plain, application/xml"
echo "4: ++++++++++++++++++++"

# This test uses a list in Accept which a valid type is found is ok (with extra encoding after ";")
url="localhost:${BROKER_PORT}/NGSI10/queryContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
curlIt "XML" "$url" "$payload" "Content-Type: application/xml" "Accept: text/plain, application/xml; charset=UTF-8"
echo "5: ++++++++++++++++++++"

# This test uses a list in Accept with no valid type
url="localhost:${BROKER_PORT}/NGSI10/queryContext"
payload='no meaningful payload (failing tests)'
curlIt "XML" "$url" "$payload" "Content-Type: application/xml" "Accept: text/plain, image/jpeg"
echo "6: ++++++++++++++++++++"

# This test uses a list in Accept with no valid type (with extra encoding after ";")
url="localhost:${BROKER_PORT}/NGSI10/queryContext"
payload='no meaningful payload (failing tests)'
curlIt "XML" "$url" "$payload" "Content-Type: application/xml" "Accept: text/plain, image/jpeg; charset=UTF-8"
echo "7: ++++++++++++++++++++"

# This test verifies that explicit "Accept: application/json" is ok
(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/json' --header 'Accept: application/json' -d @-) <<EOF
{
	"entities": [
		{
			"type": "Room",
			"isPattern": "false",
			"id": "OfficeRoom"
		}
	]
}
EOF
echo "8: ++++++++++++++++++++"

# This test that Accept preference is correctly taken into account (JSON preferred to XML)
(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/json' --header 'Accept: application/json, application/xml' -d @-) <<EOF
{
	"entities": [
		{
			"type": "Room",
			"isPattern": "false",
			"id": "OfficeRoom"
		}
	]
}
EOF
echo "9: ++++++++++++++++++++"

# This test that Accept preference is correctly taken into account (XML preferred to JSON)
(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/xml' --header 'Accept: application/xml, application/json' -d @- | xmllint --format -) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
</queryContextRequest>
EOF
echo "10: ++++++++++++++++++++"

# Cross Accept/Content-Type XML/JSON test (only a weird client will do this, but it is theoretically possible)
(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/json' --header 'Accept: application/xml' -d @- | xmllint --format -) <<EOF
{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "OfficeRoom"
    }
  ]
}
EOF
echo "11: ++++++++++++++++++++"

# Cross Accept/Content-Type JSON/XML test (only a weird client will do this, but it is theoretically possible)
(curl localhost:${BROKER_PORT}/NGSI10/queryContext -s -S --header 'Content-Type: application/xml' --header 'Accept: application/json' -d @-) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
</queryContextRequest>
EOF
echo "12: ++++++++++++++++++++"

--REGEXPECT--
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
1: ++++++++++++++++++++
HTTP/1.1 406 Not Acceptable
Connection: close
Content-Length: 0
Content-Type: application/xml, application/json
Date: REGEX(.*)

2: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
3: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
4: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
5: ++++++++++++++++++++
HTTP/1.1 406 Not Acceptable
Connection: close
Content-Length: 0
Content-Type: application/xml, application/json
Date: REGEX(.*)

6: ++++++++++++++++++++
HTTP/1.1 406 Not Acceptable
Connection: close
Content-Length: 0
Content-Type: application/xml, application/json
Date: REGEX(.*)

7: ++++++++++++++++++++
{
  "errorCode" : {
    "code" : "404",
    "reasonPhrase" : "No context element found"
  }
}
8: ++++++++++++++++++++
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
9: ++++++++++++++++++++
<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
10: ++++++++++++++++++++
<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
11: ++++++++++++++++++++
{
  "errorCode" : {
    "code" : "404",
    "reasonPhrase" : "No context element found"
  }
}
12: ++++++++++++++++++++
--TEARDOWN--
source harnessFunctions.sh
brokerStop CB
