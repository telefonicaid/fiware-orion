# Copyright 2022 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Custom notification MQTT with NGSI payload using special macros

--SHELL-INIT--
dbInit CB s1
brokerStart CB 0 IPV4 -multiservice
accumulatorStart --pretty-print --mqttHost ${MQTT_HOST} --mqttPort ${MQTT_PORT} --mqttTopic "#"

--SHELL--

#
# 01. Create custom sub with macro replacements using special macros
# 02. Create entity E1
# 03. Update entity E1
# 04. Dump accumulator and see two notifications
#


echo "01. Create custom sub with macro replacements using special macros"
echo "=================================================================="
payload='{
  "subject": {
    "entities": [
      {
        "id" : "E1",
        "type": "T"
      }
    ]
  },
  "notification": {
    "mqttCustom": {
      "topic": "topic1",
      "url": "mqtt://localhost:1883",
      "headers": {
        "fiware-service": "s2",
        "fiware-servicepath": "${A}",
        "x-auth-token": "token2"
      },
      "ngsi": {
        "originalService": {
          "value": "${service}",
          "type": "Text"
        },
        "originalServicePath": {
          "value": "${servicePath}",
          "type": "Text"
        },
        "originalToken": {
          "value": "${authToken}",
          "type": "Text"
        }
      }
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload" --tenant s1 --servicePath /ss1
echo
echo


echo "02. Create entity E1"
echo "===================="
payload='{
  "id": "E1",
  "type": "T",
  "A": {
    "value": "/ss2",
    "type": "irrelevant"
  }
}'
orionCurl --url /v2/entities --payload "$payload" --tenant s1 --servicePath /ss1  --xauthToken tokenA
echo
echo


echo "03. Update entity E1"
echo "===================="
payload='{
  "A": {
    "value": "/ss3",
    "type": "irrelevant"
  }
}'
orionCurl --url /v2/entities/E1/attrs -X PATCH --payload "$payload" --tenant s1 --servicePath /ss1 --xauthToken tokenB
echo
echo


# This delay before asking for accumulator dump was introduced when we
# changed from ubuntu-18.04 to ubuntu-22.04 in GitActions
# in PR https://github.com/telefonicaid/fiware-orion/pull/4302. For some
# unknown reason in ubuntu-22.04 fails if we don't add this. It doesn't make
# sense to me (both Orion and mosquitto runs in containers on top of ubuntu OS)
# but it happens... (maybe some kind of networking effect in the docker host?)
sleep 0.75s


echo "04. Dump accumulator and see two notifications"
echo "=============================================="
accumulatorDump
echo
echo


--REGEXPECT--
01. Create custom sub with macro replacements using special macros
==================================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. Create entity E1
====================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E1?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. Update entity E1
====================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



04. Dump accumulator and see two notifications
==============================================
MQTT message at topic topic1:
{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "irrelevant",
                "value": "/ss2"
            },
            "id": "E1",
            "originalService": {
                "metadata": {},
                "type": "Text",
                "value": "s1"
            },
            "originalServicePath": {
                "metadata": {},
                "type": "Text",
                "value": "/ss1"
            },
            "originalToken": {
                "metadata": {},
                "type": "Text",
                "value": "tokenA"
            },
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================
MQTT message at topic topic1:
{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "irrelevant",
                "value": "/ss3"
            },
            "id": "E1",
            "originalService": {
                "metadata": {},
                "type": "Text",
                "value": "s1"
            },
            "originalServicePath": {
                "metadata": {},
                "type": "Text",
                "value": "/ss1"
            },
            "originalToken": {
                "metadata": {},
                "type": "Text",
                "value": "tokenB"
            },
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================


--TEARDOWN--
brokerStop CB
dbDrop CB s1
accumulatorStop
