# Copyright 2025 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Fail triggering notification when attribute out of condition.attrs is actually changed and alterationType entityUpdate is used

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print

--SHELL--

#
# 01. Create testing entity
# 02. Create sub with entityChange and entityUpdate at the same time
# 03. Update entity without actual update (notification is sent)
# 04. Update entity with actual update (notification is sent)
# 05. Dump accumulator (see 2 notifications)
#

echo "01. Create testing entity"
echo "========================="
payload='{
  "id": "contador1",
  "type": "WaterMeter",
  "TimeInstant": {
    "type": "DateTime",
    "value": "2025-02-10T16:41:00.000Z",
    "metadata": {}
  },
  "waterConsumption": {
    "type": "Number",
    "value": 20,
    "metadata": {}
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "02. Create sub with entityChange and entityUpdate at the same time"
echo "=================================================================="
payload='{
  "subject": {
    "entities": [
      {
        "idPattern": ".*",
        "type": "WaterMeter"
      }
    ],
    "condition": {
      "attrs": [
        "TimeInstant"
      ],
      "alterationTypes": [
        "entityUpdate"
      ]
    }
  },
  "notification": {
    "http": {
      "url": "http://127.0.0.1:'${LISTENER_PORT}'/notify"
    },
    "covered": false
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "03. Update entity without actual update (notification is sent)"
echo "=============================================================="
payload='{
  "TimeInstant": {
    "type": "DateTime",
    "value": "2025-02-10T16:41:00.000Z",
    "metadata": {}
  },
  "waterConsumption": {
    "type": "Number",
    "value": 23,
    "metadata": {}
  }
}'
orionCurl --url /v2/entities/contador1/attrs -X PATCH --payload "$payload"
echo
echo


echo "04. Update entity with actual update (notification is sent)"
echo "==========================================================="
payload='{
  "TimeInstant": {
    "type": "DateTime",
    "value": "2025-02-10T16:51:00.000Z",
    "metadata": {}
  },
  "waterConsumption": {
    "type": "Number",
    "value": 23,
    "metadata": {}
  }
}'
orionCurl --url /v2/entities/contador1/attrs -X PATCH --payload "$payload"
echo
echo


echo "05. Dump accumulator (see 2 notifications)"
echo "=========================================="
accumulatorDump
echo
echo


--REGEXPECT--
01. Create testing entity
=========================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/contador1?type=WaterMeter
Content-Length: 0



02. Create sub with entityChange and entityUpdate at the same time
==================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



03. Update entity without actual update (notification is sent)
==============================================================
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})



04. Update entity with actual update (notification is sent)
===========================================================
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})



05. Dump accumulator (see 2 notifications)
==========================================
POST http://127.0.0.1:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 238
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: 127.0.0.1:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "TimeInstant": {
                "metadata": {},
                "type": "DateTime",
                "value": "2025-02-10T16:41:00.000Z"
            },
            "id": "contador1",
            "type": "WaterMeter",
            "waterConsumption": {
                "metadata": {},
                "type": "Number",
                "value": 23
            }
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================
POST http://127.0.0.1:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 238
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: 127.0.0.1:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "TimeInstant": {
                "metadata": {},
                "type": "DateTime",
                "value": "2025-02-10T16:51:00.000Z"
            },
            "id": "contador1",
            "type": "WaterMeter",
            "waterConsumption": {
                "metadata": {},
                "type": "Number",
                "value": 23
            }
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================


--TEARDOWN--
brokerStop CB
dbDrop CB
accumulatorStop
