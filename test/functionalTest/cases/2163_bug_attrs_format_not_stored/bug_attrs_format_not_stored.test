# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Check attrsFormat is stored at subscription creation and update

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. POST /v2/subscriptions (attrsFormat = keyValues)
# 02. GET /v2/subscriptions/ID (and get keyValues)
# 03. PATCH /v2/subscriptions/ID (without attrsFormat)
# 04. GET /v2/subscriptions/ID (and get normalized)
# 05. PATCH /v2/subscriptions/ID (attrsFormat = values)
# 06. GET /v2/subscriptions/ID (and get values)
#

echo "01. POST /v2/subscriptions (attrsFormat = keyValues)"
echo "===================================================="
payload='
{
        "subject": {
                "entities": [{
                        "idPattern": ".*"
                }],
                "condition": {
                        "attrs": ["temperature"]
                }
        },
        "notification": {
                "http": {
                        "url": "http://localhost:1045/notify"
                },
                "attrsFormat": "keyValues",
                "attrs": ["temperature"]
        },
        "expires": "2057-04-05T14:00:00.00Z",
        "throttling": 0
}
'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo

idSub=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")


echo "02. GET /v2/subscriptions/ID (and get keyValues)"
echo "================================================"
orionCurl --url "/v2/subscriptions/${idSub}"
echo
echo


echo "03. PATCH /v2/subscriptions/ID (without attrsFormat)"
echo "===================================================="
payload='
{
        "subject": {
                "entities": [{
                        "idPattern": ".*"
                }],
                "condition": {
                        "attrs": ["temperature"]
                }
        },
        "notification": {
                "http": {
                        "url": "http://localhost:1045/notify"
                },
                "attrs": ["temperature"]
        },
        "expires": "2057-04-05T14:00:00.00Z",
        "throttling": 0
}
'
orionCurl --url /v2/subscriptions/${idSub} -X PATCH --payload "$payload"
echo
echo


echo "04. GET /v2/subscriptions/ID (and get normalized)"
echo "================================================="
orionCurl --url "/v2/subscriptions/${idSub}"
echo
echo


echo "05. PATCH /v2/subscriptions/ID (attrsFormat = values)"
echo "====================================================="
payload='
{
        "subject": {
                "entities": [{
                        "idPattern": ".*"
                }],
                "condition": {
                        "attrs": ["temperature"]
                }
        },
        "notification": {
                "http": {
                        "url": "http://localhost:1045/notify"
                },
                "attrsFormat": "values",
                "attrs": ["temperature"]
        },
        "expires": "2057-04-05T14:00:00.00Z",
        "throttling": 0
}
'
orionCurl --url /v2/subscriptions/${idSub} -X PATCH --payload "$payload"
echo
echo


echo "06. GET /v2/subscriptions/ID (and get values)"
echo "============================================="
orionCurl --url "/v2/subscriptions/${idSub}"
echo
echo



--REGEXPECT--
01. POST /v2/subscriptions (attrsFormat = keyValues)
====================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. GET /v2/subscriptions/ID (and get keyValues)
================================================
HTTP/1.1 200 OK
Content-Length: 324
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "expires": "2057-04-05T14:00:00.000Z",
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [
            "temperature"
        ],
        "attrsFormat": "keyValues",
        "covered": false,
        "http": {
            "url": "http://localhost:1045/notify"
        },
        "onlyChangedAttrs": false
    },
    "status": "active",
    "subject": {
        "condition": {
            "attrs": [
                "temperature"
            ]
        },
        "entities": [
            {
                "idPattern": ".*"
            }
        ]
    }
}


03. PATCH /v2/subscriptions/ID (without attrsFormat)
====================================================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



04. GET /v2/subscriptions/ID (and get normalized)
=================================================
HTTP/1.1 200 OK
Content-Length: 325
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "expires": "2057-04-05T14:00:00.000Z",
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [
            "temperature"
        ],
        "attrsFormat": "normalized",
        "covered": false,
        "http": {
            "url": "http://localhost:1045/notify"
        },
        "onlyChangedAttrs": false
    },
    "status": "active",
    "subject": {
        "condition": {
            "attrs": [
                "temperature"
            ]
        },
        "entities": [
            {
                "idPattern": ".*"
            }
        ]
    }
}


05. PATCH /v2/subscriptions/ID (attrsFormat = values)
=====================================================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



06. GET /v2/subscriptions/ID (and get values)
=============================================
HTTP/1.1 200 OK
Content-Length: 321
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "expires": "2057-04-05T14:00:00.000Z",
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [
            "temperature"
        ],
        "attrsFormat": "values",
        "covered": false,
        "http": {
            "url": "http://localhost:1045/notify"
        },
        "onlyChangedAttrs": false
    },
    "status": "active",
    "subject": {
        "condition": {
            "attrs": [
                "temperature"
            ]
        },
        "entities": [
            {
                "idPattern": ".*"
            }
        ]
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB

