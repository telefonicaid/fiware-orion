# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh




##
## It is not necessary a working CPr to reproduce it
## But it is left for easing experimentation with the issue
## Not a test really, but a way of trying
## Steps 3 and 4 need to be adapted, depending if at the end
## it is correct that these operations return 404 code or 200 code
## (once issue #1310 gets addressed)


--NAME--
Not Found In  Two Context Providers

--SHELL-INIT--
dbInit CB
dbInit CP1

export BROKER_AWAIT_SLEEP_TIME=6
brokerStart CB
brokerStart CP1
unset BROKER_AWAIT_SLEEP_TIME

--SHELL--

#
# 01. Register E1/T1/A1 in CB, Context Provider is CP1
# 02. Query E1/T1/A1 in CB, using JSON - get NotFound
# 03. Query E1/T1/A1 in CB, using XML - get NotFound
#


echo "01. Register E1/T1/A1 in CB, Context Provider is CP1"
echo "===================================================="
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "type": "T1",
         "isPattern": "false",
         "id": "E1"
      }
    ],
    "providingApplication": "http://XXXlocalhostXXX:'${CP1_PORT}'/v1"
    }
  ],
  "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
echo
echo


echo "02. Register E1/T1/A1 in CB, second time"
echo "========================================"
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "type": "T1",
         "isPattern": "false",
         "id": "E1"
      }
    ],
    "providingApplication": "http://XXXlocalhostXXX:'${CP1_PORT}'/v1"
    }
  ],
  "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
echo
echo


echo "03. Query E1/T1/A1 in CB, using JSON - get NotFound"
echo "==================================================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ]
}'
orionCurl --url /v1/queryContext --payload "$payload" --json
echo
echo


echo "04. Query E1/T1/A1 in CB, using XML - get NotFound"
echo "=================================================="
payload='<?xml version="1.0"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="T1" isPattern="false">
      <id>E1</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>X</attribute>
  </attributeList>
</queryContextRequest>'
orionCurl --url /v1/queryContext --payload "$payload"
echo
echo


--REGEXPECT--
01. Register E1/T1/A1 in CB, Context Provider is CP1
====================================================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M",
    "registrationId": "REGEX([0-9a-f]{24})"
}


02. Register E1/T1/A1 in CB, second time
========================================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M",
    "registrationId": "REGEX([0-9a-f]{24})"
}


03. Query E1/T1/A1 in CB, using JSON - get NotFound
===================================================
HTTP/1.1 200 OK
Content-Length: 94
Content-Type: application/json
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404",
        "reasonPhrase": "No context element found"
    }
}


04. Query E1/T1/A1 in CB, using XML - get NotFound
==================================================
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>


--TEARDOWN--
brokerStop CB
brokerStop CP1
dbDrop CB
dbDrop CP1

