# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
GET Entities V2

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. GET /v2/entities
# 02. POST /v2/entities
# 03. GET /v2/entities
# 04. GET /v2/entities?options=count,keyValues
# 05. POST /v2/entities with compound attribute value
#

echo "01. GET /v2/entities"
echo "===================="
orionCurl --url /v2/entities
echo
echo


echo "02. POST /v2/entities"
echo "====================="
payload='{
      "id":   "E1",
      "type": "T1",
      "A0" : {
          "type": "number",
          "value" : "255"
        },
       "A1" : {
          "value" : "E1/T1/A1"
        },
       "A2" :{
          "value": "E1/T1/A2",
          "type": "AT2"
        },
       "A3" :{
          "type": "a",
          "value": "E1/T1/A3/M1",
          "metadata": {
            "m1":
              {
                "value": "M1"
              }
          }
        },
        "A4" : {
          "type": "a4",
          "value": "E1/T1/A4/M1-3",
          "metadata": {
            "m1":
              {
                "value": "M1"
              },
             "m2" :
              {
                "type": "tm2",
                "value": "M2"
              },
              "m3" :{
                "type": "number",
                "value": "3"
              }
          }
        }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "03. GET /v2/entities"
echo "===================="
orionCurl --url /v2/entities
echo
echo


echo "04. GET /v2/entities?options=count,keyValues"
echo "============================================"
orionCurl --url /v2/entities?options=count,keyValues
echo
echo


echo "05. POST /v2/entities with compound attribute value"
echo "==================================================="
payload='{
  "id":   "E2",
  "type": "T1",
  "A0":
  {
    "value" : { "i1": "1", "s1": "s" }
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "06. GET /v2/entities"
echo "===================="
orionCurl --url /v2/entities
echo
echo


--REGEXPECT--
01. GET /v2/entities
====================
HTTP/1.1 200 OK
Content-Length: 2
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[]


02. POST /v2/entities
=====================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E1?type=T1
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. GET /v2/entities
====================
HTTP/1.1 200 OK
Content-Length: 428
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "A0": {
            "metadata": {},
            "type": "number",
            "value": "255"
        },
        "A1": {
            "metadata": {},
            "type": "Text",
            "value": "E1/T1/A1"
        },
        "A2": {
            "metadata": {},
            "type": "AT2",
            "value": "E1/T1/A2"
        },
        "A3": {
            "metadata": {
                "m1": {
                    "type": "Text",
                    "value": "M1"
                }
            },
            "type": "a",
            "value": "E1/T1/A3/M1"
        },
        "A4": {
            "metadata": {
                "m1": {
                    "type": "Text",
                    "value": "M1"
                },
                "m2": {
                    "type": "tm2",
                    "value": "M2"
                },
                "m3": {
                    "type": "number",
                    "value": "3"
                }
            },
            "type": "a4",
            "value": "E1/T1/A4/M1-3"
        },
        "id": "E1",
        "type": "T1"
    }
]


04. GET /v2/entities?options=count,keyValues
============================================
HTTP/1.1 200 OK
Content-Length: 108
Content-Type: application/json
Fiware-Total-Count: 1
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "A0": "255",
        "A1": "E1/T1/A1",
        "A2": "E1/T1/A2",
        "A3": "E1/T1/A3/M1",
        "A4": "E1/T1/A4/M1-3",
        "id": "E1",
        "type": "T1"
    }
]


05. POST /v2/entities with compound attribute value
===================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E2?type=T1
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



06. GET /v2/entities
====================
HTTP/1.1 200 OK
Content-Length: 526
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "A0": {
            "metadata": {},
            "type": "number",
            "value": "255"
        },
        "A1": {
            "metadata": {},
            "type": "Text",
            "value": "E1/T1/A1"
        },
        "A2": {
            "metadata": {},
            "type": "AT2",
            "value": "E1/T1/A2"
        },
        "A3": {
            "metadata": {
                "m1": {
                    "type": "Text",
                    "value": "M1"
                }
            },
            "type": "a",
            "value": "E1/T1/A3/M1"
        },
        "A4": {
            "metadata": {
                "m1": {
                    "type": "Text",
                    "value": "M1"
                },
                "m2": {
                    "type": "tm2",
                    "value": "M2"
                },
                "m3": {
                    "type": "number",
                    "value": "3"
                }
            },
            "type": "a4",
            "value": "E1/T1/A4/M1-3"
        },
        "id": "E1",
        "type": "T1"
    },
    {
        "A0": {
            "metadata": {},
            "type": "StructuredValue",
            "value": {
                "i1": "1",
                "s1": "s"
            }
        },
        "id": "E2",
        "type": "T1"
    }
]


--TEARDOWN--
brokerStop CB
dbDrop CB

