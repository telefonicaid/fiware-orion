# Copyright 2021 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Create entity with WRONG GeoJSON

--SHELL-INIT--
dbInit CB
brokerStart CB 0

--SHELL--

#
# 01. Create entity with correct GeoJSON
# 02. GET /v2/entities/K
# 03. Create entity with WRONG GeoJSON1
# 04. Create entity with WRONG GeoJSON2
# 05. Ensure no DatabaseError alarm is raised
#

echo "01. Create entity with correct GeoJSON"
echo "======================================"
payload='{
   "id": "K",
   "type":"T",
   "location":
   {
      "type":"geo:json",
      "value":
      {
        "type":"Point",
        "coordinates":[2,1]
      }
   }
}'
orionCurl --url '/v2/entities' --payload "${payload}"
echo
echo


echo "02. GET /v2/entities/K"
echo "======================"
orionCurl --url /v2/entities/K
echo
echo


echo "03. Create entity with WRONG GeoJSON1"
echo "====================================="
payload='{
   "id": "M",
   "type":"N",
   "location":
   {
      "type":"geo:json",
      "value":
      {
        "type":"PointKK3",
        "coordinates":[2,1]
      }
   }
}'
orionCurl --url '/v2/entities' --payload "${payload}"
echo
echo


echo "04. Create entity with WRONG GeoJSON2"
echo "====================================="
payload='{
   "id": "M",
   "type":"N",
   "location":
   {
      "type":"geo:json",
      "value":
      {
        "type":"Point",
        "coordinates":[[2,1]]
      }
   }
}'
orionCurl --url '/v2/entities' --payload "${payload}"
echo
echo

echo "05. Ensure no DatabaseError alarm is raised"
echo "==========================================="
cat /tmp/contextBroker.log | grep DatabaseError | wc -l
echo
echo


--REGEXPECT--
01. Create entity with correct GeoJSON
======================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/K?type=T
Content-Length: 0



02. GET /v2/entities/K
======================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 111

{
    "id": "K",
    "location": {
        "metadata": {},
        "type": "geo:json",
        "value": {
            "coordinates": [
                2,
                1
            ],
            "type": "Point"
        }
    },
    "type": "T"
}


03. Create entity with WRONG GeoJSON1
=====================================
HTTP/1.1 400 Bad Request
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 52

{
    "description": "Wrong GeoJson",
    "error": "BadRequest"
}


04. Create entity with WRONG GeoJSON2
=====================================
HTTP/1.1 400 Bad Request
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 52

{
    "description": "Wrong GeoJson",
    "error": "BadRequest"
}


05. Ensure no DatabaseError alarm is raised
===========================================
0


--TEARDOWN--
brokerStop CB
dbDrop CB
