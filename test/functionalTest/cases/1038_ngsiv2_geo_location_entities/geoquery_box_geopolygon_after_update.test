# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Geo query test (using a box for the query) with target entity using geo:polygon

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# This is a variant of the correspoding test without _after_update in the filename,
# in order to check that updating an attribute previously not using geolocation works
#
# 01. Create and update entity
# 02. Query B1 coveredBy  -> ok
# 03. Query B1 intersects -> ok
# 04. Query B1 disjoint   -> nok
# 05. Query B2 coveredBy  -> nok
# 06. Query B2 intersects -> ok
# 07. Query B2 disjoint   -> nok
# 08. Query B3 coveredBy  -> nok
# 09. Query B3 intersects -> nok
# 10. Query B3 disjoint   -> ok
#

echo "01. Create and update entity"
echo "============================"
payload='{
  "id": "A",
  "type": "T",
  "location": {
    "value": "foo",
    "type": "none"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo

payload='{
  "value": [ "4, 3", "6, 6", "7, 3", "4, 3" ],
  "type": "geo:polygon"
}'
orionCurl -X PUT --url /v2/entities/A/attrs/location --payload "$payload"
echo
echo


echo "02. Query B1 coveredBy -> ok"
echo "============================"
orionCurl --url '/v2/entities?georel=coveredBy&geometry=box&coords=3,2;10,8'
echo
echo


echo "03. Query B1 intersects -> ok"
echo "============================="
orionCurl --url '/v2/entities?georel=intersects&geometry=box&coords=3,2;10,8'
echo
echo


echo "04. Query B1 disjoint -> nok"
echo "============================"
orionCurl --url '/v2/entities?georel=disjoint&geometry=box&coords=3,2;10,8'
echo
echo


echo "05. Query B2 coveredBy -> nok"
echo "============================="
orionCurl --url '/v2/entities?georel=coveredBy&geometry=box&coords=5,4;8,7'
echo
echo


echo "06. Query B2 intersects -> ok"
echo "============================="
orionCurl --url '/v2/entities?georel=intersects&geometry=box&coords=5,4;8,7'
echo
echo


echo "07. Query B2 disjoint -> nok"
echo "============================"
orionCurl --url '/v2/entities?georel=disjoint&geometry=box&coords=5,4;8,7'
echo
echo


echo "08. Query B3 coveredBy -> nok"
echo "============================="
orionCurl --url '/v2/entities?georel=coveredBy&geometry=box&coords=11,4;14,7'
echo
echo


echo "09. Query B3 intersects -> nok"
echo "=============================="
orionCurl --url '/v2/entities?georel=intersects&geometry=box&coords=11,4;14,7'
echo
echo


echo "10. Query B3 disjoint -> ok"
echo "==========================="
orionCurl --url '/v2/entities?georel=disjoint&geometry=box&coords=11,4;14,7'
echo
echo

--REGEXPECT--
01. Create and update entity
============================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/A?type=T
Content-Length: 0



HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})



02. Query B1 coveredBy -> ok
============================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 109

[
    {
        "id": "A",
        "location": {
            "metadata": {},
            "type": "geo:polygon",
            "value": [
                "4, 3",
                "6, 6",
                "7, 3",
                "4, 3"
            ]
        },
        "type": "T"
    }
]


03. Query B1 intersects -> ok
=============================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 109

[
    {
        "id": "A",
        "location": {
            "metadata": {},
            "type": "geo:polygon",
            "value": [
                "4, 3",
                "6, 6",
                "7, 3",
                "4, 3"
            ]
        },
        "type": "T"
    }
]


04. Query B1 disjoint -> nok
============================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


05. Query B2 coveredBy -> nok
=============================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


06. Query B2 intersects -> ok
=============================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 109

[
    {
        "id": "A",
        "location": {
            "metadata": {},
            "type": "geo:polygon",
            "value": [
                "4, 3",
                "6, 6",
                "7, 3",
                "4, 3"
            ]
        },
        "type": "T"
    }
]


07. Query B2 disjoint -> nok
============================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


08. Query B3 coveredBy -> nok
=============================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


09. Query B3 intersects -> nok
==============================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


10. Query B3 disjoint -> ok
===========================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 109

[
    {
        "id": "A",
        "location": {
            "metadata": {},
            "type": "geo:polygon",
            "value": [
                "4, 3",
                "6, 6",
                "7, 3",
                "4, 3"
            ]
        },
        "type": "T"
    }
]


--TEARDOWN--
brokerStop CB
dbDrop CB
