# Copyright 2025 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Log queue snapshot when quee is full

--SHELL-INIT--
dbInit CB
brokerStart CB 0 IPv4 -notificationMode threadpool:6:6 -httpTimeout 20000
accumulatorStart --pretty-print

--SHELL--

#
# 01. Create sub1 for E1 using endpoint that nevers responses
# 02. Create sub2 for E2 using endpoint that nevers responses
# 03. Create sub3 for E2 using endpoint that nevers responses
# 04. Trigger sub1 1 times
# 05. Trigger sub2 2 times
# 06. Trigger sub3 3 times
# 07. Trigger sub1 one more time: queue is full
# 08. Get log and see queue full for sub1, sub1(1), sub2(2), sub3(3)
#

echo "01. Create sub1 for E1 using endpoint that nevers responses"
echo "==========================================================="
payload='{
  "subject": {
    "entities": [
      {
        "id": "E1",
        "type": "T"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://127.0.0.1:'${LISTENER_PORT}'/waitForever"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


SUB1_ID=$(echo "$_response" | grep subscriptionId | awk -F '>' '{print $2}' | awk -F '<' '{print $1}' | grep -v '^$' )


echo "02. Create sub2 for E2 using endpoint that nevers responses"
echo "==========================================================="
payload='{
  "subject": {
    "entities": [
      {
        "id": "E2",
        "type": "T"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://127.0.0.1:'${LISTENER_PORT}'/waitForever"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


SUB2_ID=$(echo "$_response" | grep subscriptionId | awk -F '>' '{print $2}' | awk -F '<' '{print $1}' | grep -v '^$' )


echo "03. Create sub3 for E3 using endpoint that nevers responses"
echo "==========================================================="
payload='{
  "subject": {
    "entities": [
      {
        "id": "E3",
        "type": "T"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://127.0.0.1:'${LISTENER_PORT}'/waitForever"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


SUB3_ID=$(echo "$_response" | grep subscriptionId | awk -F '>' '{print $2}' | awk -F '<' '{print $1}' | grep -v '^$' )


echo "04. Trigger sub1 1 times"
echo "========================"
payload='
{
  "id": "E1",
  "type": "T",
  "A": {
    "type": "Number",
    "value": 20
  }
}'
orionCurl --url /v2/entities?options=forcedUpdate,upsert --payload "$payload"
echo
echo


echo "05. Trigger sub2 2 times"
echo "========================"
payload='
{
  "id": "E2",
  "type": "T",
  "A": {
    "type": "Number",
    "value": 20
  }
}'
orionCurl --url /v2/entities?options=forcedUpdate,upsert --payload "$payload"
echo
echo
orionCurl --url /v2/entities?options=forcedUpdate,upsert --payload "$payload"
echo
echo


echo "06. Trigger sub3 3 times"
echo "========================"
payload='
{
  "id": "E3",
  "type": "T",
  "A": {
    "type": "Number",
    "value": 20
  }
}'
orionCurl --url /v2/entities?options=forcedUpdate,upsert --payload "$payload"
echo
echo
orionCurl --url /v2/entities?options=forcedUpdate,upsert --payload "$payload"
echo
echo
orionCurl --url /v2/entities?options=forcedUpdate,upsert --payload "$payload"
echo
echo


echo "07. Trigger sub1 one more time: queue is full"
echo "============================================="
payload='
{
  "id": "E1",
  "type": "T",
  "A": {
    "type": "Number",
    "value": 20
  }
}'
orionCurl --url /v2/entities?options=forcedUpdate,upsert --payload "$payload"
orionCurl --url /v2/entities?options=forcedUpdate,upsert --payload "$payload"
orionCurl --url /v2/entities?options=forcedUpdate,upsert --payload "$payload"
orionCurl --url /v2/entities?options=forcedUpdate,upsert --payload "$payload"
orionCurl --url /v2/entities?options=forcedUpdate,upsert --payload "$payload"
orionCurl --url /v2/entities?options=forcedUpdate,upsert --payload "$payload"
echo
echo


echo "08. Get log and see queue full for sub1, sub1(1), sub2(2), sub3(3)"
echo "=================================================================="
cat /tmp/contextBroker.log | grep 'ERROR' | awk -F 'msg=' '{print $2}'
echo
echo


--REGEXPECT--
01. Create sub1 for E1 using endpoint that nevers responses
===========================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



02. Create sub2 for E2 using endpoint that nevers responses
===========================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



03. Create sub3 for E3 using endpoint that nevers responses
===========================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



04. Trigger sub1 1 times
========================
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E1?type=T



05. Trigger sub2 2 times
========================
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E2?type=T



HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E2?type=T



06. Trigger sub3 3 times
========================
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E3?type=T



HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E3?type=T



HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E3?type=T



07. Trigger sub1 one more time: queue is full
=============================================
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E1?type=T



08. Get log and see queue full for sub1, sub1(1), sub2(2), sub3(3)
==================================================================
X


--TEARDOWN--
brokerStop CB
dbDrop CB
accumulatorStop
