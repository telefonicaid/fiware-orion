# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
PUT /v2/entities/E1 making sure that dots in attribute names are preserved

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01.  Create E1/A1+A2
# 02.  Make sure E1 is as created
# 02b. Now look at E1 with options=keyValues
# 03.  Modify E1 to E1/A2+A3
# 04.  Make sure E1 is as modified
# 04b. Now look at E1 with options=keyValues
# 05.  GET attribute A2..y
# 05b. GET attribute A2..y using options=keyValues
# 06.  GET attribute A3.Z
# 06b. GET attribute A3.Z using options=keyValues
# 07.  Check attributes in DB
#

echo "01. Create E1/A1+A2"
echo "==================="
payload='{ "id": "E1", "A1.X": 1, "A2..y": 2 }'
orionCurl --url '/v2/entities?options=keyValues' --payload "$payload"
echo
echo


echo "02. Make sure E1 is as created"
echo "=============================="
orionCurl --url /v2/entities/E1
echo
echo


echo "02b. Now look at E1 with options=keyValues"
echo "=========================================="
orionCurl --url /v2/entities/E1?options=keyValues
echo
echo


echo "03. Modify E1 to E1/A2+A3"
echo "========================="
payload='{ "A2..y": 2, "A3.Z": 3 }'
orionCurl --url '/v2/entities/E1/attrs?options=keyValues' --payload "$payload" -X PUT
echo
echo


echo "04. Make sure E1 is as modified"
echo "==============================="
orionCurl --url /v2/entities/E1
echo
echo


echo "04b. Now look at E1 with options=keyValues"
echo "=========================================="
orionCurl --url /v2/entities/E1?options=keyValues
echo
echo


echo "05. GET attribute A2..y"
echo "======================="
orionCurl --url "/v2/entities/E1/attrs/A2..y"
echo
echo


echo "05b. GET attribute A2..y using options=keyValues"
echo "================================================"
orionCurl --url "/v2/entities/E1/attrs/A2..y?options=keyValues"
echo
echo


echo "06. GET attribute A3.Z"
echo "======================"
orionCurl --url "/v2/entities/E1/attrs/A3.Z"
echo
echo


echo "06b. GET attribute A3.Z using options=keyValues"
echo "==============================================="
orionCurl --url "/v2/entities/E1/attrs/A3.Z?options=keyValues"
echo
echo


echo "07. Check attributes in DB"
echo "=========================="
mongoCmd ${CB_DB_NAME} 'db.entities.find({ "_id" : { "id" : "E1",  "type": "Thing", "servicePath" : "/" } }, {_id:0, attrNames: 1})'
echo
echo


--REGEXPECT--
01. Create E1/A1+A2
===================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E1?type=Thing
Content-Length: 0



02. Make sure E1 is as created
==============================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 125

{
    "A1.X": {
        "metadata": {},
        "type": "Number",
        "value": 1
    },
    "A2..y": {
        "metadata": {},
        "type": "Number",
        "value": 2
    },
    "id": "E1",
    "type": "Thing"
}


02b. Now look at E1 with options=keyValues
==========================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 45

{
    "A1.X": 1,
    "A2..y": 2,
    "id": "E1",
    "type": "Thing"
}


03. Modify E1 to E1/A2+A3
=========================
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})



04. Make sure E1 is as modified
===============================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 125

{
    "A2..y": {
        "metadata": {},
        "type": "Number",
        "value": 2
    },
    "A3.Z": {
        "metadata": {},
        "type": "Number",
        "value": 3
    },
    "id": "E1",
    "type": "Thing"
}


04b. Now look at E1 with options=keyValues
==========================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 45

{
    "A2..y": 2,
    "A3.Z": 3,
    "id": "E1",
    "type": "Thing"
}


05. GET attribute A2..y
=======================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 41

{
    "metadata": {},
    "type": "Number",
    "value": 2
}


05b. GET attribute A2..y using options=keyValues
================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 11

{
    "A2..y": 2
}


06. GET attribute A3.Z
======================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 41

{
    "metadata": {},
    "type": "Number",
    "value": 3
}


06b. GET attribute A3.Z using options=keyValues
===============================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 10

{
    "A3.Z": 3
}


07. Check attributes in DB
==========================
{ "attrNames" : [ "A2..y", "A3.Z" ] }


--TEARDOWN--
brokerStop CB
dbDrop CB

