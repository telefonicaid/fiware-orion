# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
String filters for compound values of metadata: existence

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. Create E1 with A1 with metadata M1 with compound value, including i==10 and s='test_string'
# 02. GET /v2/entities?mq=A1.M1.i, see E1
# 03. GET /v2/entities?mq=A1.M1.i2, see nothing
# 04. GET /v2/entities?mq=A2.M1.i, see nothing
# 05. GET /v2/entities?mq=!A1.M1.i2, see E1
# 06. GET /v2/entities?mq=!A1.M1.i, see nothing
# 07. GET /v2/entities?mq=!A2.M1.i, see E1
#

echo "01. Create E1 with A1 with metadata M1 with compound value, including i==10 and s='test_string'"
echo "==============================================================================================="
payload='{
  "id": "E1",
  "A1": {
    "value": "not important",
    "metadata": {
      "M1": {
        "value": {
          "i": 10,
          "s": "test_string"
        }
      }
    }
  }
}'
orionCurl --url /v2/entities --payload "${payload}"
echo
echo


echo "02. GET /v2/entities?mq=A1.M1.i, see E1"
echo "======================================="
orionCurl --url '/v2/entities?mq=A1.M1.i'
echo
echo


echo "03. GET /v2/entities?mq=A1.M1.i2, see nothing"
echo "============================================="
orionCurl --url '/v2/entities?mq=A1.M1.i2'
echo
echo


echo "04. GET /v2/entities?mq=A2.M1.i, see nothing"
echo "============================================"
orionCurl --url '/v2/entities?mq=A2.M1.i'
echo
echo


echo "05. GET /v2/entities?mq=!A1.M1.i2, see E1"
echo "========================================="
orionCurl --url '/v2/entities?mq=!A1.M1.i2'
echo
echo


echo "06. GET /v2/entities?mq=!A1.M1.i, see nothing"
echo "============================================="
orionCurl --url '/v2/entities?mq=!A1.M1.i'
echo
echo


echo "07. GET /v2/entities?mq=!A2.M1.i, see E1"
echo "========================================"
orionCurl --url '/v2/entities?mq=!A2.M1.i'
echo
echo


--REGEXPECT--
01. Create E1 with A1 with metadata M1 with compound value, including i==10 and s='test_string'
===============================================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E1?type=Thing
Content-Length: 0



02. GET /v2/entities?mq=A1.M1.i, see E1
=======================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 153

[
    {
        "A1": {
            "metadata": {
                "M1": {
                    "type": "StructuredValue",
                    "value": {
                        "i": 10,
                        "s": "test_string"
                    }
                }
            },
            "type": "Text",
            "value": "not important"
        },
        "id": "E1",
        "type": "Thing"
    }
]


03. GET /v2/entities?mq=A1.M1.i2, see nothing
=============================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


04. GET /v2/entities?mq=A2.M1.i, see nothing
============================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


05. GET /v2/entities?mq=!A1.M1.i2, see E1
=========================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 153

[
    {
        "A1": {
            "metadata": {
                "M1": {
                    "type": "StructuredValue",
                    "value": {
                        "i": 10,
                        "s": "test_string"
                    }
                }
            },
            "type": "Text",
            "value": "not important"
        },
        "id": "E1",
        "type": "Thing"
    }
]


06. GET /v2/entities?mq=!A1.M1.i, see nothing
=============================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


07. GET /v2/entities?mq=!A2.M1.i, see E1
========================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 153

[
    {
        "A1": {
            "metadata": {
                "M1": {
                    "type": "StructuredValue",
                    "value": {
                        "i": 10,
                        "s": "test_string"
                    }
                }
            },
            "type": "Text",
            "value": "not important"
        },
        "id": "E1",
        "type": "Thing"
    }
]


--TEARDOWN--
brokerStop CB
dbDrop CB
