# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
String filters for compound values of metadata: string match

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. Create E1 with A1 with metadata M1 with compound value containing all JSON types
#
# 02. end-match: GET /v2/entities?mq=A1.M1.s~=ing, see E1
# 03. start-match: GET /v2/entities?mq=A1.M1.s~=test_, see E1
# 04. middle-match: GET /v2/entities?mq=A1.M1.s~=t_st, see E1
# 05. one-char-match: GET /v2/entities?mq=A1.M1.s~=_, see E1
# 06. no-match: GET /v2/entities?mq=A1.M1.s~=none, see nothing
#

echo "01. Create E1 with A1 with metadata M1 with compound value containing all JSON types"
echo "===================================================================================="
payload='{
  "id": "E1",
  "A1": {
    "value": "not important",
    "metadata": {
      "M1": {
        "value": {
          "i": 10,
          "f": 3.14,
          "s": "test_string",
          "T": true,
          "F": false,
          "N": null
        }
      }
    }
  }
}'
orionCurl --url /v2/entities --payload "${payload}"
echo
echo


echo "02. end-match: GET /v2/entities?mq=A1.M1.s~=ing, see E1"
echo "======================================================="
orionCurl --url '/v2/entities?mq=A1.M1.s~=ing'
echo
echo


echo "03. start-match: GET /v2/entities?mq=A1.M1.s~=test_, see E1"
echo "==========================================================="
orionCurl --url '/v2/entities?mq=A1.M1.s~=test_'
echo
echo


echo "04. middle-match: GET /v2/entities?mq=A1.M1.s~=t_st, see E1"
echo "==========================================================="
orionCurl --url '/v2/entities?mq=A1.M1.s~=t_st'
echo
echo


echo "05. one-char-match: GET /v2/entities?mq=A1.M1.s~=_, see E1"
echo "=========================================================="
orionCurl --url '/v2/entities?mq=A1.M1.s~=_'
echo
echo


echo "06. no-match: GET /v2/entities?mq=A1.M1.s~=none, see nothing"
echo "============================================================"
orionCurl --url '/v2/entities?mq=A1.M1.s~=none'
echo
echo


--REGEXPECT--
01. Create E1 with A1 with metadata M1 with compound value containing all JSON types
====================================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E1?type=Thing
Content-Length: 0



02. end-match: GET /v2/entities?mq=A1.M1.s~=ing, see E1
=======================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 190

[
    {
        "A1": {
            "metadata": {
                "M1": {
                    "type": "StructuredValue",
                    "value": {
                        "F": false,
                        "N": null,
                        "T": true,
                        "f": 3.14,
                        "i": 10,
                        "s": "test_string"
                    }
                }
            },
            "type": "Text",
            "value": "not important"
        },
        "id": "E1",
        "type": "Thing"
    }
]


03. start-match: GET /v2/entities?mq=A1.M1.s~=test_, see E1
===========================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 190

[
    {
        "A1": {
            "metadata": {
                "M1": {
                    "type": "StructuredValue",
                    "value": {
                        "F": false,
                        "N": null,
                        "T": true,
                        "f": 3.14,
                        "i": 10,
                        "s": "test_string"
                    }
                }
            },
            "type": "Text",
            "value": "not important"
        },
        "id": "E1",
        "type": "Thing"
    }
]


04. middle-match: GET /v2/entities?mq=A1.M1.s~=t_st, see E1
===========================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 190

[
    {
        "A1": {
            "metadata": {
                "M1": {
                    "type": "StructuredValue",
                    "value": {
                        "F": false,
                        "N": null,
                        "T": true,
                        "f": 3.14,
                        "i": 10,
                        "s": "test_string"
                    }
                }
            },
            "type": "Text",
            "value": "not important"
        },
        "id": "E1",
        "type": "Thing"
    }
]


05. one-char-match: GET /v2/entities?mq=A1.M1.s~=_, see E1
==========================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 190

[
    {
        "A1": {
            "metadata": {
                "M1": {
                    "type": "StructuredValue",
                    "value": {
                        "F": false,
                        "N": null,
                        "T": true,
                        "f": 3.14,
                        "i": 10,
                        "s": "test_string"
                    }
                }
            },
            "type": "Text",
            "value": "not important"
        },
        "id": "E1",
        "type": "Thing"
    }
]


06. no-match: GET /v2/entities?mq=A1.M1.s~=none, see nothing
============================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


--TEARDOWN--
brokerStop CB
dbDrop CB
