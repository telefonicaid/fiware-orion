# Copyright 2025 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Order by with dupplicate atribute (POST /v2/op/query variant)

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. Create entity User1: name=John, surname=Doe,      age=36
# 02. Create entity User2: name=John, surname=Smith,    age=37
# 03. Create entity User3: name=Jane, surname=Simpson,  age=27
# 04. Create entity User4: name=Jane, surname=Thompson, age=18
# 05. Get sorted by age, age (see error)
# 06. Get sorted by age in reserve order, age in reverse order: error
# 07. Get sorted by name, name, then age: error
# 08. Get sorted by reverse name, reverse name, then age: error
# 09. Get sorted by name, then reserve age, reverse age: error
# 10. Get sorted by name, then reserve age, name: error
# 11. Get sorted by name, then reserve age, then reverse name: error
# 12. Get sorted by age, then reserve age: error
#

echo "01. Create entity User1: name=John, surname=Doe, age=36"
echo "======================================================="
payload='{
  "id": "User1",
  "type": "User",
  "name": "John",
  "surname": "Doe",
  "age": 36
}'
orionCurl --url /v2/entities?options=keyValues -X POST --payload "$payload"
echo
echo


echo "02. Create entity User2: name=John, surname=Smith, age=37"
echo "========================================================="
payload='{
  "id": "User2",
  "type": "User",
  "name": "John",
  "surname": "Smith",
  "age": 37
}'
orionCurl --url /v2/entities?options=keyValues -X POST --payload "$payload"
echo
echo


echo "03. Create entity User3: name=Jane, surname=Simpson, age=27"
echo "==========================================================="
payload='{
  "id": "User3",
  "type": "User",
  "name": "Jane",
  "surname": "Simpson",
  "age": 27
}'
orionCurl --url /v2/entities?options=keyValues -X POST --payload "$payload"
echo
echo


echo "04. Create entity User4: name=Jane, surname=Thomson, age=18"
echo "==========================================================="
payload='{
  "id": "User4",
  "type": "User",
  "name": "Jane",
  "surname": "Thompson",
  "age": 18
}'
orionCurl --url /v2/entities?options=keyValues -X POST --payload "$payload"
echo
echo


echo "05. Get sorted by age, age: error"
echo "================================="
payload='{
  "entities": [
    {
      "idPattern": ".*"
    }
  ]
}'
orionCurl --url '/v2/op/query?options=keyValues&orderBy=age,age' --payload "$payload"
echo
echo


echo "06. Get sorted by age in reserve order, age in reverse order: error"
echo "==================================================================="
payload='{
  "entities": [
    {
      "idPattern": ".*"
    }
  ]
}'
orionCurl --url '/v2/op/query?options=keyValues&orderBy=!age,!age' --payload "$payload"
echo
echo


echo "07. Get sorted by name, name, then age: error"
echo "============================================="
payload='{
  "entities": [
    {
      "idPattern": ".*"
    }
  ]
}'
orionCurl --url '/v2/op/query?options=keyValues&orderBy=name,name,age' --payload "$payload"
echo
echo


echo "08. Get sorted by reverse name, reverse name, then age: error"
echo "============================================================="
payload='{
  "entities": [
    {
      "idPattern": ".*"
    }
  ]
}'
orionCurl --url '/v2/op/query?options=keyValues&orderBy=!name,!name,age' --payload "$payload"
echo
echo


echo "09. Get sorted by name, then reserve age, reverse age: error"
echo "============================================================"
payload='{
  "entities": [
    {
      "idPattern": ".*"
    }
  ]
}'
orionCurl --url '/v2/op/query?options=keyValues&orderBy=name,!age,!age' --payload "$payload"
echo
echo

echo "10. Get sorted by name, then reserve age, name: error"
echo "====================================================="
payload='{
  "entities": [
    {
      "idPattern": ".*"
    }
  ]
}'
orionCurl --url '/v2/op/query?options=keyValues&orderBy=name,!age,name' --payload "$payload"
echo
echo


echo "11. Get sorted by name, then reserve age, then reverse name: error"
echo "=================================================================="
payload='{
  "entities": [
    {
      "idPattern": ".*"
    }
  ]
}'
orionCurl --url '/v2/op/query?options=keyValues&orderBy=name,!age,!name' --payload "$payload"
echo
echo


echo "12. Get sorted by age, then reserve age: error"
echo "=============================================="
payload='{
  "entities": [
    {
      "idPattern": ".*"
    }
  ]
}'
orionCurl --url '/v2/op/query?options=keyValues&orderBy=age,!age' --payload "$payload"
echo
echo


--REGEXPECT--
01. Create entity User1: name=John, surname=Doe, age=36
=======================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/User1?type=User
Content-Length: 0



02. Create entity User2: name=John, surname=Smith, age=37
=========================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/User2?type=User
Content-Length: 0



03. Create entity User3: name=Jane, surname=Simpson, age=27
===========================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/User3?type=User
Content-Length: 0



04. Create entity User4: name=Jane, surname=Thomson, age=18
===========================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/User4?type=User
Content-Length: 0



05. Get sorted by age, age: error
=================================
HTTP/1.1 400 Bad Request
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 71

{
    "description": "duplicate orderBy token detected",
    "error": "BadRequest"
}


06. Get sorted by age in reserve order, age in reverse order: error
===================================================================
HTTP/1.1 400 Bad Request
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 71

{
    "description": "duplicate orderBy token detected",
    "error": "BadRequest"
}


07. Get sorted by name, name, then age: error
=============================================
HTTP/1.1 400 Bad Request
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 71

{
    "description": "duplicate orderBy token detected",
    "error": "BadRequest"
}


08. Get sorted by reverse name, reverse name, then age: error
=============================================================
HTTP/1.1 400 Bad Request
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 71

{
    "description": "duplicate orderBy token detected",
    "error": "BadRequest"
}


09. Get sorted by name, then reserve age, reverse age: error
============================================================
HTTP/1.1 400 Bad Request
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 71

{
    "description": "duplicate orderBy token detected",
    "error": "BadRequest"
}


10. Get sorted by name, then reserve age, name: error
=====================================================
HTTP/1.1 400 Bad Request
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 71

{
    "description": "duplicate orderBy token detected",
    "error": "BadRequest"
}


11. Get sorted by name, then reserve age, then reverse name: error
==================================================================
HTTP/1.1 400 Bad Request
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 71

{
    "description": "duplicate orderBy token detected",
    "error": "BadRequest"
}


12. Get sorted by age, then reserve age: error
==============================================
HTTP/1.1 400 Bad Request
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 71

{
    "description": "duplicate orderBy token detected",
    "error": "BadRequest"
}


--TEARDOWN--
brokerStop CB
dbDrop CB
