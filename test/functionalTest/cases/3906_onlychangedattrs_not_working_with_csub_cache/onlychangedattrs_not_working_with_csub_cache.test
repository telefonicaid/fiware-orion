# Copyright 2021 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
onlyChangedAttrrs not working with csubs cache

--SHELL-INIT--
dbDrop ${CB_DB_NAME} tk
brokerStart CB 0 IPv4 -subCacheIval 2 -multiservice
accumulatorStart --pretty-print localhost $LISTENER_PORT

--SHELL--

#
# 01. Create entity E1 with attributes A and B
# 02. Create subscription with onlyChangedAttrs true covering the entity
# 03. Update E1-A
# 04. Sleep until cache refres, update E1-A again
# 05. Dump accumulator and see only A atribute in both notifications
#


echo '01. Create entity E1 with attributes A and B'
echo '============================================'
payload='{
   "id": "E1",
   "type": "T",
   "A": {
     "value": "foo",
     "type": "Text"
   },
   "B": {
     "value": 123,
     "type": "Number"
   }
}'
orionCurl --url /v2/entities --payload "$payload" --tenant tk --servicePath /
echo
echo


echo '02. Create subscription with onlyChangedAttrs true covering the entity'
echo '======================================================================'
payload='{
  "subject": {
    "entities": [
      {
        "idPattern": ".*"
      }
    ]
   },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    },
    "onlyChangedAttrs":true,
    "throttling": 0
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload" --tenant tk --servicePath /
echo
echo

sleep 2s

echo '03. Update E1-A'
echo '==============='
payload='{
   "A": {
     "value": "bar",
     "type": "Text"
   }
}'
orionCurl --url /v2/entities/E1/attrs --payload "$payload" --tenant tk --servicePath /
echo
echo


echo '04. Sleep until cache refres, update E1-A again'
echo '==============================================='
sleep 2.5s
payload='{
   "A": {
     "value": "zzz",
     "type": "Text"
   }
}'
orionCurl --url /v2/entities/E1/attrs --payload "$payload" --tenant tk --servicePath /
echo
echo


echo '05. Dump accumulator and see only A atribute in both notifications'
echo '=================================================================='
accumulatorDump
echo
echo


--REGEXPECT--
01. Create entity E1 with attributes A and B
============================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E1?type=T
Content-Length: 0



02. Create subscription with onlyChangedAttrs true covering the entity
======================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



03. Update E1-A
===============
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})



04. Sleep until cache refres, update E1-A again
===============================================
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})



05. Dump accumulator and see only A atribute in both notifications
==================================================================
POST http://localhost:9997/notify
Fiware-Servicepath: /
Content-Length: 125
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Fiware-Service: tk
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "Text",
                "value": "bar"
            },
            "id": "E1",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================
POST http://localhost:9997/notify
Fiware-Servicepath: /
Content-Length: 125
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Fiware-Service: tk
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "Text",
                "value": "zzz"
            },
            "id": "E1",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================


--TEARDOWN--
brokerStop CB
accumulatorStop $LISTENER_PORT
dbDrop ${CB_DB_NAME} tk
