# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Notification That Times Out

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print

--SHELL--

#
# 01. Register E1/T1/A1
# 02. Availability-Subscribe to E1/A1 for accumulator, on a non-responding URL
# 04. Sleep 6 secs (default timeout for notifications is 5 seconds)
# 05. Grep in brokers logfile to see that the notification failed and that the broker thread continued
# 06. Dump notifications in accumulator - see nothing
#

echo "01. Register E1/T1/A1"
echo "====================="
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id":   "E1",
         "type": "T1"
      }
    ],
    "attributes": [
      {
        "name": "A1",
        "type": "string"
      }
    ],
    "providingApplication": "http://localhost:'${LISTENER_PORT}'/v1"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload"
echo
echo


echo "02. Availability-Subscribe to E1/A1 for accumulator, on a non-responding URL"
echo "============================================================================"
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A1"
  ], 
  "reference": "http://localhost:'${LISTENER_PORT}'/noresponse",
  "duration": "P1M"
}'
orionCurl --url /v1/registry/subscribeContextAvailability --payload "$payload"
echo
echo


echo "03. Sleep 6 secs (default timeout for notifications is 5 seconds)"
echo "================================================================="
sleep 6
echo
echo


echo "04. Grep in brokers logfile to see that the notification failed and that the broker thread continued"
echo "===================================================================================================="
grep "Timeout was reached" /tmp/contextBroker.log | awk -F 'notification failure for sender-thread: ' '{ print $2 }'
echo
echo


echo "05. Dump notifications in accumulator - see nothing"
echo "==================================================="
accumulatorDump
echo
echo


--REGEXPECT--
01. Register E1/T1/A1
=====================
HTTP/1.1 200 OK
Content-Length: 62
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


02. Availability-Subscribe to E1/A1 for accumulator, on a non-responding URL
============================================================================
HTTP/1.1 200 OK
Content-Length: 62
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "P1M", 
    "subscriptionId": "REGEX([0-9a-f]{24})"
}


03. Sleep 6 secs (default timeout for notifications is 5 seconds)
=================================================================


04. Grep in brokers logfile to see that the notification failed and that the broker thread continued
====================================================================================================
Timeout was reached


05. Dump notifications in accumulator - see nothing
===================================================


--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
