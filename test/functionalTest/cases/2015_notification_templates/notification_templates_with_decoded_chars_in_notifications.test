# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Notification Templates, with decoded chars in notifications

--SHELL-INIT--
# Note that accumulatorStart doesn't use --pretty-print as in this case the accumulator is
# not receiving JSON payloads
dbInit CB
brokerStart CB
accumulatorStart

--SHELL--

#
# 01. Create a subscription with encoded chars in custom payload
# 02. Create an entity to provoke a notification
# 03. Dump accumulator to ensure the broker correctly decodes the encoded chars in the custom payload
# 04. GET the subscription to see the encoded chars in custom payload
#

echo "01. Create a subscription with encoded chars in custom payload"
echo "=============================================================="
payload='{
  "subject": {
    "entities": [
      {
        "id" : "E1"
      }
    ],
    "condition": {
      "attrs": []
    }
  },
  "notification": {
    "httpCustom": {
      "url":     "http://127.0.0.1:'${LISTENER_PORT}'/notify",
      "payload": "A string with double-quotes: %22${A1}%22",
      "method":  "POST",
      "headers": { "hs1": "1", "hs2": "${A1}" },
      "qs":      { "qs1": "1", "qs2": "${A1}" }
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
subId=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")
echo
echo


echo "02. Create an entity to provoke a notification"
echo "=============================================="
payload='{
  "id": "E1",
  "A1": "a1"
}'
orionCurl --url /v2/entities?options=keyValues --payload "$payload"
echo
echo


echo "03. Dump accumulator to ensure the broker correctly decodes the encoded chars in the custom payload"
echo "==================================================================================================="
accumulatorDump
echo
echo


echo "04. GET the subscription to see the encoded chars in custom payload"
echo "==================================================================="
orionCurl --url /v2/subscriptions/$subId
echo
echo


--REGEXPECT--
01. Create a subscription with encoded chars in custom payload
==============================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. Create an entity to provoke a notification
==============================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E1?type=Thing
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. Dump accumulator to ensure the broker correctly decodes the encoded chars in the custom payload
===================================================================================================
POST http://127.0.0.1:9997/notify?qs1=1&qs2=a1
Fiware-Servicepath: /
Content-Length: 33
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: custom
Host: 127.0.0.1:9997
Accept: application/json
Content-Type: text/plain; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1
Hs1: 1
Hs2: a1

A string with double-quotes: "a1"=======================================


04. GET the subscription to see the encoded chars in custom payload
===================================================================
HTTP/1.1 200 OK
Content-Length: 520
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [],
        "attrsFormat": "normalized",
        "covered": false,
        "httpCustom": {
            "headers": {
                "hs1": "1",
                "hs2": "${A1}"
            },
            "method": "POST",
            "payload": "A string with double-quotes: %22${A1}%22",
            "qs": {
                "qs1": "1",
                "qs2": "${A1}"
            },
            "url": "http://127.0.0.1:REGEX(\d+)/notify"
        },
        "lastNotification": "REGEX(.*)",
        "lastSuccess": "REGEX(.*)",
        "lastSuccessCode": 200,
        "onlyChangedAttrs": false,
        "timesSent": 1
    },
    "status": "active",
    "subject": {
        "condition": {
            "attrs": []
        },
        "entities": [
            {
                "id": "E1"
            }
        ]
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
accumulatorStop
