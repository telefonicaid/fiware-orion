# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Notification Templates with payload as XML for notifications

--SHELL-INIT--
# Note that accumulatorStart doesn't use --pretty-print as in this case the accumulator is
# not receiving JSON payloads
dbInit CB
brokerStart CB
accumulatorStart

--SHELL--

#
# 01. Create a subscription with template payload as XML, and application/xml as HTTP header
# 02. Create an entity to trigger a notification
# 03. Dump accumulator to see the notification (in XML)
#

echo "01. Create a subscription with template payload as XML, and application/xml as HTTP header"
echo "=========================================================================================="
payload='{
  "subject": {
    "entities": [
      {
        "id" : "E1"
      }
    ],
    "condition": {
      "attrs": []
    }
  },
  "notification": {
    "httpCustom": {
      "url":     "http://127.0.0.1:'${LISTENER_PORT}'/notify",
      "payload": "%3Cattributes%3E%3Ca1%3E${A1}%3C/a1%3E%3Ca2%3E${A2}%3C/a2%3E%3Ca3%3E${A3}%3C/a3%3E%3C/attributes%3E",
      "headers": { "Content-Type": "application/xml" }
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "02. Create an entity to trigger a notification"
echo "=============================================="
payload='{
  "id": "E1",
  "A1": "a1",
  "A2": "a2",
  "A3": 13
}'
orionCurl --url /v2/entities?options=keyValues --payload "$payload"
echo
echo


echo "03. Dump accumulator to see the notification (in XML)"
echo "====================================================="
sleep 0.5
accumulatorDump
echo
echo


--REGEXPECT--
01. Create a subscription with template payload as XML, and application/xml as HTTP header
==========================================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



02. Create an entity to trigger a notification
==============================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E1?type=Thing
Content-Length: 0



03. Dump accumulator to see the notification (in XML)
=====================================================
POST http://127.0.0.1:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 58
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: custom
Host: 127.0.0.1:REGEX(\d+)
Accept: application/json
Content-Type: application/xml
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

<attributes><a1>a1</a1><a2>a2</a2><a3>13</a3></attributes>=======================================


--TEARDOWN--
brokerStop CB
dbDrop CB
accumulatorStop
