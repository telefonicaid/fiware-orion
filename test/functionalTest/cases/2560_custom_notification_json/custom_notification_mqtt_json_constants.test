# Copyright 2022 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Custom notification MQTT with JSON with constants

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print --mqttHost ${MQTT_HOST} --mqttPort ${MQTT_PORT} --mqttTopic "#"

--SHELL--

#
# 01. Create subscription for E1 with custom notification with constant JSON object
# 02. Create subscription for E1 with custom notification with constant JSON array
# 03. GET /v2/subscriptions and see both subscriptions
# 04. Create E1 entity to trigger both notifications
# 05. Dump accumulator, see 2 notifications
#

echo "01. Create subscription for E1 with custom notification with JSON object"
echo "========================================================================"
payload='{
  "subject": {
    "entities": [
      {
        "id" : "E1",
        "type": "T"
      }
    ]
  },
  "notification": {
    "mqttCustom": {
      "topic": "topic1",
      "url": "mqtt://localhost:1883",
      "json": {
        "text": "foo",
        "number": 10,
        "bool": true,
        "null": null,
        "array": [
          "22",
          {
            "x" : [ "x1", "x2" ],
            "y" : 3
          },
          [ "z1", "z2" ]
        ],
        "object": {
          "x": {
            "x1": "a",
            "x2": "b"
          },
          "y": [ "y1", "y2" ]
        }
      }
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "02. Create subscription for E1 with custom notification with JSON array"
echo "======================================================================="
payload='{
  "subject": {
    "entities": [
      {
        "id" : "E1",
        "type": "T"
      }
    ]
  },
  "notification": {
    "mqttCustom": {
      "topic": "topic1",
      "url": "mqtt://localhost:1883",
      "json": [
        "foo",
        10,
        true,
        null,
        [
          "22",
          {
            "x" : [ "x1", "x2" ],
            "y" : 3
          },
          [ "z1", "z2" ]
        ],
        {
          "x": {
            "x1": "a",
            "x2": "b"
          },
          "y": [ "y1", "y2" ]
        }
      ]
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "03. GET /v2/subscriptions and see both subscriptions"
echo "===================================================="
orionCurl --url /v2/subscriptions
echo
echo


echo "04. Create E1 entity to trigger both notifications"
echo "=================================================="
payload='{
  "id": "E1",
  "type": "T",
  "A": {
    "value": "trigger!",
    "type": "Text"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


# Sometimes the accumulator needs some time to get the MQTT notification
sleep 0.5s


echo "05. Dump accumulator, see 2 notifications"
echo "========================================="
accumulatorDump
echo
echo


--REGEXPECT--
01. Create subscription for E1 with custom notification with JSON object
========================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



02. Create subscription for E1 with custom notification with JSON array
=======================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



03. GET /v2/subscriptions and see both subscriptions
====================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 946

[
    {
        "id": "REGEX([0-9a-f]{24})",
        "notification": {
            "attrs": [],
            "attrsFormat": "normalized",
            "covered": false,
            "mqttCustom": {
                "json": {
                    "array": [
                        "22",
                        {
                            "x": [
                                "x1",
                                "x2"
                            ],
                            "y": 3
                        },
                        [
                            "z1",
                            "z2"
                        ]
                    ],
                    "bool": true,
                    "null": null,
                    "number": 10,
                    "object": {
                        "x": {
                            "x1": "a",
                            "x2": "b"
                        },
                        "y": [
                            "y1",
                            "y2"
                        ]
                    },                    
                    "text": "foo"
                },
                "qos": 0,
                "retain": false,
                "topic": "topic1",
                "url": "mqtt://localhost:1883"
            },
            "onlyChangedAttrs": false
        },
        "status": "active",
        "subject": {
            "condition": {
                "attrs": [],
                "notifyOnMetadataChange": true
            },
            "entities": [
                {
                    "id": "E1",
                    "type": "T"
                }
            ]
        }
    },
    {
        "id": "REGEX([0-9a-f]{24})",
        "notification": {
            "attrs": [],
            "attrsFormat": "normalized",
            "covered": false,
            "mqttCustom": {
                "json": [
                    "foo",
                    10,
                    true,
                    null,
                    [
                        "22",
                        {
                            "x": [
                                "x1",
                                "x2"
                            ],
                            "y": 3
                        },
                        [
                            "z1",
                            "z2"
                        ]
                    ],
                    {
                        "x": {
                            "x1": "a",
                            "x2": "b"
                        },
                        "y": [
                            "y1",
                            "y2"
                        ]
                    }
                ],
                "qos": 0,
                "retain": false,
                "topic": "topic1",
                "url": "mqtt://localhost:1883"
            },
            "onlyChangedAttrs": false
        },
        "status": "active",
        "subject": {
            "condition": {
                "attrs": [],
                "notifyOnMetadataChange": true
            },
            "entities": [
                {
                    "id": "E1",
                    "type": "T"
                }
            ]
        }
    }
]


04. Create E1 entity to trigger both notifications
==================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E1?type=T
Content-Length: 0



#SORT_START
05. Dump accumulator, see 2 notifications
=========================================
MQTT message at topic topic1:
{
    "array": [
        "22",
        {
            "x": [
                "x1",
                "x2"
            ],
            "y": 3
        },
        [
            "z1",
            "z2"
        ]
    ],
    "bool": true,
    "null": null,
    "number": 10,
    "object": {
        "x": {
            "x1": "a",
            "x2": "b"
        },
        "y": [
            "y1",
            "y2"
        ]
    },
    "text": "foo"
}
=======================================
MQTT message at topic topic1:
[
    "foo",
    10,
    true,
    null,
    [
        "22",
        {
            "x": [
                "x1",
                "x2"
            ],
            "y": 3
        },
        [
            "z1",
            "z2"
        ]
    ],
    {
        "x": {
            "x1": "a",
            "x2": "b"
        },
        "y": [
            "y1",
            "y2"
        ]
    }
]
=======================================
#SORT_END


--TEARDOWN--
brokerStop CB
dbDrop CB
accumulatorStop
