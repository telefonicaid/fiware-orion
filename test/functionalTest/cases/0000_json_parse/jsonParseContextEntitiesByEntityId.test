# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
JSON Parse ContextEntitiesByEntityId

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--
# Make a registration using conv op /v1/registry/contextEntities/ENTITY_ID
echo "1: ++++++++++++++++++++"
url="/v1/registry/contextEntities/ENTITY_ID"
payload='{
  "duration" : "PT1H",
  "providingApplication" : "http://kz.tid.es/abc"
}'
orionCurl --url "$url" --payload "${payload}"

REG_ID=$(echo "$_response" | grep registrationId | awk -F\" '{ print $4}')

# Make a discovery to see that the registration went OK
echo "2: ++++++++++++++++++++"
url="/v1/registry/discoverContextAvailability"
payload='{
    "entities": [
        {
            "type": "",
            "isPattern": "false",
            "id": "ENTITY_ID"
        }
    ]
}'
orionCurl --url "$url" --payload "${payload}"

# Modify the first registration
echo "3: ++++++++++++++++++++"
url="/v1/registry/contextEntities/ENTITY_ID"
payload='{
  "duration" : "PT2H",
  "providingApplication" : "http://kz.tid.es/abc2",
  "registrationId" : "'$REG_ID'"
}'
orionCurl --url "$url" --payload "${payload}"

# Now discover that very registration again to see the change
echo "4: ++++++++++++++++++++"
url="/v1/registry/discoverContextAvailability"
payload='{
    "entities": [
        {
            "type": "",
            "isPattern": "false",
            "id": "ENTITY_ID"
        }
    ]
}'
orionCurl --url "$url" --payload "${payload}"

# Now try the GET method
echo "5: ++++++++++++++++++++"
orionCurl --url "/v1/registry/contextEntities/ENTITY_ID"

# And a GET that fails
echo "6: ++++++++++++++++++++"
orionCurl --url "/v1/registry/contextEntities/ENTITY_ID2"

# DELETE and PUT should give errors
echo "7: ++++++++++++++++++++"
orionCurl --url "/v1/registry/contextEntities/ENTITY_ID" -X "DELETE"

echo "8: ++++++++++++++++++++"
url="/v1/registry/contextEntities/ENTITY_ID"
payload='{
  "duration" : "PT2H",
  "providingApplication" : "http://kz.tid.es/abc2"
}'
orionCurl --url "$url" --payload "${payload}" -X "PUT"

echo "9: ++++++++++++++++++++"

--REGEXPECT--
1: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT1H",
    "registrationId": "REGEX([0-9a-f]{24})"
}
2: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 168
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextRegistrationResponses": [
        {
            "contextRegistration": {
                "entities": [
                    {
                        "id": "ENTITY_ID",
                        "isPattern": "false",
                        "type": ""
                    }
                ],
                "providingApplication": "http://kz.tid.es/abc"
            }
        }
    ]
}
3: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT2H",
    "registrationId": "REGEX([0-9a-f]{24})"
}
4: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 169
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextRegistrationResponses": [
        {
            "contextRegistration": {
                "entities": [
                    {
                        "id": "ENTITY_ID",
                        "isPattern": "false",
                        "type": ""
                    }
                ],
                "providingApplication": "http://kz.tid.es/abc2"
            }
        }
    ]
}
5: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 169
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextRegistrationResponses": [
        {
            "contextRegistration": {
                "entities": [
                    {
                        "id": "ENTITY_ID",
                        "isPattern": "false",
                        "type": ""
                    }
                ],
                "providingApplication": "http://kz.tid.es/abc2"
            }
        }
    ]
}
6: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 70
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404",
        "reasonPhrase": "No context element found"
    }
}
7: ++++++++++++++++++++
HTTP/1.1 405 Method Not Allowed
Content-Length: 0
Allow: POST, GET
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

8: ++++++++++++++++++++
HTTP/1.1 405 Method Not Allowed
Content-Length: 0
Allow: POST, GET
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

9: ++++++++++++++++++++
--TEARDOWN--
brokerStop CB
dbDrop CB
