# Copyright 2021 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
MQTT alarm: no alarms case

--SHELL-INIT--
dbInit CB
brokerStart CB 0 IPV4

--SHELL--

#
# Hint: use this to run the MQTT broker needed for this .test:
#
#   docker run -d -p 1883:1883 eclipse-mosquitto:1.6.7
#
# 01. Create MQTT sub with right enpdoint (localhost:1883)
# 02. Upsert three times to trigger three MQTT notifications
# 03. Check logs and see three MQTT notifications and no alarms
#

echo "01. Create MQTT sub with right enpdoint (localhost:1883)"
echo "========================================================"
payload='{
  "subject": {
    "entities": [
      {
        "id": "E",
        "type": "T"
      }
    ]
  },
  "notification": {
    "mqtt": {
      "url": "mqtt://localhost:1883",
      "topic": "sub1"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "02. Upsert three times to trigger three MQTT notifications"
echo "=========================================================="
payload='{
  "id": "E",
  "type": "T",
  "A": {
    "value": 1,
    "type": "Float"
  }
}'
orionCurl --url '/v2/entities?options=forcedUpdate,upsert' --payload "$payload"
echo
echo
orionCurl --url '/v2/entities?options=forcedUpdate,upsert' --payload "$payload"
echo
echo
orionCurl --url '/v2/entities?options=forcedUpdate,upsert' --payload "$payload"
echo
echo


echo "03. Check logs and see three MQTT notifications and no alarms"
echo "============================================================="
cat /tmp/contextBroker.log | grep -v 'corr=N/A' | awk -F 'msg=' '{print $2}'
echo
echo


--REGEXPECT--
01. Create MQTT sub with right enpdoint (localhost:1883)
========================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f\-]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. Upsert three times to trigger three MQTT notifications
==========================================================
HTTP/1.1 204 No Content
Location: /v2/entities/E?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



HTTP/1.1 204 No Content
Location: /v2/entities/E?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



HTTP/1.1 204 No Content
Location: /v2/entities/E?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. Check logs and see three MQTT notifications and no alarms
=============================================================
#SORT_START
Request received: POST /v2/subscriptions, request payload (142 bytes): { "subject": { "entities": [ { "id": "E", "type": "T" } ] }, "notification": { "mqtt": { "url": "mqtt://localhost:1883", "topic": "sub1" } } }, response code: 201
Request received: POST /v2/entities?options=forcedUpdate,upsert, request payload (64 bytes): { "id": "E", "type": "T", "A": { "value": 1, "type": "Float" } }, response code: 204
MQTT Notif delivered REGEX(.*): broker: localhost:1883, topic: sub1
Request received: POST /v2/entities?options=forcedUpdate,upsert, request payload (64 bytes): { "id": "E", "type": "T", "A": { "value": 1, "type": "Float" } }, response code: 204
MQTT Notif delivered REGEX(.*): broker: localhost:1883, topic: sub1
Request received: POST /v2/entities?options=forcedUpdate,upsert, request payload (64 bytes): { "id": "E", "type": "T", "A": { "value": 1, "type": "Float" } }, response code: 204
MQTT Notif delivered REGEX(.*): broker: localhost:1883, topic: sub1
#SORT_END


--TEARDOWN--
brokerStop CB
dbDrop CB
