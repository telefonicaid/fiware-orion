# Copyright 2021 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
KAFKA notification tests

--SHELL-INIT--
dbInit CB

# tracelevel 164 is the one for KAFKA notification logs
kafkaCreateTopics "${KAFKA_BOOTSTRAP_A}" sub1 sub2
brokerStart CB 164 IPV4
accumulatorStart --pretty-print --bootstrapServers "${KAFKA_BOOTSTRAP_A}" --kafkaTopic "^sub.*"

--SHELL--

#
# Hint: A Kafka cluster accessible at localhost:9092,localhost:9094 is required for this .test:
#
#
# 01. Create KAFKA sub for entity E with topic sub1
# 02. Create KAFKA sub for entity E with topic sub2
# 03. Create HTTP sub for entity E
# 04. Create entity E with A=1
# 05. Dump and reset accumulator, see E A=1 in: 1 KAFKA sub1, 1 KAFKA sub2, 1 HTTP
# 06. Update entity E with A=2
# 07. GET subscriptions: 3 subs with timesSent 2 and lastSuccess
# 08. Dump and reset accumulator, see E A=2 in: 1 KAFKA sub1, 1 KAFKA sub2, 1 HTTP
#

echo "01. Create KAFKA sub for entity E with topic sub1"
echo "================================================"
payload='{
  "description": "KAFKA sub on topic sub1",
  "subject": {
    "entities": [
      {
        "id": "E",
        "type": "T"
      }
    ]
  },
  "notification": {
    "kafka": {
      "url": "kafka://localhost:9092,localhost:9094",
      "topic": "sub1"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "02. Create KAFKA sub for entity E with topic sub2"
echo "================================================"
payload='{
  "description": "KAFKA sub on topic sub2",
  "subject": {
    "entities": [
      {
        "id": "E",
        "type": "T"
      }
    ]
  },
  "notification": {
    "kafka": {
      "url": "kafka://localhost:9092,localhost:9094",
      "topic": "sub2"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "03. Create HTTP sub for entity E"
echo "================================"
payload='{
  "description": "HTTP sub",
  "subject": {
    "entities": [
      {
        "id": "E",
        "type": "T"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "04. Create entity E with A=1"
echo "============================"
payload='{
  "id": "E",
  "type": "T",
  "A": {
    "value": 1,
    "type": "Float"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


# Not sure but sometimes a notification may be lost at the accumulator if we
# don't wait. Maybe the dump requests is faster than the storing of KAFKA notifications
# due to the lock in accumulator-server.py?
sleep 2s


echo "05. Dump and reset accumulator, see E A=1 in: 1 KAFKA sub1, 1 KAFKA sub2, 1 HTTP"
echo "=============================================================================="
accumulatorDump
accumulatorReset
echo
echo


echo "06. Update entity E with A=2"
echo "============================"
payload='{
  "A": {
    "value": 2,
    "type": "Float"
  }
}'
orionCurl --url /v2/entities/E/attrs --payload "$payload"
echo
echo


# Not sure but sometimes a notification may be lost at the accumulator if we
# don't wait. Maybe the dump requests is faster than the storing of KAFKA notifications
# due to the lock in accumulator-server.py?
sleep 1s


echo "07. GET subscriptions: 3 subs with timesSent 1 and lastSuccess"
echo "=============================================================="
orionCurl --url /v2/subscriptions
echo
echo


echo "08. Dump and reset accumulator, see E A=2 in: 1 KAFKA sub1, 1 KAFKA sub2, 1 HTTP"
echo "=============================================================================="
accumulatorDump
accumulatorReset
echo
echo


--REGEXPECT--
01. Create KAFKA sub for entity E with topic sub1
================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f\-]{24})
Content-Length: 0



02. Create KAFKA sub for entity E with topic sub2
================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f\-]{24})
Content-Length: 0



03. Create HTTP sub for entity E
================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f\-]{24})
Content-Length: 0



04. Create entity E with A=1
============================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E?type=T
Content-Length: 0



05. Dump and reset accumulator, see E A=1 in: 1 KAFKA sub1, 1 KAFKA sub2, 1 HTTP
==============================================================================
POST http://localhost:9997/notify
Fiware-Servicepath: /
Content-Length: 121
User-Agent: orion/4.2.0-next libcurl/7.88.1
Ngsiv2-Attrsformat: normalized
Host: localhost:9997
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}; cbnotif=[13])

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "Float",
                "value": 1
            },
            "id": "E",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
=======================================
REGEX(^Kafka message at topic sub\d+$)
Key: REGEX([0-9a-f\-]{24})
Headers:
  Fiware-Servicepath: /
Payload:
{
    "subscriptionId": "REGEX([0-9a-f\-]{24})",
    "data": [
        {
            "id": "E",
            "type": "T",
            "A": {
                "type": "Float",
                "value": 1,
                "metadata": {}
            }
        }
    ]
}
=======================================
REGEX(^Kafka message at topic sub\d+$)
Key: REGEX([0-9a-f\-]{24})
Headers:
  Fiware-Servicepath: /
Payload:
{
    "subscriptionId": "REGEX([0-9a-f\-]{24})",
    "data": [
        {
            "id": "E",
            "type": "T",
            "A": {
                "type": "Float",
                "value": 1,
                "metadata": {}
            }
        }
    ]
}
=======================================


06. Update entity E with A=2
============================
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})



07. GET subscriptions: 3 subs with timesSent 1 and lastSuccess
==============================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 1369

[
    {
        "description": "KAFKA sub on topic sub1",
        "id": "REGEX([0-9a-f\-]{24})",
        "notification": {
            "attrs": [],
            "attrsFormat": "normalized",
            "covered": false,
            "kafka": {
                "topic": "sub1",
                "url": "kafka://localhost:9092,localhost:9094"
            },
            "lastNotification": "REGEX(.*)",
            "lastSuccess": "REGEX(.*)",
            "onlyChangedAttrs": false,
            "timesSent": 2
        },
        "status": "active",
        "subject": {
            "condition": {
                "attrs": [],
                "notifyOnMetadataChange": true
            },
            "entities": [
                {
                    "id": "E",
                    "type": "T"
                }
            ]
        }
    },
    {
        "description": "KAFKA sub on topic sub2",
        "id": "REGEX([0-9a-f\-]{24})",
        "notification": {
            "attrs": [],
            "attrsFormat": "normalized",
            "covered": false,
            "kafka": {
                "topic": "sub2",
                "url": "kafka://localhost:9092,localhost:9094"
            },
            "lastNotification": "REGEX(.*)",
            "lastSuccess": "REGEX(.*)",
            "onlyChangedAttrs": false,
            "timesSent": 2
        },
        "status": "active",
        "subject": {
            "condition": {
                "attrs": [],
                "notifyOnMetadataChange": true
            },
            "entities": [
                {
                    "id": "E",
                    "type": "T"
                }
            ]
        }
    },
    {
        "description": "HTTP sub",
        "id": "REGEX([0-9a-f\-]{24})",
        "notification": {
            "attrs": [],
            "attrsFormat": "normalized",
            "covered": false,
            "http": {
                "url": "http://localhost:9997/notify"
            },
            "lastNotification": "REGEX(.*)",
            "lastSuccess": "REGEX(.*)",
            "lastSuccessCode": 200,
            "onlyChangedAttrs": false,
            "timesSent": 2
        },
        "status": "active",
        "subject": {
            "condition": {
                "attrs": [],
                "notifyOnMetadataChange": true
            },
            "entities": [
                {
                    "id": "E",
                    "type": "T"
                }
            ]
        }
    }
]


08. Dump and reset accumulator, see E A=2 in: 1 KAFKA sub1, 1 KAFKA sub2, 1 HTTP
==============================================================================
POST http://localhost:9997/notify
Fiware-Servicepath: /
Content-Length: 121
User-Agent: orion/4.2.0-next libcurl/7.88.1
Ngsiv2-Attrsformat: normalized
Host: localhost:9997
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}; cbnotif=[13])

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "Float",
                "value": 2
            },
            "id": "E",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
#SORT_START
=======================================
Kafka message at topic sub1
Key: REGEX([0-9a-f\-]{24})
Headers:
  Fiware-Servicepath: /
Payload:
{
    "subscriptionId": "REGEX([0-9a-f\-]{24})",
    "data": [
        {
            "id": "E",
            "type": "T",
            "A": {
                "type": "Float",
                "value": 2,
                "metadata": {}
            }
        }
    ]
}
=======================================
Kafka message at topic sub2
Key: REGEX([0-9a-f\-]{24})
Headers:
  Fiware-Servicepath: /
Payload:
{
    "subscriptionId": "REGEX([0-9a-f\-]{24})",
    "data": [
        {
            "id": "E",
            "type": "T",
            "A": {
                "type": "Float",
                "value": 2,
                "metadata": {}
            }
        }
    ]
}
=======================================
#SORT_END


--TEARDOWN--
accumulatorStop
kafkaDestroyTopics "${KAFKA_BOOTSTRAP_A}" sub1 sub2
brokerStop CB
dbDrop CB
