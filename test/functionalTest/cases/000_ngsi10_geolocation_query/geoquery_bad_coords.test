# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Geo query with invalid coordinates
--SHELL-INIT--
dbInit CB
brokerStart CB
--SHELL--

echo "1: +++++++++ Update/Append +++++++++++"
# Create entities corresponding to the three cities
url=/v1/updateContext
payload='<?xml version="1.0"?>
<updateContextRequest>
  <contextElementList>
    <contextElement>
      <entityId type="City" isPattern="false">
        <id>Long200Lat100</id>
      </entityId>
      <contextAttributeList>
        <contextAttribute>
          <name>location</name>
          <type>coords</type>
          <contextValue>200, 100</contextValue>
          <metadata>
            <contextMetadata>
              <name>location</name>
              <type>string</type>
              <value>WGS84</value>
            </contextMetadata>
          </metadata>
        </contextAttribute>
      </contextAttributeList>
    </contextElement>
  </contextElementList>
  <updateAction>APPEND</updateAction>
</updateContextRequest>'
orionCurl --url "$url" --payload "${payload}"
echo
echo

echo "2: ++++++++++ OK Query ++++++++++"
# query according to issue #461
url=/v1/queryContext
payload='{
  "entities": [
    {
      "type": "Point",
      "isPattern": "true",
      "id": ".*"
    }
  ],
  "restriction": {
    "scopes": [
      {
        "type" : "FIWARE::Location",
        "value" : {
          "polygon": {
            "vertices": [
                          { "latitude" : 2.811371193331,  "longitude" : 130.078061      },
                          { "latitude" : 13.031027211328, "longitude" : 130.078061      },
                          { "latitude" : 13.031027211328, "longitude" : 140.24472766667 },
                          { "latitude" : 2.811371193331,  "longitude" : 140.24472766667 }
            ]
          }
        }
      }
    ]
  }
}'

orionCurl --url "$url" --payload "${payload}" --json
echo
echo

echo "3: ++++++++++ Query with invalid latitude ++++++++++"
url=/v1/queryContext
payload='{
  "entities": [
    {
      "type": "Point",
      "isPattern": "true",
      "id": ".*"
    }
  ],
  "restriction": {
    "scopes": [
      {
        "type" : "FIWARE::Location",
        "value" : {
          "polygon": {
            "vertices": [
                          { "latitude" : 92.811371193331, "longitude" : 130.078061      },
                          { "latitude" : 13.031027211328, "longitude" : 130.078061      },
                          { "latitude" : 13.031027211328, "longitude" : 140.24472766667 },
                          { "latitude" : 2.811371193331,  "longitude" : 140.24472766667 }
            ]
          }
        }
      }
    ]
  }
}'

orionCurl --url "$url" --payload "${payload}" --json
echo
echo


echo "4: ++++++++++ Query with invalid longitude ++++++++++"
url=/v1/queryContext
payload='{
  "entities": [
    {
      "type": "Point",
      "isPattern": "true",
      "id": ".*"
    }
  ],
  "restriction": {
    "scopes": [
      {
        "type" : "FIWARE::Location",
        "value" : {
          "polygon": {
            "vertices": [
                          { "latitude" : 12.811371193331, "longitude" : 130.078061      },
                          { "latitude" : 13.031027211328, "longitude" : 130.078061      },
                          { "latitude" : 13.031027211328, "longitude" : 240.24472766667 },
                          { "latitude" : 2.811371193331,  "longitude" : 140.24472766667 }
            ]
          }
        }
      }
    ]
  }
}'

orionCurl --url "$url" --payload "${payload}" --json
echo
echo


--REGEXPECT--
1: +++++++++ Update/Append +++++++++++
HTTP/1.1 200 OK
Content-Length: 986
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<updateContextResponse>
  <contextResponseList>
    <contextElementResponse>
      <contextElement>
        <entityId type="City" isPattern="false">
          <id>Long200Lat100</id>
        </entityId>
        <contextAttributeList>
          <contextAttribute>
            <name>location</name>
            <type>coords</type>
            <contextValue/>
            <metadata>
              <contextMetadata>
                <name>location</name>
                <type>string</type>
                <value>WGS84</value>
              </contextMetadata>
            </metadata>
          </contextAttribute>
        </contextAttributeList>
      </contextElement>
      <statusCode>
        <code>472</code>
        <reasonPhrase>request parameter is invalid/not allowed</reasonPhrase>
        <details>coordinate format error [see Orion user manual]: 200, 100</details>
      </statusCode>
    </contextElementResponse>
  </contextResponseList>
</updateContextResponse>


2: ++++++++++ OK Query ++++++++++
HTTP/1.1 200 OK
Content-Length: 94
Content-Type: application/json
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404",
        "reasonPhrase": "No context element found"
    }
}


3: ++++++++++ Query with invalid latitude ++++++++++
HTTP/1.1 200 OK
Content-Length: 127
Content-Type: application/json
Date: REGEX(.*)

{
    "errorCode": {
        "code": "400",
        "details": "invalid value for latitude",
        "reasonPhrase": "Bad Request"
    }
}


4: ++++++++++ Query with invalid longitude ++++++++++
HTTP/1.1 200 OK
Content-Length: 128
Content-Type: application/json
Date: REGEX(.*)

{
    "errorCode": {
        "code": "400",
        "details": "invalid value for longitude",
        "reasonPhrase": "Bad Request"
    }
}


--TEARDOWN--
brokerStop CB
