# Copyright 2021 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
supportedFowardingMode forwarding - query

--SHELL-INIT--
dbInit CB
dbInit CP1
brokerStart CB 0
brokerStart CP1 0

--SHELL--

#
# 01. Create E-A=CP1 at CP1
# 02. Register E-A at CP1 with mode query
# 03. Query E-A at CB - get CP1
# 04. Update E-A=viaCB at CB - not found
# 05. Query E-A1 at CP1 - get original value CP1
#

echo "01. Create E-A=CP1 at CP1"
echo "========================="
payload='{
  "id": "E",
  "type": "T",
  "A":{
    "type": "Text",
    "value": "CP1"
  }
}'
orionCurl --url /v2/entities --payload "$payload" --port $CP1_PORT
echo
echo


echo "02. Register E-A at CP1 with mode query"
echo "======================================="
payload='{
   "description": "With supportedForwardingMode query",
   "dataProvided": {
     "entities": [
       {
         "id": "E",
         "type": "T"
       }
     ],
     "attrs": [
       "A"
     ]
   },
   "provider": {
     "http": {
       "url": "http://localhost:'${CP1_PORT}'/v2"
     },
     "supportedForwardingMode": "query"
   }
}'
orionCurl --url /v2/registrations --payload "$payload"
echo
echo


echo "03. Query E-A at CB - get CP1"
echo "============================="
orionCurl --url /v2/entities/E
echo
echo


echo "04. Update E-A=viaCB at CB - not found"
echo "======================================"
payload='{
  "A":{
    "type": "Text",
    "value": "viaCB"
  }
}'
orionCurl --url /v2/entities/E/attrs?type=T --payload "$payload" -X PATCH
echo
echo


echo "05. Query E-A at CP1 - get original value CP1"
echo "============================================="
orionCurl --url /v2/entities/E --port $CP1_PORT
echo
echo


--REGEXPECT--
01. Create E-A=CP1 at CP1
=========================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. Register E-A at CP1 with mode query
=======================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/registrations/REGEX([0-9a-f\-]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. Query E-A at CB - get CP1
=============================
HTTP/1.1 200 OK
Content-Length: 69
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "A": {
        "metadata": {},
        "type": "Text",
        "value": "CP1"
    },
    "id": "E",
    "type": "T"
}


04. Update E-A=viaCB at CB - not found
======================================
HTTP/1.1 404 Not Found
Content-Length: 95
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "The requested entity has not been found. Check type and id",
    "error": "NotFound"
}


05. Query E-A at CP1 - get original value CP1
=============================================
HTTP/1.1 200 OK
Content-Length: 69
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "A": {
        "metadata": {},
        "type": "Text",
        "value": "CP1"
    },
    "id": "E",
    "type": "T"
}


--TEARDOWN--
brokerStop CP1
brokerStop CB
dbDrop CB
dbDrop CP1
