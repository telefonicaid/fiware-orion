# Copyright 2021 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Attribute update operator: push

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print

--SHELL--

#
# 01. Create entity E with A=[1] and B=[{x:1}]
# 02. Create sub for entity E
# 03. Update A with $push: 2
# 04. Update A with $push: foo
# 05. Update B with $push: {y:2}
# 06. Update B with $push: [z]
# 07. Update A with $push: foo (duplicated)
# 08. Get entity, see E-A=[1,2,foo,foo] and E-B=[{x:1},{y:2},[z]]
# 09. Dump accumulator, see the sequence of 5 notifications
#


echo '01. Create entity E with A=[1] and B=[{x:1}]'
echo '============================================'
payload='{
  "id": "E",
  "type": "T",
  "A": {
    "value": [ 1 ],
    "type": "StructuredValue"
  },
  "B": {
    "value": [ {"x": 1} ],
    "type": "StructuredValue"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo '02. Create sub for entity E'
echo '==========================='
payload='{
  "subject": {
    "entities": [
      {
        "id": "E",
        "type": "T"
      }
    ]
   },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo '03. Update A with $push: 2'
echo '=========================='
payload='{
  "A": {
    "value": { "$push": 2 },
    "type": "StructuredValue"
  }
}'
orionCurl --url /v2/entities/E/attrs --payload "$payload"
echo
echo


echo '04. Update A with $push: foo'
echo '============================'
payload='{
  "A": {
    "value": { "$push": "foo" },
    "type": "StructuredValue"
  }
}'
orionCurl --url /v2/entities/E/attrs --payload "$payload"
echo
echo


echo '05. Update B with $push: {y:2}'
echo '=============================='
payload='{
  "B": {
    "value": { "$push": {"y": 2} },
    "type": "StructuredValue"
  }
}'
orionCurl --url /v2/entities/E/attrs --payload "$payload"
echo
echo


echo '06. Update B with $push: [z]'
echo '============================'
payload='{
  "B": {
    "value": { "$push": [ "z" ] },
    "type": "StructuredValue"
  }
}'
orionCurl --url /v2/entities/E/attrs --payload "$payload"
echo
echo


echo '07. Update A with $push: foo (duplicated)'
echo '========================================='
payload='{
  "A": {
    "value": { "$push": "foo" },
    "type": "StructuredValue"
  }
}'
orionCurl --url /v2/entities/E/attrs --payload "$payload"
echo
echo


echo '08. Get entity, see E-A=[1,2,foo,foo] and E-B=[{x:1},{y:2},[z]]'
echo '==============================================================='
orionCurl --url /v2/entities/E
echo
echo


echo '09. Dump accumulator, see the sequence of 5 notifications'
echo '========================================================='
accumulatorDump
echo
echo


--REGEXPECT--
01. Create entity E with A=[1] and B=[{x:1}]
============================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. Create sub for entity E
===========================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f\-]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. Update A with $push: 2
==========================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



04. Update A with $push: foo
============================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



05. Update B with $push: {y:2}
==============================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



06. Update B with $push: [z]
============================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



07. Update A with $push: foo (duplicated)
=========================================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



08. Get entity, see E-A=[1,2,foo,foo] and E-B=[{x:1},{y:2},[z]]
===============================================================
HTTP/1.1 200 OK
Content-Length: 169
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "A": {
        "metadata": {},
        "type": "StructuredValue",
        "value": [
            1,
            2,
            "foo",
            "foo"
        ]
    },
    "B": {
        "metadata": {},
        "type": "StructuredValue",
        "value": [
            {
                "x": 1
            },
            {
                "y": 2
            },
            [
                "z"
            ]
        ]
    },
    "id": "E",
    "type": "T"
}


09. Dump accumulator, see the sequence of 5 notifications
=========================================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 198
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    1,
                    2
                ]
            },
            "B": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    {
                        "x": 1
                    }
                ]
            },
            "id": "E",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 204
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    1,
                    2,
                    "foo"
                ]
            },
            "B": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    {
                        "x": 1
                    }
                ]
            },
            "id": "E",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 212
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    1,
                    2,
                    "foo"
                ]
            },
            "B": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    {
                        "x": 1
                    },
                    {
                        "y": 2
                    }
                ]
            },
            "id": "E",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 218
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    1,
                    2,
                    "foo"
                ]
            },
            "B": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    {
                        "x": 1
                    },
                    {
                        "y": 2
                    },
                    [
                        "z"
                    ]
                ]
            },
            "id": "E",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 224
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    1,
                    2,
                    "foo",
                    "foo"
                ]
            },
            "B": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    {
                        "x": 1
                    },
                    {
                        "y": 2
                    },
                    [
                        "z"
                    ]
                ]
            },
            "id": "E",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
=======================================


--TEARDOWN--
brokerStop CB
accumulatorStop $LISTENER_PORT
dbDrop CB
