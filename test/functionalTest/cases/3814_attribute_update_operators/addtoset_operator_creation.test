# Copyright 2023 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Attribute update operator: addToSet (create entity variant)

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print

--SHELL--

#
# 01. Create sub for entity E.*
# 02. Create E1-A with $addToSet: 1
# 03. Create E2-A with $addToSet: foo
# 04. Create E3-B with $addToSet: {x:1}
# 05. Create E4-B with $addToSet: [z]
# 06. Create E5-A with $addToSet: bar and attribute C at the same time
# 07. Get entities, see E1-A=[1], E2-A=[foo], E3-B=[{x:1}], E4-B=[z]], E5-A=[bar],C=3
# 08. Dump accumulator, see the sequence of 5 notifications
#


echo '01. Create sub for entity E.*'
echo '============================='
payload='{
  "subject": {
    "entities": [
      {
        "idPattern": "E.*",
        "type": "T"
      }
    ]
   },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo '02. Create E1-A with $addToSet: 1'
echo '================================='
payload='{
  "id": "E1",
  "type": "T",
  "A": {
    "value": { "$addToSet": 1 },
    "type": "StructuredValue"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo '03. Create E2-A with $addToSet: foo'
echo '==================================='
payload='{
  "id": "E2",
  "type": "T",
  "A": {
    "value": { "$addToSet": "foo" },
    "type": "StructuredValue"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo '04. Create E3-B with $addToSet: {x:1}'
echo '====================================='
payload='{
  "id": "E3",
  "type": "T",
  "B": {
    "value": { "$addToSet": {"x": 1} },
    "type": "StructuredValue"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo '05. Create E4-B with $addToSet: [z]'
echo '==================================='
payload='{
  "id": "E4",
  "type": "T",
  "B": {
    "value": { "$addToSet": [ "z" ] },
    "type": "StructuredValue"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo '06. Create E5-A with $addToSet: bar and new attribute C at the same time'
echo '========================================================================'
payload='{
  "id": "E5",
  "type": "T",
  "A": {
    "value": { "$addToSet": "bar" },
    "type": "StructuredValue"
  },
  "C": {
    "value": 3,
    "type": "Number"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo '07. Get entities, see E1-A=[1], E2-A=[foo], E3-B=[{x:1}], E4-B=[z]], E5-A=[bar],C=3'
echo '==================================================================================='
orionCurl --url /v2/entities
echo
echo


echo '08. Dump accumulator, see the sequence of 5 notifications'
echo '========================================================='
accumulatorDump
echo
echo


--REGEXPECT--
01. Create sub for entity E.*
=============================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f\-]{24})
Content-Length: 0



02. Create E1-A with $addToSet: 1
=================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E1?type=T
Content-Length: 0



03. Create E2-A with $addToSet: foo
===================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E2?type=T
Content-Length: 0



04. Create E3-B with $addToSet: {x:1}
=====================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E3?type=T
Content-Length: 0



05. Create E4-B with $addToSet: [z]
===================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E4?type=T
Content-Length: 0



06. Create E5-A with $addToSet: bar and new attribute C at the same time
========================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E5?type=T
Content-Length: 0



07. Get entities, see E1-A=[1], E2-A=[foo], E3-B=[{x:1}], E4-B=[z]], E5-A=[bar],C=3
===================================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 469

[
    {
        "A": {
            "metadata": {},
            "type": "StructuredValue",
            "value": [
                1
            ]
        },
        "id": "E1",
        "type": "T"
    },
    {
        "A": {
            "metadata": {},
            "type": "StructuredValue",
            "value": [
                "foo"
            ]
        },
        "id": "E2",
        "type": "T"
    },
    {
        "B": {
            "metadata": {},
            "type": "StructuredValue",
            "value": [
                [
                    {
                        "x": 1
                    }
                ]
            ]
        },
        "id": "E3",
        "type": "T"
    },
    {
        "B": {
            "metadata": {},
            "type": "StructuredValue",
            "value": [
                [
                    [
                        "z"
                    ]
                ]
            ]
        },
        "id": "E4",
        "type": "T"
    },
    {
        "A": {
            "metadata": {},
            "type": "StructuredValue",
            "value": [
                "bar"
            ]
        },
        "C": {
            "metadata": {},
            "type": "Number",
            "value": 3
        },
        "id": "E5",
        "type": "T"
    }
]


08. Dump accumulator, see the sequence of 5 notifications
=========================================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 134
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    1
                ]
            },
            "id": "E1",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 138
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    "foo"
                ]
            },
            "id": "E2",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 140
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "B": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    {
                        "x": 1
                    }
                ]
            },
            "id": "E3",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 138
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "B": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    [
                        "z"
                    ]
                ]
            },
            "id": "E4",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 184
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "StructuredValue",
                "value": [
                    "bar"
                ]
            },
            "C": {
                "metadata": {},
                "type": "Number",
                "value": 3
            },
            "id": "E5",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f\-]{24})"
}
=======================================


--TEARDOWN--
brokerStop CB
accumulatorStop $LISTENER_PORT
dbDrop CB
