# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Subscription availability sequence

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print

--SHELL--

url=/v1/registry/registerContext
payload='{
  "contextRegistrations": [
    {
      "entities": [
        {
          "type": "Room",
          "isPattern": "false",
          "id": "ConferenceRoom"
        }
      ],
      "attributes": [
        {
          "name": "temperature",
          "type": "degree",
          "isDomain": "false"
        }
      ],
      "providingApplication": "http://sensor1:1028"
    }
  ],
  "duration": "PT1H"
}'
orionCurl --url "$url" --payload "$payload"
echo

echo "1: ++++++++++++++++++++"
url="/v1/registry/subscribeContextAvailability"
payload='{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "ConferenceRoom"
    },
    {
      "type": "Room",
      "isPattern": "false",
      "id": "BathRoom"
    }
  ],
  "attributes": [
    "temperature",
    "occupancy",
    "lightstatus"
  ],
  "reference": "http://127.0.0.1:'${LISTENER_PORT}'/notify",
  "duration": "PT5H"
}'
orionCurl --url "$url" --payload "${payload}"
SUB_ID=$(echo "$_response" | grep subscriptionId | awk -F\" '{ print $4}')
echo

echo 'Notification count from mongo:'
mongoCmd ${CB_DB_NAME} "db.casubs.findOne({_id: ObjectId(\"$SUB_ID\")}, {_id: 0, count: 1})"
echo

echo "2: ++++++++++++++++++++"
url=/v1/registry/registerContext
payload='{
  "contextRegistrations": [
    {
      "entities": [
        {
          "type": "Room",
          "isPattern": "false",
          "id": "BathRoom"
        }
      ],
      "attributes": [
        {
          "name": "temperature",
          "type": "degree",
          "isDomain": "false"
        }
      ],
      "providingApplication": "http://sensor2:1028"
    }
  ],
  "duration": "PT1H"
}'
orionCurl --url "$url" --payload "$payload"
echo

echo Notification count from mongo:
mongoCmd ${CB_DB_NAME} "db.casubs.findOne({_id: ObjectId(\"$SUB_ID\")}, {_id: 0, count: 1})"
echo

echo "3: ++++++++++++++++++++"
url=/v1/registry/registerContext
payload='{
  "contextRegistrations": [
    {
      "entities": [
        {
          "type": "Room",
          "isPattern": "false",
          "id": "OfficeRoom"
        }
      ],
      "attributes": [
        {
          "name": "temperature",
          "type": "degree",
          "isDomain": "false"
        }
      ],
      "providingApplication": "http://sensor3:1028"
    }
  ],
  "duration": "PT1H"
}'
orionCurl --url "$url" --payload "$payload"
echo

echo "4: ++++++++++++++++++++"
url=/v1/registry/updateContextAvailabilitySubscription
payload='{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "ConferenceRoom"
    },
    {
      "type": "Room",
      "isPattern": "false",
      "id": "LivingRoom"
    }
  ],
  "attributes": [
    "temperature",
    "occupancy",
    "lightstatus"
  ],
  "duration": "PT5H",
  "subscriptionId" : "'$SUB_ID'"
}'
orionCurl --url "$url" --payload "$payload"
echo
echo Notification count from mongo:
mongoCmd ${CB_DB_NAME} "db.casubs.findOne({_id: ObjectId(\"$SUB_ID\")}, {_id: 0, count: 1})"
echo


echo "5: ++++++++++++++++++++"
url=/v1/registry/registerContext
payload='{
  "contextRegistrations": [
    {
      "entities": [
        {
          "type": "Room",
          "isPattern": "false",
          "id": "BathRoom"
        }
      ],
      "attributes": [
        {
          "name": "temperature",
          "type": "degree",
          "isDomain": "false"
        }
      ],
      "providingApplication": "http://sensor4:1028"
    }
  ],
  "duration": "PT1H"
}'
orionCurl --url "$url" --payload "$payload"
echo


echo "6: ++++++++++++++++++++"
url=/v1/registry/registerContext
payload='{
  "contextRegistrations": [
    {
      "entities": [
        {
          "type": "Room",
          "isPattern": "false",
          "id": "LivingRoom"
        }
      ],
      "attributes": [
        {
          "name": "temperature",
          "type": "degree",
          "isDomain": "false"
        }
      ],
      "providingApplication": "http://sensor5:1028"
    }
  ],
  "duration": "PT1H"
}'
orionCurl --url "$url" --payload "$payload"
echo

echo Notification count from mongo:
mongoCmd ${CB_DB_NAME} "db.casubs.findOne({_id: ObjectId(\"$SUB_ID\")}, {_id: 0, count: 1})"
echo

echo "7: ++++++++++++++++++++"
url=/v1/registry/unsubscribeContextAvailability
payload='{
  "subscriptionId": "'$SUB_ID'"
}'
orionCurl --url "$url" --payload "$payload"
echo

echo "8: ++++++++++++++++++++"
url=/v1/registry/unsubscribeContextAvailability
payload='{
  "subscriptionId": "'$SUB_ID'"
}'
orionCurl --url "$url" --payload "$payload"
echo

echo "9: ++++++++++++++++++++"
url=/v1/registry/registerContext
payload='{
  "contextRegistrations": [
    {
      "entities": [
        {
          "type": "Room",
          "isPattern": "false",
          "id": "LivingRoom"
        }
      ],
      "attributes": [
        {
          "name": "temperature",
          "type": "degree",
          "isDomain": "false"
        }
      ],
      "providingApplication": "http://sensor6:1028"
    }
  ],
  "duration": "PT1H"
}'
orionCurl --url "$url" --payload "$payload"
echo
echo Accumulated data:
accumulatorDump
echo

--REGEXPECT--
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT1H",
    "registrationId": "REGEX([0-9a-f]{24})"
}

1: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT5H",
    "subscriptionId": "REGEX([0-9a-f]{24})"
}

Notification count from mongo:
{ "count" : 1 }

2: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT1H",
    "registrationId": "REGEX([0-9a-f]{24})"
}

Notification count from mongo:
{ "count" : 2 }

3: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT1H",
    "registrationId": "REGEX([0-9a-f]{24})"
}

4: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT5H",
    "subscriptionId": "REGEX([0-9a-f]{24})"
}

Notification count from mongo:
{ "count" : 3 }

5: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT1H",
    "registrationId": "REGEX([0-9a-f]{24})"
}

6: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT1H",
    "registrationId": "REGEX([0-9a-f]{24})"
}

Notification count from mongo:
{ "count" : 4 }

7: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 93
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    },
    "subscriptionId": "REGEX([0-9a-f]{24})"
}

8: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 115
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404",
        "reasonPhrase": "No context element found"
    },
    "subscriptionId": "REGEX([0-9a-f]{24})"
}

9: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT1H",
    "registrationId": "REGEX([0-9a-f]{24})"
}

Accumulated data:
POST http://127.0.0.1:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 293
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: 127.0.0.1:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36})

{
    "contextRegistrationResponses": [
        {
            "contextRegistration": {
                "attributes": [
                    {
                        "isDomain": "false",
                        "name": "temperature",
                        "type": "degree"
                    }
                ],
                "entities": [
                    {
                        "id": "ConferenceRoom",
                        "isPattern": "false",
                        "type": "Room"
                    }
                ],
                "providingApplication": "http://sensor1:1028"
            }
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================
POST http://127.0.0.1:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 287
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: 127.0.0.1:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36})

{
    "contextRegistrationResponses": [
        {
            "contextRegistration": {
                "attributes": [
                    {
                        "isDomain": "false",
                        "name": "temperature",
                        "type": "degree"
                    }
                ],
                "entities": [
                    {
                        "id": "BathRoom",
                        "isPattern": "false",
                        "type": "Room"
                    }
                ],
                "providingApplication": "http://sensor2:1028"
            }
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================
POST http://127.0.0.1:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 293
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: 127.0.0.1:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36})

{
    "contextRegistrationResponses": [
        {
            "contextRegistration": {
                "attributes": [
                    {
                        "isDomain": "false",
                        "name": "temperature",
                        "type": "degree"
                    }
                ],
                "entities": [
                    {
                        "id": "ConferenceRoom",
                        "isPattern": "false",
                        "type": "Room"
                    }
                ],
                "providingApplication": "http://sensor1:1028"
            }
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================
POST http://127.0.0.1:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 289
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: 127.0.0.1:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36})

{
    "contextRegistrationResponses": [
        {
            "contextRegistration": {
                "attributes": [
                    {
                        "isDomain": "false",
                        "name": "temperature",
                        "type": "degree"
                    }
                ],
                "entities": [
                    {
                        "id": "LivingRoom",
                        "isPattern": "false",
                        "type": "Room"
                    }
                ],
                "providingApplication": "http://sensor5:1028"
            }
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================

--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
