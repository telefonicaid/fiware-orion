# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Subscription availability expiration check

--SHELL-INIT--
dbInit CB
brokerStart CB 0-255
accumulatorStart --pretty-print

--SHELL--

#
# 01. Create a subscription on ngsi9 registrations
# 02. Register a context immediatelly after the subscription: notification is generated
# 03. Do a register context after subscription expiration: notification is not generated
# 04. Dump accumulater - see ONE notification
#

echo "01. Create a subscription on ngsi9 registrations"
echo "================================================"
payload1='{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "ConferenceRoom"
    },
    {
      "type": "Room",
      "isPattern": "false",
      "id": "BathRoom"
    }
  ],
  "attributes": [
    "temperature"
  ],
  "reference": "http://127.0.0.1:'${LISTENER_PORT}'/notify",
  "duration": "PT5S"
}'
orionCurl --url /v1/registry/subscribeContextAvailability --payload "${payload1}"
echo
echo


echo "02. Register a context immediatelly after the subscription: notification is generated"
echo "====================================================================================="
payload2='{
  "contextRegistrations": [
    {
      "entities": [
        {
          "type": "Room",
          "isPattern": "false",
          "id": "ConferenceRoom"
        }
      ],
      "attributes": [
        {
          "name": "temperature",
          "type": "degree"
        }
      ],
      "providingApplication": "http://localhost:1028"
    }
  ],
  "duration": "PT1H"
}'
orionCurl --url /v1/registry/registerContext --payload "${payload2}"
echo
echo


echo "03. Do a register context after subscription expiration: notification is not generated"
echo "======================================================================================"
sleep 6s
payload3='{
  "contextRegistrations": [
    {
      "entities": [
        {
          "type": "Room",
          "isPattern": "false",
          "id": "BathRoom"
        }
      ],
      "attributes": [
        {
          "name": "temperature",
          "type": "degree"
        }
      ],
      "providingApplication": "http://localhost:1028"
    }
  ],
  "duration": "PT1H"
}'
orionCurl --url /v1/registry/registerContext --payload "${payload3}"
echo
echo


echo "04. Dump accumulater - see ONE notification"
echo "==========================================="
accumulatorDump
echo
echo


--REGEXPECT--
01. Create a subscription on ngsi9 registrations
================================================
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT5S",
    "subscriptionId": "REGEX([0-9a-f]{24})"
}


02. Register a context immediatelly after the subscription: notification is generated
=====================================================================================
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT1H",
    "registrationId": "REGEX([0-9a-f]{24})"
}


03. Do a register context after subscription expiration: notification is not generated
======================================================================================
HTTP/1.1 200 OK
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "PT1H",
    "registrationId": "REGEX([0-9a-f]{24})"
}


04. Dump accumulater - see ONE notification
===========================================
POST http://127.0.0.1:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 276
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: 127.0.0.1:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36})

{
    "contextRegistrationResponses": [
        {
            "contextRegistration": {
                "attributes": [
                    {
                        "name": "temperature",
                        "type": "degree"
                    }
                ],
                "entities": [
                    {
                        "id": "ConferenceRoom",
                        "isPattern": "false",
                        "type": "Room"
                    }
                ],
                "providingApplication": "http://localhost:1028"
            }
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================


--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
