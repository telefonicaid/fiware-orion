# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Service path context types same type in different levels (asking for specific type)

--SHELL-INIT--
dbInit CB
brokerStart CB 0-255

--SHELL--

# 01. Set up entities
#
# /:     E-T   with attributes [a, b]
# /A:    EA-T  with attributes [b, c]
# /A/A1: EA1-T with attributes [c, d]
# /A/A2: EA2-T with attributes [c, e]

# 02. Query type T on / (returns: T - [a, b])
# 03. Query type T on /# (returns: T - [a, b, c, d, e])
# 04. Query type T on /A (returns: T - [b, c])
# 05. Query type T on /A/# (returns: T - [b, c, d, e])
# 06. Query type T on /A/A1 (returns: T- [c, d])
# 07. Query type T on /A/A1/# (returns: T - [c, d])

echo "01. Set up entities"
echo "==================="
payload='{
  "attributes" : [
    {
      "name" : "a",
      "type" : "string",
      "value" : "V"
    },
    {
      "name" : "b",
      "type" : "string",
      "value" : "V"
    }
  ]
}'
orionCurl --servicePath / --url /v1/contextEntities/type/T/id/E --payload "${payload}"
echo
echo

payload='{
  "attributes" : [
    {
      "name" : "b",
      "type" : "string",
      "value" : "V"
    },
    {
      "name" : "c",
      "type" : "string",
      "value" : "V"
    }
  ]
}'
orionCurl --servicePath /A --url /v1/contextEntities/type/T/id/EA --payload "${payload}"
echo
echo

payload='{
  "attributes" : [
    {
      "name" : "c",
      "type" : "string",
      "value" : "V"
    },
    {
      "name" : "d",
      "type" : "string",
      "value" : "V"
    }
  ]
}'
orionCurl --servicePath /A/A1 --url /v1/contextEntities/type/T/id/EA1 --payload "${payload}"
echo
echo

payload='{
  "attributes" : [
    {
      "name" : "c",
      "type" : "string",
      "value" : "V"
    },
    {
      "name" : "e",
      "type" : "string",
      "value" : "V"
    }
  ]
}'
orionCurl --servicePath /A/A2 --url /v1/contextEntities/type/T/id/EA2 --payload "${payload}"
echo
echo

echo "02. Query type T on / (returns: T - [a, b])"
echo "==========================================="
orionCurl --servicePath / --url /v1/contextTypes/T
echo
echo

echo "03. Query type T on /# (returns: T - [a, b, c, d, e])"
echo "====================================================="
orionCurl --servicePath '/#' --url /v1/contextTypes/T
echo
echo

echo "04. Query type T on /A (returns: T - [b, c])"
echo "============================================"
orionCurl --servicePath /A --url /v1/contextTypes/T
echo
echo

echo "05. Query type T on /A/# (returns: T - [b, c, d, e])"
echo "===================================================="
orionCurl --servicePath '/A/#' --url /v1/contextTypes/T
echo
echo

echo "06. Query type T on /A/A1 (returns: T- [c, d])"
echo "=============================================="
orionCurl --servicePath /A/A1 --url /v1/contextTypes/T
echo
echo

echo "07. Query type T on /A/A1/# (returns: T - [c, d])"
echo "================================================="
orionCurl --servicePath '/A/A1/#' --url /v1/contextTypes/T
echo
echo

--REGEXPECT--
01. Set up entities
===================
HTTP/1.1 200 OK
Content-Length: 207
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "a",
                    "type": "string",
                    "value": ""
                },
                {
                    "name": "b",
                    "type": "string",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "E",
    "isPattern": "false",
    "type": "T"
}


HTTP/1.1 200 OK
Content-Length: 208
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "b",
                    "type": "string",
                    "value": ""
                },
                {
                    "name": "c",
                    "type": "string",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "EA",
    "isPattern": "false",
    "type": "T"
}


HTTP/1.1 200 OK
Content-Length: 209
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "c",
                    "type": "string",
                    "value": ""
                },
                {
                    "name": "d",
                    "type": "string",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "EA1",
    "isPattern": "false",
    "type": "T"
}


HTTP/1.1 200 OK
Content-Length: 209
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "c",
                    "type": "string",
                    "value": ""
                },
                {
                    "name": "e",
                    "type": "string",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "EA2",
    "isPattern": "false",
    "type": "T"
}


02. Query type T on / (returns: T - [a, b])
===========================================
HTTP/1.1 200 OK
Content-Length: 83
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        "a",
        "b"
    ],
    "name": "T",
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


03. Query type T on /# (returns: T - [a, b, c, d, e])
=====================================================
HTTP/1.1 200 OK
Content-Length: 95
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        "a",
        "b",
        "c",
        "d",
        "e"
    ],
    "name": "T",
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


04. Query type T on /A (returns: T - [b, c])
============================================
HTTP/1.1 200 OK
Content-Length: 83
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        "b",
        "c"
    ],
    "name": "T",
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


05. Query type T on /A/# (returns: T - [b, c, d, e])
====================================================
HTTP/1.1 200 OK
Content-Length: 91
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        "b",
        "c",
        "d",
        "e"
    ],
    "name": "T",
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


06. Query type T on /A/A1 (returns: T- [c, d])
==============================================
HTTP/1.1 200 OK
Content-Length: 83
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        "c",
        "d"
    ],
    "name": "T",
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


07. Query type T on /A/A1/# (returns: T - [c, d])
=================================================
HTTP/1.1 200 OK
Content-Length: 83
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        "c",
        "d"
    ],
    "name": "T",
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
