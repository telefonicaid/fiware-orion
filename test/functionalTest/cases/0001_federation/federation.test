# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es


--NAME--
Federation

--SHELL-INIT--
dbInit CP1
dbInit CP2
dbInit CP3
brokerStart CP1 0
brokerStart CP2 0
brokerStart CP3 0

--SHELL--

#
# 01. Make CP2 subscribe to entity Room/Room1 in CP1
# 02. Make CP3 subscribe to entity Room/Room1 in CP2
# 03. Create an entity Room/Room1, attribute temperature in CP1 (CP2 should get informed and after that CP3 also)
# 04. Query CP3 for entity Room/Room1, to make sure the entity has propagated CP1->CP2->CP3
#

echo "01. Make CP2 subscribe to entity Room/Room1 in CP1"
echo "=================================================="
payload='{
    "entities": [
        {
            "type": "Room",
            "isPattern": "false",
            "id": "Room1"
        }
    ],
    "reference": "http://localhost:'$CP2_PORT'/v1/notifyContext",
    "duration": "P1M",
    "notifyConditions": [
        {
            "type": "ONCHANGE",
            "condValues": [
                "temperature"
            ]
        }
    ],
    "throttling": "PT5S"

}'
orionCurl --url /v1/subscribeContext --payload "$payload" --port $CP1_PORT
echo
echo

echo "02. Make CP3 subscribe to entity Room/Room1 in CP2"
echo "=================================================="
payload='{
    "entities": [
        {
            "type": "Room",
            "isPattern": "false",
            "id": "Room1"
        }
    ],
    "reference": "http://localhost:'$CP3_PORT'/v1/notifyContext",
    "duration": "P1M",
    "notifyConditions": [
        {
            "type": "ONCHANGE",
            "condValues": [
                "temperature"
            ]
        }
    ],
    "throttling": "PT5S"
}'
orionCurl --url /v1/subscribeContext --payload "$payload" --port $CP2_PORT
echo
echo

echo "03. Create an entity Room/Room1, attribute temperature in CP1 (CP2 should get informed and after that CP3 also)"
echo "==============================================================================================================="
payload='{
    "contextElements": [
        {
            "type": "Room",
            "isPattern": "false",
            "id": "Room1",
            "attributes": [
                {
                    "name": "temperature",
                    "type": "float",
                    "value": "23"
                }
            ]
        }
    ],
    "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --port $CP1_PORT
echo


echo "04. Query CP3 for entity Room/Room1, to make sure the entity has propagated CP1->CP2->CP3"
echo "========================================================================================="
url="/v1/queryContext"
payload='{
    "entities": [
        {
            "type": "Room",
            "isPattern": "false",
            "id": "Room1"
        }
    ]
}'
orionCurl --url /v1/queryContext --payload "$payload" --port $CP2_PORT
echo

--REGEXPECT--
01. Make CP2 subscribe to entity Room/Room1 in CP1
==================================================
HTTP/1.1 200 OK
Content-Length: 104
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "subscribeResponse": {
        "duration": "P1M",
        "subscriptionId": "REGEX([0-9a-f]{24})",
        "throttling": "PT5S"
    }
}


02. Make CP3 subscribe to entity Room/Room1 in CP2
==================================================
HTTP/1.1 200 OK
Content-Length: 104
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "subscribeResponse": {
        "duration": "P1M",
        "subscriptionId": "REGEX([0-9a-f]{24})",
        "throttling": "PT5S"
    }
}


03. Create an entity Room/Room1, attribute temperature in CP1 (CP2 should get informed and after that CP3 also)
===============================================================================================================
HTTP/1.1 200 OK
Content-Length: 202
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "temperature",
                        "type": "float",
                        "value": ""
                    }
                ],
                "id": "Room1",
                "isPattern": "false",
                "type": "Room"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}

04. Query CP3 for entity Room/Room1, to make sure the entity has propagated CP1->CP2->CP3
=========================================================================================
HTTP/1.1 200 OK
Content-Length: 204
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "temperature",
                        "type": "float",
                        "value": "23"
                    }
                ],
                "id": "Room1",
                "isPattern": "false",
                "type": "Room"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}

--TEARDOWN--
brokerStop CP1
brokerStop CP2
brokerStop CP3
dbDrop CP1
dbDrop CP2
dbDrop CP3

