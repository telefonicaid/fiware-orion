# Copyright 2021 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
failsCounter keeps after cache refresh cycles

--SHELL-INIT--
dbInit CB
brokerStart CB 0 IPv4 -subCacheIval 3

--SHELL--

#
# 01. POST /v2/subscriptions, to create subscription
# 02. Upsert entity twice to trigger notification and reach failsCounter=2
# 03. GET /v2/subscriptions/subId, and see failsCounter=2
# 04. Wait a cache cycle, and GET /v2/subscriptions/subId, and see failsCounter=2
# 05. Wait another cache cycle, and GET /v2/subscriptions/subId, and see failsCounter=2
#


echo "01. POST /v2/subscriptions, to create subscription"
echo "=================================================="
payload='{
  "subject": {
    "entities": [
      {
        "id": "E",
        "type": "T"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
subId=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")
echo
echo


echo "02. Upsert entity twice to trigger notification and reach failsCounter=2"
echo "========================================================================"
payload='{
  "id": "E",
  "type": "T",
  "A": {
    "value": 1,
    "type": "Number"
  }
}'
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "$payload"
echo
echo
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "$payload"
echo
echo


echo "03. GET /v2/subscriptions/subId, and see failsCounter=2"
echo "======================================================="
orionCurl --url /v2/subscriptions/${subId}
echo
echo


echo "04. Wait a cache cycle, and GET /v2/subscriptions/subId, and see failsCounter=2"
echo "==============================================================================="
sleep 3.5s
orionCurl --url /v2/subscriptions/${subId}
echo
echo


echo "05. Wait another cache cycle, and GET /v2/subscriptions/subId, and see failsCounter=2"
echo "======================================================================================"
sleep 3.5s
orionCurl --url /v2/subscriptions/${subId}
echo
echo


--REGEXPECT--
01. POST /v2/subscriptions, to create subscription
==================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. Upsert entity twice to trigger notification and reach failsCounter=2
========================================================================
HTTP/1.1 204 No Content
Location: /v2/entities/E?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



HTTP/1.1 204 No Content
Location: /v2/entities/E?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. GET /v2/subscriptions/subId, and see failsCounter=2
=======================================================
HTTP/1.1 200 OK
Content-Length: 432
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [],
        "attrsFormat": "normalized",
        "covered": false,
        "failsCounter": 2,
        "http": {
            "url": "http://localhost:REGEX(\d+)/notify"
        },
        "lastFailure": "REGEX(.*)",
        "lastFailureReason": "Couldn't connect to server",
        "lastNotification": "REGEX(.*)",
        "onlyChangedAttrs": false,
        "timesSent": 2
    },
    "status": "active",
    "subject": {
        "condition": {
            "attrs": []
        },
        "entities": [
            {
                "id": "E",
                "type": "T"
            }
        ]
    }
}


04. Wait a cache cycle, and GET /v2/subscriptions/subId, and see failsCounter=2
===============================================================================
HTTP/1.1 200 OK
Content-Length: 432
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [],
        "attrsFormat": "normalized",
        "covered": false,
        "failsCounter": 2,
        "http": {
            "url": "http://localhost:REGEX(\d+)/notify"
        },
        "lastFailure": "REGEX(.*)",
        "lastFailureReason": "Couldn't connect to server",
        "lastNotification": "REGEX(.*)",
        "onlyChangedAttrs": false,
        "timesSent": 2
    },
    "status": "active",
    "subject": {
        "condition": {
            "attrs": []
        },
        "entities": [
            {
                "id": "E",
                "type": "T"
            }
        ]
    }
}


05. Wait another cache cycle, and GET /v2/subscriptions/subId, and see failsCounter=2
======================================================================================
HTTP/1.1 200 OK
Content-Length: 432
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [],
        "attrsFormat": "normalized",
        "covered": false,
        "failsCounter": 2,
        "http": {
            "url": "http://localhost:REGEX(\d+)/notify"
        },
        "lastFailure": "REGEX(.*)",
        "lastFailureReason": "Couldn't connect to server",
        "lastNotification": "REGEX(.*)",
        "onlyChangedAttrs": false,
        "timesSent": 2
    },
    "status": "active",
    "subject": {
        "condition": {
            "attrs": []
        },
        "entities": [
            {
                "id": "E",
                "type": "T"
            }
        ]
    }
}


--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
