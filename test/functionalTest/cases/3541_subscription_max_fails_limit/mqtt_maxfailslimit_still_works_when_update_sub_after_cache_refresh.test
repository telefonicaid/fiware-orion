# Copyright 2023 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
maxFailsLimit still works when update subscription is done just after cache refresh (MQTT case)

--SHELL-INIT--
dbInit CB
brokerStart CB 212 IPv4 -subCacheIval 5

--SHELL--

#
# 01. POST /v2/subscriptions, to create subscription with maxFailsLimit=3 to failing endpoint
# 02. Trigger 4 notifications
# 03. GET /v2/subscriptions/subscription_id, to check the status=inactive, timesSent=4, failsCounter=4, maxFailsLimit=3
# 04. PATCH /v2/subscriptions/subscription_id, to re-enable subscription
# 05. Trigger 1 notification
# 06. GET /v2/subscriptions/subscription_id, to check the status=inactive, timesSent=5, failsCounter=5, maxFailsLimit=3
# 07. GET /v2/subscriptions/subscription_id, to check the status=inactive, timesSent=5, failsCounter=5, maxFailsLimit=3 (after cache pass)
# 08. PATCH /v2/subscriptions/subscription_id, to re-enable subscription
# 09. Trigger 2 notifications
# 10. GET /v2/subscriptions/subscription_id, to check the status=inactive, timesSent=6, failsCounter=6, maxFailsLimit=3
#


echo '01. POST /v2/subscriptions, to create subscription with maxFailsLimit=3 to failing endpoint'
echo '==========================================================================================='
payload='{
  "subject": {
    "entities": [
      {
        "idPattern": ".*",
        "type": "Room"
      }
    ]
  },
  "notification": {
    "mqtt": {
      "url": "mqtt://localhost:'${MQTT_DEBUG_PORT}'",
      "topic": "test"
    },
    "maxFailsLimit": 3
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
subId=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")
echo
echo


echo '02. Trigger 4 notifications'
echo '==========================='
payload='{
  "id": "Room1",
  "type": "Room",
  "temperature": {
    "value": 23,
    "type": "Float"
  }
}'
# We leave some time between updates to leave some time to connection to fail so CB can process the fail correctly
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "$payload" > /dev/null
sleep 0.25s
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "$payload" > /dev/null
sleep 0.25s
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "$payload" > /dev/null
sleep 0.25s
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "$payload" > /dev/null
sleep 0.25s
echo
echo


echo '03. GET /v2/subscriptions/subscription_id, to check the status=inactive, timesSent=4, failsCounter=4, maxFailsLimit=3'
echo '====================================================================================================================='
orionCurl --url /v2/subscriptions/${subId}
echo
echo


echo '04. PATCH /v2/subscriptions/subscription_id, to re-enable subscription'
echo '======================================================================'
payload='{
  "status": "active"
}'
orionCurl --url /v2/subscriptions/${subId} --payload "$payload" -X PATCH
echo
echo


echo '05. Trigger 1 notifications'
echo '==========================='
payload='{
  "id": "Room1",
  "type": "Room",
  "temperature": {
    "value": 23,
    "type": "Float"
  }
}'
# We leave some time between updates to leave some time to connection to fail so CB can process the fail correctly
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "$payload" > /dev/null
sleep 0.25s
echo
echo


echo '06. GET /v2/subscriptions/subscription_id, to check the status=inactive, timesSent=5, failsCounter=5, maxFailsLimit=3'
echo '====================================================================================================================='
orionCurl --url /v2/subscriptions/${subId}
echo
echo


# Ensure that one cache sync has passed
sleep 5.5s


echo '07. GET /v2/subscriptions/subscription_id, to check the status=inactive, timesSent=5, failsCounter=5, maxFailsLimit=3 (after cache pass)'
echo '========================================================================================================================================'
orionCurl --url /v2/subscriptions/${subId}
echo
echo


echo '08. PATCH /v2/subscriptions/subscription_id, to re-enable subscription'
echo '======================================================================'
payload='{
  "status": "active"
}'
orionCurl --url /v2/subscriptions/${subId} --payload "$payload" -X PATCH
echo
echo


echo '09. Trigger 2 notifications'
echo '==========================='
payload='{
  "id": "Room1",
  "type": "Room",
  "temperature": {
    "value": 23,
    "type": "Float"
  }
}'
# We leave some time between updates to leave some time to connection to fail so CB can process the fail correctly
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "$payload" > /dev/null
sleep 0.25s
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "$payload" > /dev/null
sleep 0.25s
echo
echo


echo '10. GET /v2/subscriptions/subscription_id, to check the status=inactive, timesSent=6, failsCounter=6, maxFailsLimit=3'
echo '====================================================================================================================='
orionCurl --url /v2/subscriptions/${subId}
echo
echo


--REGEXPECT--
01. POST /v2/subscriptions, to create subscription with maxFailsLimit=3 to failing endpoint
===========================================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



02. Trigger 4 notifications
===========================


03. GET /v2/subscriptions/subscription_id, to check the status=inactive, timesSent=4, failsCounter=4, maxFailsLimit=3
=====================================================================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 476

{
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [],
        "attrsFormat": "normalized",
        "covered": false,
        "failsCounter": 4,
        "lastFailure": "REGEX(.*)",
        "lastNotification": "REGEX(.*)",
        "maxFailsLimit": 3,
        "mqtt": {
            "qos": 0,
            "retain": false,
            "topic": "test",
            "url": "mqtt://localhost:18883"
        },
        "onlyChangedAttrs": false,
        "timesSent": 4
    },
    "status": "inactive",
    "subject": {
        "condition": {
            "attrs": [],
            "notifyOnMetadataChange": true
        },
        "entities": [
            {
                "idPattern": ".*",
                "type": "Room"
            }
        ]
    }
}


04. PATCH /v2/subscriptions/subscription_id, to re-enable subscription
======================================================================
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})



05. Trigger 1 notifications
===========================


06. GET /v2/subscriptions/subscription_id, to check the status=inactive, timesSent=5, failsCounter=5, maxFailsLimit=3
=====================================================================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 476

{
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [],
        "attrsFormat": "normalized",
        "covered": false,
        "failsCounter": 5,
        "lastFailure": "REGEX(.*)",
        "lastNotification": "REGEX(.*)",
        "maxFailsLimit": 3,
        "mqtt": {
            "qos": 0,
            "retain": false,
            "topic": "test",
            "url": "mqtt://localhost:18883"
        },
        "onlyChangedAttrs": false,
        "timesSent": 5
    },
    "status": "inactive",
    "subject": {
        "condition": {
            "attrs": [],
            "notifyOnMetadataChange": true
        },
        "entities": [
            {
                "idPattern": ".*",
                "type": "Room"
            }
        ]
    }
}


07. GET /v2/subscriptions/subscription_id, to check the status=inactive, timesSent=5, failsCounter=5, maxFailsLimit=3 (after cache pass)
========================================================================================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 476

{
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [],
        "attrsFormat": "normalized",
        "covered": false,
        "failsCounter": 5,
        "lastFailure": "REGEX(.*)",
        "lastNotification": "REGEX(.*)",
        "maxFailsLimit": 3,
        "mqtt": {
            "qos": 0,
            "retain": false,
            "topic": "test",
            "url": "mqtt://localhost:18883"
        },
        "onlyChangedAttrs": false,
        "timesSent": 5
    },
    "status": "inactive",
    "subject": {
        "condition": {
            "attrs": [],
            "notifyOnMetadataChange": true
        },
        "entities": [
            {
                "idPattern": ".*",
                "type": "Room"
            }
        ]
    }
}


08. PATCH /v2/subscriptions/subscription_id, to re-enable subscription
======================================================================
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})



09. Trigger 2 notifications
===========================


10. GET /v2/subscriptions/subscription_id, to check the status=inactive, timesSent=6, failsCounter=6, maxFailsLimit=3
=====================================================================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 476

{
    "id": "REGEX([0-9a-f]{24})",
    "notification": {
        "attrs": [],
        "attrsFormat": "normalized",
        "covered": false,
        "failsCounter": 6,
        "lastFailure": "REGEX(.*)",
        "lastNotification": "REGEX(.*)",
        "maxFailsLimit": 3,
        "mqtt": {
            "qos": 0,
            "retain": false,
            "topic": "test",
            "url": "mqtt://localhost:18883"
        },
        "onlyChangedAttrs": false,
        "timesSent": 6
    },
    "status": "inactive",
    "subject": {
        "condition": {
            "attrs": [],
            "notifyOnMetadataChange": true
        },
        "entities": [
            {
                "idPattern": ".*",
                "type": "Room"
            }
        ]
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
