# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
CPr invalid response (non-NGSI) does not break CB

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print

--SHELL--

#
# 01. Create entity E (local)
# 02. Register CPr which does not response correctly
# 03. Query for all entities, get E with 200 OK
#

echo "01. Create entity E (local)"
echo "==========================="
payload='{
  "type": "T",
  "id":   "E",
  "A": {
    "type": "Text",
    "value": "foo"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "02. Register CPr which does not response correctly"
echo "=================================================="
payload='{
  "contextRegistrations": [
    {
      "entities": [
        {
          "id": "qa_name_01",
          "type": "qa_type"
        }
      ],
      "attributes": [
        {
          "name": "c_name",
          "type": "command"
        }
      ],
      "providingApplication": "http://localhost:'${LISTENER_PORT}'/badresponse"
    }
  ],
  "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload"
echo
echo


echo "03. Query for all entities, get E with 200 OK"
echo "============================================="
orionCurl --url '/v1/contextEntities?details=on&limit=15&offset=0'
echo
echo


--REGEXPECT--
01. Create entity E (local)
===========================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. Register CPr which does not response correctly
==================================================
HTTP/1.1 200 OK
Content-Length: 62
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "P1M",
    "registrationId": "REGEX([0-9a-f]{24})"
}


03. Query for all entities, get E with 200 OK
=============================================
HTTP/1.1 200 OK
Content-Length: 255
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A",
                        "type": "Text",
                        "value": "foo"
                    }
                ],
                "id": "E",
                "isPattern": "false",
                "type": "T"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "errorCode": {
        "code": "200",
        "details": "Count: 1",
        "reasonPhrase": "OK"
    }
}


--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
