# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Accept header fail

--SHELL-INIT--
dbInit CB
brokerStart CB
--SHELL--
# Note that curl by default uses "Accept: */*" so this step is testing that "no header" is interpreted as
# "Accept: */*" according to HTTP RFC
url="/v1/queryContext"
payload='<?xml version="1.0"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
orionCurl --url "$url" --payload "${payload}" --out " "

echo "1: ++++++++++++++++++++"

# Fails due to error in payload parsing
url="/v1/queryContext"
payload='no meaningful payload (failing tests)'
orionCurl --url "$url" --payload "${payload}"

echo "2: ++++++++++++++++++++"

# Explicit "Accept: application/xml" is ok
url="/v1/queryContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
orionCurl --url "$url" --payload "${payload}" --out "application/xml"

echo "3: ++++++++++++++++++++"

# Uses a list in Accept which a valid type is found is ok
url="/v1/queryContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
orionCurl --url "$url" --payload "${payload}" --out "text/plain, application/xml"

echo "4: ++++++++++++++++++++"

# Uses a list in Accept which a valid type is found is ok (with extra encoding after ";")
url="/v1/queryContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
orionCurl --url "$url" --payload "${payload}" --out "text/plain, application/xml; charset=UTF-8"

echo "5: ++++++++++++++++++++"

# Uses a list in Accept with no valid type
url="/v1/queryContext"
payload='no meaningful payload (failing tests)'
orionCurl --url "$url" --payload "${payload}" --out "text/plain, image/jpeg"

echo "6: ++++++++++++++++++++"

# List in Accept with no valid type (with extra encoding after ";")
url="/v1/queryContext"
payload='no meaningful payload (failing tests)'
orionCurl --url "$url" --payload "${payload}" --out "text/plain, image/jpeg; charset=UTF-8"

echo "7: ++++++++++++++++++++"

# Verifies that explicit "Accept: application/json" is ok
url="/v1/queryContext"
payload='{
	"entities": [
		{
			"type": "Room",
			"isPattern": "false",
			"id": "OfficeRoom"
		}
	]
}'
orionCurl --url "$url" --payload "${payload}" --in "application/json" --out "application/json"

echo "8: ++++++++++++++++++++"
# Accept preference is correctly taken into account (XML preferred to JSON), order is JSON, XML
url="/v1/queryContext"
payload='{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "OfficeRoom"
    }
  ]
}'
orionCurl --url "$url" --payload "${payload}" --in "application/json" --out "application/json, application/xml"


echo "9: ++++++++++++++++++++"
# Accept preference is correctly taken into account (XML preferred to JSON), order is XML, JSON
url="/v1/queryContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
</queryContextRequest>'
orionCurl --url "$url" --payload "${payload}" --in "application/xml" --out "application/xml, application/json"

echo "10: ++++++++++++++++++++"

# Cross Accept/Content-Type XML/JSON test (only a weird client will do this, but it is theoretically possible)
# FIXME P6: Once issue #317 is fixed - move this test to use curlIt
(curl localhost:${CB_PORT}/v1/queryContext -s -S --header 'Content-Type: application/json' --header 'Accept: application/xml' -d @- | xmllint --format -) <<EOF
{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "OfficeRoom"
    }
  ]
}
EOF
echo "11: ++++++++++++++++++++"

# Cross Accept/Content-Type JSON/XML test (only a weird client will do this, but it is theoretically possible)
# FIXME P6: Once issue #317 is fixed - move this test to use curlIt
(curl localhost:${CB_PORT}/v1/queryContext -s -S --header 'Content-Type: application/xml' --header 'Accept: application/json' -d @-) <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
</queryContextRequest>
EOF
echo "12: ++++++++++++++++++++"

--REGEXPECT--
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
1: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 126
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <code>400</code>
  <reasonPhrase>Bad Request</reasonPhrase>
  <details>XML Parse Error</details>
</orionError>
2: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
3: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
4: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
5: ++++++++++++++++++++
HTTP/1.1 406 Not Acceptable
Connection: close
Content-Length: 220
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <code>406</code>
  <reasonPhrase>Not Acceptable</reasonPhrase>
  <details>acceptable MIME types: application/xml, application/json. Accept header in request: text/plain, image/jpeg</details>
</orionError>
6: ++++++++++++++++++++
HTTP/1.1 406 Not Acceptable
Connection: close
Content-Length: 243
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <code>406</code>
  <reasonPhrase>Not Acceptable</reasonPhrase>
  <details>acceptable MIME types: application/xml, application/json. Accept header in request: text/plain, image/jpeg; charset=UTF-8</details>
</orionError>
7: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 94
Content-Type: application/json
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404",
        "reasonPhrase": "No context element found"
    }
}
8: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
9: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
10: ++++++++++++++++++++
<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</queryContextResponse>
11: ++++++++++++++++++++
{
  "errorCode" : {
    "code" : "404",
    "reasonPhrase" : "No context element found"
  }
}
12: ++++++++++++++++++++
--TEARDOWN--
brokerStop CB
