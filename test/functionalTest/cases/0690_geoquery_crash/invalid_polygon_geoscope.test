# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Simple NGSI10 subscription for EXACT city and isPattern and deeper service path

--SHELL-INIT--
dbInit CB
brokerStart CB 0-255

--SHELL--

# With MongoDB 2.4 the result of the query in this test is not 404, but 500:
#
# {
#    "contextResponses": [
#        {
#            "contextElement": {
#                "id": ".*",
#                "isPattern": "true",
#                "type": ""
#            },
#            "statusCode": {
#                "code": "500",
#                "details": "Exterior shell of polygon is invalid",
#                "reasonPhrase": "Internal Server Error"
#            }
#        }
#    ]
# }
#
# It seems that the geolocation internals in MongoDB 2.6 has improved in order to detect
# that abnormal polygon specification, at least in the case of this particular case. Thus, we
# have improved a 500 to a 404, which is always better. The downside of this is that we have lost
# the ability to exercise the code that capture "Exterior shell of polygon is invalid" (the code
# shouldn't be removed, because other conditions, not modeled by this test, could raise that kind of
# error).
#
# In any case, the original purpose of this test is achieved: to test that the broker doesn't crash

#
# 01. Make the issue 690 query with invalid polygon geoscope and make sure the broker does not crash
#

echo "01. Make the issue 690 query with invalid polygon geoscope and make sure the broker does not crash"
echo "=================================================================================================="
payload='{
  "entities":
  [
    {
      "type": "",
      "isPattern": "true",
      "id": ".*"
    }
  ],
  "restriction":
  {
    "scopes": [
      {
        "type" : "FIWARE::Location",
        "value" :
        {
          "polygon":
          {
            "vertices": [
              { "latitude": "-33.603458", "longitude": "-70.652788" },
              { "latitude": "-33.604231", "longitude": "-70.646032" },
              { "latitude": "-33.606123", "longitude": "-70.646781" },
              { "latitude": "-33.606123", "longitude": "-70.646781" }
            ]
          }
        }
      }
    ]
  }
}'
orionCurl --url /v1/queryContext --payload "${payload}"
echo
echo


--REGEXPECT--
01. Make the issue 690 query with invalid polygon geoscope and make sure the broker does not crash
==================================================================================================
HTTP/1.1 200 OK
Content-Length: 70
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404",
        "reasonPhrase": "No context element found"
    }
}


--TEARDOWN---
brokerStop CB
dbDrop CB
