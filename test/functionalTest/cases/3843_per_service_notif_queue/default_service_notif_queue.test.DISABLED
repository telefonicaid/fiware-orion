# Copyright 2021 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Per service notification queues (regression case)

--SHELL-INIT--
dbInit ${CB_DB_NAME} serv1
dbInit ${CB_DB_NAME} serv2
dbInit ${CB_DB_NAME} serv3
brokerStart CB 0 IPv4 -multiservice -notificationMode threadpool:3:2
accumulatorStart --pretty-print localhost $LISTENER_PORT

--SHELL--

# This test is like the base case in per_service_notif_queue.test but without
# using any per-service queue, so the default servie queue will saturate
# earlier
#
# 01. Subscribe serv1 to the accumulator endpoint that never responses
# 02. Subscribe serv2 to the accumulator endpoint that never responses
# 03. Subscribe serv3 to the accumulator endpoint that never responses
# 04. Create/update entity in serv1 3 times
# 05. Create/update entity in serv2 4 times, causing 2 ERRORs
# 06. Create/update entity in serv3 5 times, causing 5 ERRORs
# 07. Grep log for ERROR, getting 7 in the default service
#


echo '01. Subscribe serv1 to the accumulator endpoint that never responses'
echo '===================================================================='
payload='{
  "description": "serv1 subscriptions",
  "subject": {
    "entities": [
      {
        "id": "E",
        "type": "T"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/waitForever"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload" --tenant serv1
echo
echo


echo '02. Subscribe serv2 to the accumulator endpoint that never responses'
echo '===================================================================='
payload='{
  "description": "serv2 subscriptions",
  "subject": {
    "entities": [
      {
        "id": "E",
        "type": "T"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/waitForever"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload" --tenant serv2
echo
echo


echo '03. Subscribe serv3 to the accumulator endpoint that never responses'
echo '===================================================================='
payload='{
  "description": "serv3 subscriptions",
  "subject": {
    "entities": [
      {
        "id": "E",
        "type": "T"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/waitForever"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload" --tenant serv3
echo
echo


echo "04. Create/update entity in serv1 3 times"
echo "========================================="
payload='{
  "id": "E",
  "type": "T",
  "A": {
     "value": 1,
   "type": "Number"
  }
}'
for i in {1..3}
do
   echo $i
   orionCurl --url '/v2/entities?options=upsert,forcedUpdate' --payload "$payload" --tenant serv1 > /dev/null
done
echo
echo


echo "05. Create/update entity in serv2 4 times, causing 2 ERRORs"
echo "==========================================================="
for i in {1..4}
do
   echo $i
   orionCurl --url '/v2/entities?options=upsert,forcedUpdate' --payload "$payload" --tenant serv2 > /dev/null
done
echo
echo


echo "06. Create/update entity in serv3 5 times, causing 5 ERRORs"
echo "==========================================================="
for i in {1..5}
do
   echo $i
   orionCurl --url '/v2/entities?options=upsert,forcedUpdate' --payload "$payload" --tenant serv3 > /dev/null
done
echo
echo


echo "07. Grep log for ERROR, getting 7 in the default service"
echo "========================================================"
grep ERROR /tmp/contextBroker.log | grep "Runtime Error" |  awk -F 'Runtime Error ' '{print $2}'
echo
echo


# It is not usual to stop accumulator in the SHELL section, but this way we
# ensure all connections are terminated so upon stopping of Context Broker
# no memory is lost and no false positive is reported by valgrind pass
accumulatorStop $LISTENER_PORT


--REGEXPECT--
01. Subscribe serv1 to the accumulator endpoint that never responses
====================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



02. Subscribe serv2 to the accumulator endpoint that never responses
====================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



03. Subscribe serv3 to the accumulator endpoint that never responses
====================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



04. Create/update entity in serv1 3 times
=========================================
1
2
3


05. Create/update entity in serv2 4 times, causing 2 ERRORs
===========================================================
1
2
3
4


06. Create/update entity in serv3 5 times, causing 5 ERRORs
===========================================================
1
2
3
4
5


07. Grep log for ERROR, getting 7 in the default service
========================================================
(default notification queue is full)
(default notification queue is full)
(default notification queue is full)
(default notification queue is full)
(default notification queue is full)
(default notification queue is full)
(default notification queue is full)


--TEARDOWN--
brokerStop CB
dbDrop ${CB_DB_NAME} serv1
dbDrop ${CB_DB_NAME} serv2
dbDrop ${CB_DB_NAME} serv3
