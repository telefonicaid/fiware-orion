# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
GET Entity Attribute V2

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. POST /v1/updateContext
# 02. GET /v2/entities/8787GHY/brand/value
# 03. GET /v2/entities/8787GHY/model/value
# 04. GET /v2/entities/8787GHY/speed/value
# 05. GET /v2/entities/8787GHY/A3/value
#
# Note (step 04) that the attribute speed is a string, as it is created using NGSIv1
#

echo "01. POST /v1/updateContext"
echo "=========================="
payload='{
  "contextElements": [
    {
      "id":   "8787GHY",
      "type": "Car",
      "attributes" : [
        {
          "name" : "speed",
          "type": "number",
          "value" : 150
        },
        {
          "name" : "brand",
          "type": "string",
          "value" : "Mercedes Benz"
        },
        {
          "name" : "plateCountry",
          "value" : "ES"
        },
        {
          "name" : "madeInCountry",
          "value" : "DE",
          "type" : ""
        },
        {
          "name" : "model",
          "type": "myString",
          "value" : "Klasse C"
        },
        {
          "name": "A3",
          "type": "a",
          "value": "E1/T1/A3/M1",
          "metadatas": [
            {
              "name": "m1",
              "value": "M1"
            }
          ]
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload"
echo
echo

echo "02. GET /v2/entities/8787GHY/attrs/brand/value"
echo "=============================================="
orionCurl --url /v2/entities/8787GHY/attrs/brand/value --out text
echo
echo

echo "03. GET /v2/entities/8787GHY/attrs/model/value"
echo "=============================================="
orionCurl --url /v2/entities/8787GHY/attrs/model/value --out text
echo
echo

echo "04. GET /v2/entities/8787GHY/attrs/speed/value"
echo "=============================================="
orionCurl --url /v2/entities/8787GHY/attrs/speed/value --out text
echo
echo

echo "05. GET /v2/entities/8787GHY/attrs/A3/value"
echo "==========================================="
orionCurl --url /v2/entities/8787GHY/attrs/A3/value --out text
echo
echo

--REGEXPECT--
01. POST /v1/updateContext
==========================
HTTP/1.1 200 OK
Content-Length: 466
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "speed",
                        "type": "number",
                        "value": ""
                    },
                    {
                        "name": "brand",
                        "type": "string",
                        "value": ""
                    },
                    {
                        "name": "plateCountry",
                        "type": "",
                        "value": ""
                    },
                    {
                        "name": "madeInCountry",
                        "type": "",
                        "value": ""
                    },
                    {
                        "name": "model",
                        "type": "myString",
                        "value": ""
                    },
                    {
                        "metadatas": [
                            {
                                "name": "m1",
                                "type": "",
                                "value": "M1"
                            }
                        ],
                        "name": "A3",
                        "type": "a",
                        "value": ""
                    }
                ],
                "id": "8787GHY",
                "isPattern": "false",
                "type": "Car"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


02. GET /v2/entities/8787GHY/attrs/brand/value
==============================================
HTTP/1.1 200 OK
Content-Length: 15
Content-Type: text/plain
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

"Mercedes Benz"


03. GET /v2/entities/8787GHY/attrs/model/value
==============================================
HTTP/1.1 200 OK
Content-Length: 10
Content-Type: text/plain
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

"Klasse C"


04. GET /v2/entities/8787GHY/attrs/speed/value
==============================================
HTTP/1.1 200 OK
Content-Length: 5
Content-Type: text/plain
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

"150"


05. GET /v2/entities/8787GHY/attrs/A3/value
===========================================
HTTP/1.1 200 OK
Content-Length: 13
Content-Type: text/plain
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

"E1/T1/A3/M1"


--TEARDOWN--
brokerStop CB
dbDrop CB
