# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Create Individual Entity Attribute with empty value

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. POST /v2/entities to create E1/A1=""
# 02. GET /v2/entities/E1 to see A1==""
# 03. POST /v2/entities to create E1/A2="", using json object (fails, as entity already exists)
# 04. GET /v2/entities/E1 to see that A2 has not been added
#

echo '01. POST /v2/entities to create E1/A1=""'
echo "========================================"
payload='{ "id": "E1", "type": "T1", "A1": "" }'
orionCurl --url '/v2/entities?options=keyValues' --payload "$payload"
echo
echo


echo '02. GET /v2/entities/E1 to see A1==""'
echo "====================================="
orionCurl --url /v2/entities/E1
echo
echo


echo '03. POST /v2/entities to create E1/A2="", using json object (fails, as entity already exists)'
echo "============================================================================================="
payload='{ "id": "E1", "type": "T1", "A2": { "value": "" }}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo '04. GET /v2/entities/E1 to see that A2 has not been added'
echo "========================================================="
orionCurl --url /v2/entities/E1
echo
echo


--REGEXPECT--
01. POST /v2/entities to create E1/A1=""
========================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E1?type=T1
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. GET /v2/entities/E1 to see A1==""
=====================================
HTTP/1.1 200 OK
Content-Length: 69
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "A1": {
        "metadata": {},
        "type": "Text",
        "value": ""
    },
    "id": "E1",
    "type": "T1"
}


03. POST /v2/entities to create E1/A2="", using json object (fails, as entity already exists)
=============================================================================================
HTTP/1.1 422 Unprocessable Entity
Content-Length: 56
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "Already Exists",
    "error": "Unprocessable"
}


04. GET /v2/entities/E1 to see that A2 has not been added
=========================================================
HTTP/1.1 200 OK
Content-Length: 69
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "A1": {
        "metadata": {},
        "type": "Text",
        "value": ""
    },
    "id": "E1",
    "type": "T1"
}


--TEARDOWN--
brokerStop CB
dbDrop CB
