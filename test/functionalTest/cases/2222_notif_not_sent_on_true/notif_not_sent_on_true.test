# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Notification not sent with boolean true filter

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print

--SHELL--

#
# 01. Create subscription
# 02. Create entity
# 03. Dump accumulator to check notification
#

echo "01. Create subscription"
echo "======================="
payload1='{
  "subject": {
    "entities": [
      {
        "idPattern": ".*"
      }
    ],
    "condition": {
      "attrs": [ "temperature" ],
      "expression": {
        "q": "value_bool==true"
      }
    }
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    },
    "attrsFormat": "values",
    "attrs": [ "pressure" ]
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload1"
echo
echo



echo "02. Create entity"
echo "================="
payload2='{
  "type": "cMen",
  "id": "room_2",
  "temperature": {
    "type": "celsius",
    "metadata": {
      "very_hot": {
        "value": "default",
        "type": "alarm"
      }
    },
    "value": 34
  },
  "pressure": {
    "value": "high"
  },
  "humidity": {
    "type": "porcent",
    "metadata": {
      "very_hot": {
        "value": "default",
        "type": "alarm"
      }
    },
    "value": "air,density"
  },
  "timestamp": {
    "type": "DateTime",
    "value": "2017-06-15T07:21:24.000Z"
  },
  "value_str": {
    "value": "true"
  },
  "value_bool": {
    "value": true
  }
}'
orionCurl --url /v2/entities --payload "$payload2"
echo
echo


echo "07. Dump accumulator to check notification"
echo "=========================================="
accumulatorDump
echo
echo


--REGEXPECT--
01. Create subscription
=======================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



02. Create entity
=================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/room_2?type=cMen
Content-Length: 0



07. Dump accumulator to check notification
==========================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 63
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: values
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        [
            "high"
        ]
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================


--TEARDOWN--
brokerStop CB
dbDrop CB
accumulatorStop
