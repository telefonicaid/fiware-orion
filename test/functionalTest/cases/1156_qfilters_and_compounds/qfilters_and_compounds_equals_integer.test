# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
String filters for compound values of attributes: equality of integers

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. Create E1 with A1 with compound value containing all JSON types
#
# 02. Equal to Same Integer: GET /v2/entities?q=A1.i:10, see E1
# 03. Equal to Same Integer: GET /v2/entities?q=A1.i==10, see E1
# 04. Equal to Different Integer: GET /v2/entities?q=A1.i:11, see nothing
# 05. Equal to Different Integer: GET /v2/entities?q=A1.i==11, see nothing
# 06. Not Equal to Same Integer: GET /v2/entities?q=A1.i!=10, see nothing
# 07. Not Equal to Different Integer: GET /v2/entities?q=A1.i!=11, see E1
# 08. Equal to Incorrect Int-Range: GET /v2/entities?q=A1.i:1..9, see nothing
# 09. Equal to Correct Int-Range: GET /v2/entities?q=A1.i:1..10, see E1
# 10. Equal to Incorrect Int-Range: GET /v2/entities?q=A1.i==1..9, see nothing
# 11. Equal to Correct Int-Range: GET /v2/entities?q=A1.i==1..10, see E1
# 12. Not Equal to Correct Int-Range: GET /v2/entities?q=A1.i!=1..10, see nothing
# 13. Not Equal to Incorrect Int-Range: GET /v2/entities?q=A1.i!=1..9, see E1
# 14. Equal to Correct Int-List:  GET /v2/entities?q=A1.i:0,5,10,15, see E1
# 15. Equal to Correct Int-List: GET /v2/entities?q=A1.i==0,5,10,15, see E1
# 16. Equal to Incorrect Int-List: GET /v2/entities?q=A1.i:0,5,15, see nothing
# 17. Equal to Incorrect Int-List: GET /v2/entities?q=A1.i==0,5,15, see nothing
# 18. Not Equal to Correct Int-List: GET /v2/entities?q=A1.i!=0,5,10,15, see nothing
# 19. Not Equal to Incorrect Int-List: GET /v2/entities?q=A1.i!=0,5,15, see E1
#


echo "01. Create E1 with A1 with compound value containing all JSON types"
echo "==================================================================="
payload='{
  "id": "E1",
  "A1": {
    "value": {
      "i": 10,
      "f": 3.14,
      "s": "test_string",
      "T": true,
      "F": false,
      "N": null,
      "D": "2016-07-22T10:42:42.000Z"
    }
  },
  "A2": { "value": 22 }
}'
orionCurl --url /v2/entities --payload "${payload}"
echo
echo


echo "02. Equal to Same Integer: GET /v2/entities?q=A1.i:10, see E1"
echo "============================================================="
orionCurl --url '/v2/entities?q=A1.i:10'
echo
echo


echo "03. Equal to Same Integer: GET /v2/entities?q=A1.i==10, see E1"
echo "=============================================================="
orionCurl --url '/v2/entities?q=A1.i==10'
echo
echo


echo "04. Equal to Different Integer: GET /v2/entities?q=A1.i:11, see nothing"
echo "======================================================================="
orionCurl --url '/v2/entities?q=A1.i:11'
echo
echo


echo "05. Equal to Different Integer: GET /v2/entities?q=A1.i==11, see nothing"
echo "========================================================================"
orionCurl --url '/v2/entities?q=A1.i==11'
echo
echo


echo "06. Not Equal to Same Integer: GET /v2/entities?q=A1.i!=10, see nothing"
echo "======================================================================="
orionCurl --url '/v2/entities?q=A1.i!=10'
echo
echo


echo "07. Not Equal to Different Integer: GET /v2/entities?q=A1.i!=11, see E1"
echo "======================================================================="
orionCurl --url '/v2/entities?q=A1.i!=11'
echo
echo


echo "08. Equal to Incorrect Int-Range: GET /v2/entities?q=A1.i:1..9, see nothing"
echo "==========================================================================="
orionCurl --url '/v2/entities?q=A1.i:1..9'
echo
echo


echo "09. Equal to Correct Int-Range: GET /v2/entities?q=A1.i:1..10, see E1"
echo "====================================================================="
orionCurl --url '/v2/entities?q=A1.i:1..10'
echo
echo


echo "10. Equal to Incorrect Int-Range: GET /v2/entities?q=A1.i==1..9, see nothing"
echo "============================================================================"
orionCurl --url '/v2/entities?q=A1.i==1..9'
echo
echo


echo "11. Equal to Correct Int-Range: GET /v2/entities?q=A1.i==1..10, see E1"
echo "======================================================================"
orionCurl --url '/v2/entities?q=A1.i==1..10'
echo
echo


echo "12. Not Equal to Correct Int-Range: GET /v2/entities?q=A1.i!=1..10, see nothing"
echo "==============================================================================="
orionCurl --url '/v2/entities?q=A1.i!=1..10'
echo
echo


echo "13. Not Equal to Incorrect Int-Range: GET /v2/entities?q=A1.i!=1..9, see E1"
echo "==========================================================================="
orionCurl --url '/v2/entities?q=A1.i!=1..9'
echo
echo


echo "14. Equal to Correct Int-List:  GET /v2/entities?q=A1.i:0,5,10,15, see E1"
echo "========================================================================="
orionCurl --url '/v2/entities?q=A1.i:0,5,10,15'
echo
echo


echo "15. Equal to Correct Int-List: GET /v2/entities?q=A1.i==0,5,10,15, see E1"
echo "========================================================================="
orionCurl --url '/v2/entities?q=A1.i==0,5,10,15'
echo
echo


echo "16. Equal to Incorrect Int-List: GET /v2/entities?q=A1.i:0,5,15, see nothing"
echo "============================================================================"
orionCurl --url '/v2/entities?q=A1.i:0,5,15'
echo
echo


echo "17. Equal to Incorrect Int-List: GET /v2/entities?q=A1.i==0,5,15, see nothing"
echo "============================================================================="
orionCurl --url '/v2/entities?q=A1.i==0,5,15'
echo
echo


echo "18. Not Equal to Correct Int-List: GET /v2/entities?q=A1.i!=0,5,10,15, see nothing"
echo "=================================================================================="
orionCurl --url '/v2/entities?q=A1.i!=0,5,10,15'
echo
echo


echo "19. Not Equal to Incorrect Int-List: GET /v2/entities?q=A1.i!=0,5,15, see E1"
echo "============================================================================"
orionCurl --url '/v2/entities?q=A1.i!=0,5,15'
echo
echo


--REGEXPECT--
01. Create E1 with A1 with compound value containing all JSON types
===================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E1?type=Thing
Content-Length: 0



02. Equal to Same Integer: GET /v2/entities?q=A1.i:10, see E1
=============================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 225

[
    {
        "A1": {
            "metadata": {},
            "type": "StructuredValue",
            "value": {
                "D": "2016-07-22T10:42:42.000Z",
                "F": false,
                "N": null,
                "T": true,
                "f": 3.14,
                "i": 10,
                "s": "test_string"
            }
        },
        "A2": {
            "metadata": {},
            "type": "Number",
            "value": 22
        },
        "id": "E1",
        "type": "Thing"
    }
]


03. Equal to Same Integer: GET /v2/entities?q=A1.i==10, see E1
==============================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 225

[
    {
        "A1": {
            "metadata": {},
            "type": "StructuredValue",
            "value": {
                "D": "2016-07-22T10:42:42.000Z",
                "F": false,
                "N": null,
                "T": true,
                "f": 3.14,
                "i": 10,
                "s": "test_string"
            }
        },
        "A2": {
            "metadata": {},
            "type": "Number",
            "value": 22
        },
        "id": "E1",
        "type": "Thing"
    }
]


04. Equal to Different Integer: GET /v2/entities?q=A1.i:11, see nothing
=======================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


05. Equal to Different Integer: GET /v2/entities?q=A1.i==11, see nothing
========================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


06. Not Equal to Same Integer: GET /v2/entities?q=A1.i!=10, see nothing
=======================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


07. Not Equal to Different Integer: GET /v2/entities?q=A1.i!=11, see E1
=======================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 225

[
    {
        "A1": {
            "metadata": {},
            "type": "StructuredValue",
            "value": {
                "D": "2016-07-22T10:42:42.000Z",
                "F": false,
                "N": null,
                "T": true,
                "f": 3.14,
                "i": 10,
                "s": "test_string"
            }
        },
        "A2": {
            "metadata": {},
            "type": "Number",
            "value": 22
        },
        "id": "E1",
        "type": "Thing"
    }
]


08. Equal to Incorrect Int-Range: GET /v2/entities?q=A1.i:1..9, see nothing
===========================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


09. Equal to Correct Int-Range: GET /v2/entities?q=A1.i:1..10, see E1
=====================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 225

[
    {
        "A1": {
            "metadata": {},
            "type": "StructuredValue",
            "value": {
                "D": "2016-07-22T10:42:42.000Z",
                "F": false,
                "N": null,
                "T": true,
                "f": 3.14,
                "i": 10,
                "s": "test_string"
            }
        },
        "A2": {
            "metadata": {},
            "type": "Number",
            "value": 22
        },
        "id": "E1",
        "type": "Thing"
    }
]


10. Equal to Incorrect Int-Range: GET /v2/entities?q=A1.i==1..9, see nothing
============================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


11. Equal to Correct Int-Range: GET /v2/entities?q=A1.i==1..10, see E1
======================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 225

[
    {
        "A1": {
            "metadata": {},
            "type": "StructuredValue",
            "value": {
                "D": "2016-07-22T10:42:42.000Z",
                "F": false,
                "N": null,
                "T": true,
                "f": 3.14,
                "i": 10,
                "s": "test_string"
            }
        },
        "A2": {
            "metadata": {},
            "type": "Number",
            "value": 22
        },
        "id": "E1",
        "type": "Thing"
    }
]


12. Not Equal to Correct Int-Range: GET /v2/entities?q=A1.i!=1..10, see nothing
===============================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


13. Not Equal to Incorrect Int-Range: GET /v2/entities?q=A1.i!=1..9, see E1
===========================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 225

[
    {
        "A1": {
            "metadata": {},
            "type": "StructuredValue",
            "value": {
                "D": "2016-07-22T10:42:42.000Z",
                "F": false,
                "N": null,
                "T": true,
                "f": 3.14,
                "i": 10,
                "s": "test_string"
            }
        },
        "A2": {
            "metadata": {},
            "type": "Number",
            "value": 22
        },
        "id": "E1",
        "type": "Thing"
    }
]


14. Equal to Correct Int-List:  GET /v2/entities?q=A1.i:0,5,10,15, see E1
=========================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 225

[
    {
        "A1": {
            "metadata": {},
            "type": "StructuredValue",
            "value": {
                "D": "2016-07-22T10:42:42.000Z",
                "F": false,
                "N": null,
                "T": true,
                "f": 3.14,
                "i": 10,
                "s": "test_string"
            }
        },
        "A2": {
            "metadata": {},
            "type": "Number",
            "value": 22
        },
        "id": "E1",
        "type": "Thing"
    }
]


15. Equal to Correct Int-List: GET /v2/entities?q=A1.i==0,5,10,15, see E1
=========================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 225

[
    {
        "A1": {
            "metadata": {},
            "type": "StructuredValue",
            "value": {
                "D": "2016-07-22T10:42:42.000Z",
                "F": false,
                "N": null,
                "T": true,
                "f": 3.14,
                "i": 10,
                "s": "test_string"
            }
        },
        "A2": {
            "metadata": {},
            "type": "Number",
            "value": 22
        },
        "id": "E1",
        "type": "Thing"
    }
]


16. Equal to Incorrect Int-List: GET /v2/entities?q=A1.i:0,5,15, see nothing
============================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


17. Equal to Incorrect Int-List: GET /v2/entities?q=A1.i==0,5,15, see nothing
=============================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


18. Not Equal to Correct Int-List: GET /v2/entities?q=A1.i!=0,5,10,15, see nothing
==================================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 2

[]


19. Not Equal to Incorrect Int-List: GET /v2/entities?q=A1.i!=0,5,15, see E1
============================================================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 225

[
    {
        "A1": {
            "metadata": {},
            "type": "StructuredValue",
            "value": {
                "D": "2016-07-22T10:42:42.000Z",
                "F": false,
                "N": null,
                "T": true,
                "f": 3.14,
                "i": 10,
                "s": "test_string"
            }
        },
        "A2": {
            "metadata": {},
            "type": "Number",
            "value": 22
        },
        "id": "E1",
        "type": "Thing"
    }
]


--TEARDOWN--
brokerStop CB
dbDrop CB
