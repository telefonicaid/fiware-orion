# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Simple Registry and Discovery with Service Path

--SHELL-INIT--
dbInit CB
brokerStart CB 0

--SHELL--

#
# 01. Registration with invalid service path /a1/e1+@
# 02. Registration with invalid service path /a1/#
# 03. Registration with TWO service paths /a1/e1,/a1/e2
# 04. Discovery with invalid service path /a1/e1+@
# 05. Discovery with valid /a1/# but nothing found
#

echo "01. Registration with invalid service path /a1/e1+@"
echo "==================================================="
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "type": "T",
         "id": "E1"
      }
    ],
    "attributes": [
      {
        "name": "A1",
        "type": "string"
      }
    ],
    "providingApplication": "http://localhost:'${CP1_PORT}'/v1"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "${payload}" --servicePath /a1/e1+@
echo
echo


echo "02. Registration with invalid service path /a1/#"
echo "================================================"
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "type": "T",
         "id": "E1"
      }
    ],
    "attributes": [
      {
        "name": "A1",
        "type": "string"
      }
    ],
    "providingApplication": "http://localhost:'${CP1_PORT}'/v1"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "${payload}" --servicePath /a1/#
echo
echo


echo "03. Registration with TWO service paths /a1/e1,/a1/e2"
echo "====================================================="
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "type": "T",
         "id": "E1"
      }
    ],
    "attributes": [
      {
        "name": "A1",
        "type": "string"
      }
    ],
    "providingApplication": "http://localhost:'${CP1_PORT}'/v1"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "${payload}" --servicePath /a1/e1,/a1/e2
echo
echo


echo "04. Discovery with invalid service path /a1/e1+@"
echo "================================================"
payload='{
    "entities": [
        {
            "type": "T",
            "isPattern": "true",
            "id": "E.*"
        }
    ],
    "attributes" : [
        "A1"
    ]
}'
orionCurl --url /v1/registry/discoverContextAvailability --payload "${payload}" --servicePath /a1/e1+@
echo
echo


echo "05. Discovery with valid /a1/# but nothing found"
echo "================================================"
payload='{
    "entities": [
        {
            "type": "T",
            "isPattern": "true",
            "id": "E.*"
        }
    ],
    "attributes" : [
        "A1"
    ]
}'
orionCurl --url /v1/registry/discoverContextAvailability --payload "${payload}" --servicePath /a1/#
echo
echo


--REGEXPECT--
01. Registration with invalid service path /a1/e1+@
===================================================
HTTP/1.1 200 OK
Content-Length: 127
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "orionError": {
        "code": "400",
        "details": "a component of ServicePath contains an illegal character",
        "reasonPhrase": "Bad Request"
    }
}


02. Registration with invalid service path /a1/#
================================================
HTTP/1.1 200 OK
Content-Length: 143
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "400",
        "details": "Bad Character in Service-Path",
        "reasonPhrase": "Bad Request"
    },
    "registrationId": "000000000000000000000000"
}


03. Registration with TWO service paths /a1/e1,/a1/e2
=====================================================
HTTP/1.1 200 OK
Content-Length: 157
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "400",
        "details": "more than one service path for notification",
        "reasonPhrase": "Bad Request"
    },
    "registrationId": "000000000000000000000000"
}


04. Discovery with invalid service path /a1/e1+@
================================================
HTTP/1.1 200 OK
Content-Length: 127
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "orionError": {
        "code": "400",
        "details": "a component of ServicePath contains an illegal character",
        "reasonPhrase": "Bad Request"
    }
}


05. Discovery with valid /a1/# but nothing found
================================================
HTTP/1.1 200 OK
Content-Length: 70
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404",
        "reasonPhrase": "No context element found"
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
