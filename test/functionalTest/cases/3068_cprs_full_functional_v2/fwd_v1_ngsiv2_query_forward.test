# Copyright 2024 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Forward Query (NGSIv1 legacy forwarding)

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print

--SHELL--

#
# This test is to check the parseEntitiesResponseV1() logic in CB. Accumulator is used as "fake" CPr
#
# 01. Register ConferenceRoom on CB with accumulator as providing application
# 02. Register ConferenceRoom2 on CB with accumulator as providing application
# 03. Register ConferenceRoom3 pressure on CB with accumulator as providing application
# 04. Query ConferenceRoom in CB
# 05. Query ConferenceRoom2 in CB
# 06. Query ConferenceRoom3 pressure in CB
# 07. Check three forwarded requests in logs
#

echo "01. Register ConferenceRoom on CB with accumulator as providing application"
echo "==========================================================================="
payload='{
  "dataProvided": {
    "entities": [
      {
        "type": "Room",
        "id": "ConferenceRoom"
      }
    ]
  },
  "provider": {
    "http": {
      "url": "http://localhost:'${LISTENER_PORT}'/cpr"
    },
    "legacyForwarding": true
  }
}'
orionCurl --url /v2/registrations --payload "$payload"
echo
echo


REG1_ID=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")


echo "02. Register ConferenceRoom2 on CB with accumulator as providing application"
echo "============================================================================"
payload='{
  "dataProvided": {
    "entities": [
      {
        "type": "Room",
        "id": "ConferenceRoom2"
      }
    ]
  },
  "provider": {
    "http": {
      "url": "http://localhost:'${LISTENER_PORT}'/cpr"
    },
    "legacyForwarding": true
  }
}'
orionCurl --url /v2/registrations --payload "$payload"
echo
echo


REG2_ID=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")


echo "03. Register ConferenceRoom3 pressure on CB with accumulator as providing application"
echo "====================================================================================="
payload='{
  "dataProvided": {
    "entities": [
      {
        "type": "Room",
        "id": "ConferenceRoom3"
      }
    ],
    "attrs": [ "pressure" ]
  },
  "provider": {
    "http": {
      "url": "http://localhost:'${LISTENER_PORT}'/cpr"
    },
    "legacyForwarding": true
  }
}'
orionCurl --url /v2/registrations --payload "$payload"
echo
echo


REG3_ID=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")


echo "04. Query ConferenceRoom in CB"
echo "=============================="
orionCurl --url /v2/entities/ConferenceRoom
echo
echo


echo "05. Query ConferenceRoom2 in CB"
echo "==============================="
orionCurl --url /v2/entities/ConferenceRoom2
echo
echo


echo "06. Query ConferenceRoom3 pressure in CB"
echo "======================================="
orionCurl --url /v2/entities/ConferenceRoom3/attrs/pressure
echo
echo


echo "07. Check three forwarded requests in logs"
echo "=========================================="
cat /tmp/contextBroker.log | grep "Request forwarded" | awk -F 'msg=' '{print $2}' | sed "s/${REG1_ID}/REG1_ID/" | sed "s/${REG2_ID}/REG2_ID/" | sed "s/${REG3_ID}/REG3_ID/"
echo
echo


--REGEXPECT--
01. Register ConferenceRoom on CB with accumulator as providing application
===========================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/registrations/REGEX([0-9a-f\-]{24})
Content-Length: 0



02. Register ConferenceRoom2 on CB with accumulator as providing application
============================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/registrations/REGEX([0-9a-f\-]{24})
Content-Length: 0



03. Register ConferenceRoom3 pressure on CB with accumulator as providing application
=====================================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/registrations/REGEX([0-9a-f\-]{24})
Content-Length: 0



04. Query ConferenceRoom in CB
==============================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 375

{
    "id": "ConferenceRoom",
    "lightstatus": {
        "metadata": {},
        "type": "StructuredValue",
        "value": {
            "x": 1,
            "y": 2
        }
    },
    "pressure": {
        "metadata": {},
        "type": "StructuredValue",
        "value": [
            "a",
            "b",
            "c"
        ]
    },
    "temperature": {
        "metadata": {
            "ID1": {
                "type": "Text",
                "value": {
                    "x": 1,
                    "y": 2
                }
            },
            "ID2": {
                "type": "Text",
                "value": [
                    "a",
                    "b",
                    "c"
                ]
            },
            "ID3": {
                "type": "Text",
                "value": "ThisIsID"
            }
        },
        "type": "degree",
        "value": "14"
    },
    "type": "Room"
}


05. Query ConferenceRoom2 in CB
===============================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 97

{
    "id": "ConferenceRoom2",
    "temperature": {
        "metadata": {},
        "type": "degree",
        "value": "14"
    },
    "type": "Room"
}


06. Query ConferenceRoom3 pressure in CB
=======================================
HTTP/1.1 200 OK
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Content-Type: application/json
Content-Length: 44

{
    "metadata": {},
    "type": "degree",
    "value": "14"
}


07. Check three forwarded requests in logs
==========================================
Request forwarded (regId: REG1_ID): POST http://localhost:9997/cpr/queryContext, request payload (88 bytes): {"entities":[{"id":"ConferenceRoom","isPattern":"false","type":"Room"}],"attributes":[]}, response payload (3912 bytes):
Request forwarded (regId: REG2_ID): POST http://localhost:9997/cpr/queryContext, request payload (89 bytes): {"entities":[{"id":"ConferenceRoom2","isPattern":"false","type":"Room"}],"attributes":[]}, response payload (3912 bytes):
Request forwarded (regId: REG3_ID): POST http://localhost:9997/cpr/queryContext, request payload (99 bytes): {"entities":[{"id":"ConferenceRoom3","isPattern":"false","type":"Room"}],"attributes":["pressure"]}, response payload (3912 bytes):


--TEARDOWN--
brokerStop CB
accumulatorStop $LISTENER_PORT
dbDrop CB
