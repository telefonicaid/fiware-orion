# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Time Measuring Statisticss

--SHELL-INIT--
dbInit CB
brokerStart CB 101,38 IPv4 -statTiming


--SHELL--

#
# The valgrind test suite uses a call to "GET /version" to check that the broker is alive.
# This request is reflected in the statistics so the first call to "GET /statistics"
# gets the "timing" stuff (as there are non-zero counters) when under valgrind.
# When running as a normal functest, there is no prevoius "GET /version" and thus no timing counters.
#
# Now, as we have no means to do REGEXPs about missing lines, with this "Pre-Call" to "GET /statistics",
# a first request is forced and the second call will give "timing" counters,
# both as normal functest and when under valgrind.
#
# 00. Pre-call to GET /statistics to give VALGRIND a possibility
#
# 01. Second call to GET /statistics (gives time stat of FIRST request for /statistics)
# 02. Create entity E2/A1-A5 with v1 JSON
# 03. GET /statistics
# 04. Create entity E3/A1-A5 (identical) with v2 JSON
# 05. GET /statistics
# 06. GET /v1/contextTypes
# 07. GET /statistics
#

# 00. Pre-call to GET /statistics to give VALGRIND a possibility
orionCurl --url /statistics > /dev/null 2>&1


echo "01. Second call to GET /statistics (gives time stat of FIRST request for /statistics)"
echo "====================================================================================="
orionCurl --url /statistics
echo
echo


echo "02. Create entity E2/A1-A5 with v1 JSON"
echo "======================================="
payload='{
  "contextElements": [
    {
      "type": "Test",
      "id":   "E2",
      "attributes": [
        {
          "name": "A1",
          "type": "degree",
          "value": "1",
          "metadatas": [
            {
              "name": "ID",
              "type": "string",
              "value": "ceiling"
            }
          ]
        },
        {
          "name": "A2",
          "type": "degree",
          "value": "2",
          "metadatas": [
            {
              "name": "ID",
              "type": "string",
              "value": "ceiling"
            }
          ]
        },
        {
          "name": "A3",
          "type": "degree",
          "value": "3",
          "metadatas": [
            {
              "name": "ID",
              "type": "string",
              "value": "ceiling"
            }
          ]
        },
        {
          "name": "A4",
          "type": "degree",
          "value": "4",
          "metadatas": [
            {
              "name": "ID",
              "type": "string",
              "value": "ceiling"
            }
          ]
        },
        {
          "name": "A5",
          "type": "degree",
          "value": "5",
          "metadatas": [
            {
              "name": "ID",
              "type": "string",
              "value": "ceiling"
            }
          ]
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload"
echo
echo


echo "03. GET /statistics"
echo "==================="
orionCurl --url /statistics
echo
echo


echo "04. Create entity E3/A1-A5 (identical) with v2 JSON"
echo "==================================================="
payload='{
  "id": "E3",
  "type": "Test",
  "A1": {
    "value": "1",
    "type": "string",
    "metadata": { "ID": { "value": "ceiling" } }
  },
  "A2": {
    "value": "2",
    "type": "string",
    "metadata": { "ID": { "value": "ceiling" } }
  },
  "A3": {
    "value": "3",
    "type": "string",
    "metadata": { "ID": { "value": "ceiling" } }
  },
  "A4": {
    "value": "4",
    "type": "string",
    "metadata": { "ID": { "value": "ceiling" } }
  },
  "A5": {
    "value": "5",
    "type": "string",
    "metadata": { "ID": { "value": "ceiling" } }
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "05. GET /statistics"
echo "==================="
orionCurl --url /statistics
echo
echo


echo "06. GET /v1/contextTypes"
echo "========================"
orionCurl --url /v1/contextTypes
echo
echo


echo "07. GET /statistics"
echo "==================="
orionCurl --url /statistics
echo
echo


#
# About
#   "subCacheRefreshs": "REGEX((0|1))",
#
# If started with -noCache:  0
# Normal start:              1
#


--REGEXPECT--
01. Second call to GET /statistics (gives time stat of FIRST request for /statistics)
=====================================================================================
HTTP/1.1 200 OK
Content-Length: REGEX(.*)
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "measuring_interval_in_secs": REGEX(\d+),
    "timing": {
        "accumulated": {
            "total": REGEX(.*.A*)
        },
        "last": {
            "total": REGEX(.*.A*)
        }
    },
    "uptime_in_secs": REGEX(\d+)
}


02. Create entity E2/A1-A5 with v1 JSON
=======================================
HTTP/1.1 200 OK
Content-Length: 665
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "metadatas": [
                            {
                                "name": "ID",
                                "type": "string",
                                "value": "ceiling"
                            }
                        ],
                        "name": "A1",
                        "type": "degree",
                        "value": ""
                    },
                    {
                        "metadatas": [
                            {
                                "name": "ID",
                                "type": "string",
                                "value": "ceiling"
                            }
                        ],
                        "name": "A2",
                        "type": "degree",
                        "value": ""
                    },
                    {
                        "metadatas": [
                            {
                                "name": "ID",
                                "type": "string",
                                "value": "ceiling"
                            }
                        ],
                        "name": "A3",
                        "type": "degree",
                        "value": ""
                    },
                    {
                        "metadatas": [
                            {
                                "name": "ID",
                                "type": "string",
                                "value": "ceiling"
                            }
                        ],
                        "name": "A4",
                        "type": "degree",
                        "value": ""
                    },
                    {
                        "metadatas": [
                            {
                                "name": "ID",
                                "type": "string",
                                "value": "ceiling"
                            }
                        ],
                        "name": "A5",
                        "type": "degree",
                        "value": ""
                    }
                ],
                "id": "E2",
                "isPattern": "false",
                "type": "Test"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. GET /statistics
===================
HTTP/1.1 200 OK
Content-Length: REGEX(.*)
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "measuring_interval_in_secs": REGEX(\d+),
    "timing": {
        "accumulated": {
            "jsonV1Parse": REGEX(.*.A*),
            "mongoBackend": REGEX(.*.A*),
            "mongoCommandWait": REGEX(.*.A*),
            "mongoReadWait": REGEX(.*.A*),
            "mongoWriteWait": REGEX(.*.A*),
            "render": REGEX(.*.A*),
            "total": REGEX(.*.A*)
        },
        "last": {
            "jsonV1Parse": REGEX(.*.A*),
            "mongoBackend": REGEX(.*.A*),
            "mongoCommandWait": REGEX(.*.A*),
            "mongoReadWait": REGEX(.*.A*),
            "mongoWriteWait": REGEX(.*.A*),
            "render": REGEX(.*.A*),
            "total": REGEX(.*.A*)
        }
    },
    "uptime_in_secs": REGEX(\d+)
}


04. Create entity E3/A1-A5 (identical) with v2 JSON
===================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E3?type=Test
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



05. GET /statistics
===================
HTTP/1.1 200 OK
Content-Length: REGEX(\d+)
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "measuring_interval_in_secs": REGEX(\d+),
    "timing": {
        "accumulated": {
            "jsonV1Parse": REGEX(.*.A*),
            "jsonV2Parse": REGEX(.*.A*),
            "mongoBackend": REGEX(.*.A*),
            "mongoCommandWait": REGEX(.*.A*),
            "mongoReadWait": REGEX(.*.A*),
            "mongoWriteWait": REGEX(.*.A*),
            "render": REGEX(.*.A*),
            "total": REGEX(.*.A*)
        },
        "last": {
            "jsonV2Parse": REGEX(.*.A*),
            "mongoBackend": REGEX(.*.A*),
            "mongoCommandWait": REGEX(.*.A*),
            "mongoReadWait": REGEX(.*.A*),
            "mongoWriteWait": REGEX(.*.A*),
            "render": REGEX(.*.A*),
            "total": REGEX(.*.A*)
        }
    },
    "uptime_in_secs": REGEX(\d+)
}


06. GET /v1/contextTypes
========================
HTTP/1.1 200 OK
Content-Length: 115
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

#SORT_START
{
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    },
    "types": [
        {
            "attributes": [
                "A5"REGEX(,?)
                "A2"REGEX(,?)
                "A4"REGEX(,?)
                "A3"REGEX(,?)
                "A1"REGEX(,?)
            ],
            "name": "Test"
        }
    ]
}
#SORT_END


07. GET /statistics
===================
HTTP/1.1 200 OK
Content-Length: REGEX(.*)
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "measuring_interval_in_secs": REGEX(\d+),
    "timing": {
        "accumulated": {
            "jsonV1Parse": REGEX(.*.A*),
            "jsonV2Parse": REGEX(.*.A*),
            "mongoBackend": REGEX(.*.A*),
            "mongoCommandWait": REGEX(.*.A*),
            "mongoReadWait": REGEX(.*.A*),
            "mongoWriteWait": REGEX(.*.A*),
            "render": REGEX(.*.A*),
            "total": REGEX(.*.A*)
        },
        "last": {
            "mongoBackend": REGEX(.*.A*),
            "mongoCommandWait": REGEX(.*.A*),
            "mongoReadWait": REGEX(.*.A*),
            "render": REGEX(.*.A*),
            "total": REGEX(.*.A*)
        }
    },
    "uptime_in_secs": REGEX(\d+)
}


--TEARDOWN--
brokerStop CB
dbDrop CB
