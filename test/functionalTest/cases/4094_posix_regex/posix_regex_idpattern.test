# Copyright 2022 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
POSIX regex in subscription idPattern

--SHELL-INIT--
dbInit CB
brokerStart CB 0 IPv4
accumulatorStart --pretty-print

--SHELL--

#
# 01. Create subscription with POSIX regex in idPattern
# 02. Create entity matching regex: foo:text
# 03. Create entity matching regex: foooo
# 04. Create entity matching regex: Fovoid
# 05. Create entity NOT matching regex: WeatherObserved:foo
# 06. Create entity NOT matching regex: WeatherObservedfoo
# 07. Create entity NOT matching regex: WeatherObserved
# 08. Dump accumulator and see three notifications
#

echo "01. Create subscription with POSIX regex in idPattern"
echo "====================================================="
payload='{
  "subject": {
    "entities": [
      {
        "idPattern": "^(([^\nW].{14}|.[^\ne].{13}|.{2}[^\na].{12}|.{3}[^\nt].{11}|.{4}[^\nh].{10}|.{5}[^\ne].{9}|.{6}[^\nr].{8}|.{7}[^\nO].{7}|.{8}[^\nb].{6}|.{9}[^\ns].{5}|.{10}[^\ne].{4}|.{11}[^\nr].{3}|.{12}[^\ntv].{2}|.{13}[^\ne].|.{14}[^\nd]).*|.{0,14})$",
        "type": "T"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://127.0.0.1:'${LISTENER_PORT}'/notify"
    }
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "02. Create entity matching regex: foo:text"
echo "=========================================="
payload='{
  "id": "foo:text",
  "type": "T",
  "A": {
    "value": 1,
    "type": "Number"
  }
}'
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "${payload}"
echo
echo


echo "03. Create entity matching regex: foooo"
echo "======================================="
payload='{
  "id": "foooo",
  "type": "T",
  "A": {
    "value": 1,
    "type": "Number"
  }
}'
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "${payload}"
echo
echo


echo "04. Create entity matching regex: Fovoid"
echo "========================================"
payload='{
  "id": "Fovoid",
  "type": "T",
  "A": {
    "value": 1,
    "type": "Number"
  }
}'
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "${payload}"
echo
echo


echo "05. Create entity NOT matching regex: WeatherObserved:foo"
echo "========================================================="
payload='{
  "id": "WeatherObserved:foo",
  "type": "T",
  "A": {
    "value": 1,
    "type": "Number"
  }
}'
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "${payload}"
echo
echo


echo "06. Create entity NOT matching regex: WeatherObservedfoo"
echo "========================================================"
payload='{
  "id": "WeatherObservedfoo",
  "type": "T",
  "A": {
    "value": 1,
    "type": "Number"
  }
}'
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "${payload}"
echo
echo


echo "07. Create entity NOT matching regex: WeatherObserved"
echo "====================================================="
payload='{
  "id": "WeatherObserved",
  "type": "T",
  "A": {
    "value": 1,
    "type": "Number"
  }
}'
orionCurl --url /v2/entities?options=upsert,forcedUpdate --payload "${payload}"
echo
echo


echo "08. Dump accumulator and see three notifications"
echo "================================================"
accumulatorDump
echo
echo


--REGEXPECT--
01. Create subscription with POSIX regex in idPattern
=====================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. Create entity matching regex: foo:text
==========================================
HTTP/1.1 204 No Content
Location: /v2/entities/foo:text?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. Create entity matching regex: foooo
=======================================
HTTP/1.1 204 No Content
Location: /v2/entities/foooo?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



04. Create entity matching regex: Fovoid
========================================
HTTP/1.1 204 No Content
Location: /v2/entities/Fovoid?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



05. Create entity NOT matching regex: WeatherObserved:foo
=========================================================
HTTP/1.1 204 No Content
Location: /v2/entities/WeatherObserved:foo?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



06. Create entity NOT matching regex: WeatherObservedfoo
========================================================
HTTP/1.1 204 No Content
Location: /v2/entities/WeatherObservedfoo?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



07. Create entity NOT matching regex: WeatherObserved
=====================================================
HTTP/1.1 204 No Content
Location: /v2/entities/WeatherObserved?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



08. Dump accumulator and see three notifications
================================================
POST http://127.0.0.1:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 129
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: 127.0.0.1:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "Number",
                "value": 1
            },
            "id": "foo:text",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================
POST http://127.0.0.1:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 126
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: 127.0.0.1:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "Number",
                "value": 1
            },
            "id": "foooo",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================
POST http://127.0.0.1:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 127
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: 127.0.0.1:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "A": {
                "metadata": {},
                "type": "Number",
                "value": 1
            },
            "id": "Fovoid",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================


--TEARDOWN--
brokerStop CB
dbDrop CB
accumulatorStop
