# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Restrict length in name and type

--SHELL-INIT--
dbInit CB
brokerStart CB 0

--SHELL--

VERY_LONG=$(printf 'a%.0s' {1..257})

#
# 01. POST /v2/entities entityt with long id
# 02. GET /v2/entities
# 03. POST /v2/entities entity with long type
# 04. GET /v2/entities
# 05. POST /v2/entities attr with long name
# 06. GET /v2/entities
# 07. POST /v2/entities attr with long type
# 08. GET /v2/entities
# 09. POST /v2/entities meta with long name
# 10. GET /v2/entities
# 11. POST /v2/entities meta with long type
# 12. GET /v2/entities
#

echo "01. POST /v2/entities entity with long id"
echo "========================================="
payload='{
  "id": "VERY_LONG",
  "type": "T1",
  "A": {
    "value": "06",
    "type":  "AT",
    "metadata": {
      "m1": { "value": "m1"  },
      "m2": { "value": 2     },
      "m3": { "value": false }
    }
  }
}'
payload=${payload/VERY_LONG/$VERY_LONG}
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "02. GET /v2/entities/E1"
echo "======================="
orionCurl --url /v2/entities/E1
echo
echo


echo "03. /v2/entities entity with long type"
echo "======================================"
payload='{
  "id": "E1",
  "type": "VERY_LONG",
  "A": {
    "value": "06",
    "type":  "AT",
    "metadata": {
      "m1": { "value": "m1"  },
      "m2": { "value": 2     },
      "m3": { "value": false }
    }
  }
}'
payload=${payload/VERY_LONG/$VERY_LONG}
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "04. GET /v2/entities/E1"
echo "======================="
orionCurl --url /v2/entities/E1
echo
echo


echo "05. POST /v2/entities attr with long name"
echo "========================================="
payload='{
  "id": "E1",
  "type": "T1",
  "VERY_LONG": {
    "value": "06",
    "type":  "AT1",
    "metadata": {
      "m1": { "value": "m1"  },
      "m2": { "value": 2     },
      "m3": { "value": false }
    }
  }
}'
payload=${payload/VERY_LONG/$VERY_LONG}
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "06. GET /v2/entities/E1"
echo "======================="
orionCurl --url /v2/entities/E1
echo
echo


echo "07. POST /v2/entities attr with long type"
echo "========================================="
payload='{
  "id": "E1",
  "type": "T1",
  "A1": {
    "value": "06",
    "type":  "VERY_LONG",
    "metadata": {
      "m1": { "value": "m1"  },
      "m2": { "value": 2     },
      "m3": { "value": false }
    }
  }
}'
payload=${payload/VERY_LONG/$VERY_LONG}
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "08. GET /v2/entities/E1"
echo "======================="
orionCurl --url /v2/entities/E1
echo
echo


echo "09. POST /v2/entities meta with long name"
echo "========================================="
payload='
{
    "attr01": {
        "metadata": {
            "VERY_LONG": {
                "value": "m1"
            }
        },
        "type": "AT",
        "value": "06"
    },
    "id": "E1",
    "type": "T1"
}'
payload=${payload/VERY_LONG/$VERY_LONG}
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "10. GET /v2/entities/E1"
echo "======================="
orionCurl --url /v2/entities/E1
echo
echo


echo "11. POST /v2/entities meta with long type"
echo "========================================="
payload='
{
    "attr01": {
        "metadata": {
            "m1": {
                "type": "VERY_LONG",
                "value": "m1"
            }
        },
        "type": "AT",
        "value": "06"
    },
    "id": "E1",
    "type": "T1"
}'
payload=${payload/VERY_LONG/$VERY_LONG}
orionCurl --url /v2/entities --payload "$payload"
echo
echo



--REGEXPECT--
01. POST /v2/entities entity with long id
=========================================
HTTP/1.1 400 Bad Request
Content-Length: 87
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "entity id length: 257, max length supported: 256",
    "error": "BadRequest"
}


02. GET /v2/entities/E1
=======================
HTTP/1.1 404 Not Found
Content-Length: 95
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "The requested entity has not been found. Check type and id",
    "error": "NotFound"
}


03. /v2/entities entity with long type
======================================
HTTP/1.1 400 Bad Request
Content-Length: 89
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "entity type length: 257, max length supported: 256",
    "error": "BadRequest"
}


04. GET /v2/entities/E1
=======================
HTTP/1.1 404 Not Found
Content-Length: 95
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "The requested entity has not been found. Check type and id",
    "error": "NotFound"
}


05. POST /v2/entities attr with long name
=========================================
HTTP/1.1 400 Bad Request
Content-Length: 92
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "attribute name length: 257, max length supported: 256",
    "error": "BadRequest"
}


06. GET /v2/entities/E1
=======================
HTTP/1.1 404 Not Found
Content-Length: 95
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "The requested entity has not been found. Check type and id",
    "error": "NotFound"
}


07. POST /v2/entities attr with long type
=========================================
HTTP/1.1 400 Bad Request
Content-Length: 92
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "attribute type length: 257, max length supported: 256",
    "error": "BadRequest"
}


08. GET /v2/entities/E1
=======================
HTTP/1.1 404 Not Found
Content-Length: 95
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "The requested entity has not been found. Check type and id",
    "error": "NotFound"
}


09. POST /v2/entities meta with long name
=========================================
HTTP/1.1 400 Bad Request
Content-Length: 91
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "metadata name length: 257, max length supported: 256",
    "error": "BadRequest"
}


10. GET /v2/entities/E1
=======================
HTTP/1.1 404 Not Found
Content-Length: 95
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "The requested entity has not been found. Check type and id",
    "error": "NotFound"
}


11. POST /v2/entities meta with long type
=========================================
HTTP/1.1 400 Bad Request
Content-Length: 91
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "metadata type length: 257, max length supported: 256",
    "error": "BadRequest"
}


--TEARDOWN--
brokerStop CB
dbDrop CB
