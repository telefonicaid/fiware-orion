# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
XML Parse Post NotifyContextAvailability
--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--
echo "1: ***********************************"
url="/v1/registry/notifyContextAvailability"
payload='<?xml version="1.0" encoding="UTF-8"?>
<notifyContextAvailabilityRequest>
  <subscriptionId>012345678901234567890123</subscriptionId>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="Room" isPattern="false">
            <id>ConferenceRoom</id>           
          </entityId>
          <entityId type="Room" isPattern="false">
            <id>OfficeRoom</id>           
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>temperature</name>
            <type>degree</type>
            <isDomain>false</isDomain>
            <metadata>
              <contextMetadata>
                <name>ID</name>
                <type>string</type>
                <value>1110</value>
              </contextMetadata>              
            </metadata>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <registrationMetadata>
          <contextMetadata>
            <name>ID</name>
            <type>string</type>
            <value>2212</value>
          </contextMetadata>          
        </registrationMetadata>
        <providingApplication>http://192.168.100.1:70/application
        </providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</notifyContextAvailabilityRequest>'
orionCurl --url "$url" --payload "${payload}"

echo "2: ***********************************"
url="/v1/registry/notifyContextAvailability"
payload='<?xml version="1.0" encoding="UTF-8"?>
<notifyContextAvailabilityRequest>
  <subscriptionId>01234567890123456789012</subscriptionId>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="Room" isPattern="false">
            <id>ConferenceRoom</id>           
          </entityId>
          <entityId type="Room" isPattern="false">
            <id>OfficeRoom</id>           
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>temperature</name>
            <type>degree</type>
            <isDomain>false</isDomain>
            <metadata>
              <contextMetadata>
                <name>ID</name>
                <type>string</type>
                <value>1110</value>
              </contextMetadata>              
            </metadata>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <registrationMetadata>
          <contextMetadata>
            <name>ID</name>
            <type>string</type>
            <value>2212</value>
          </contextMetadata>          
        </registrationMetadata>
        <providingApplication>http://192.168.100.1:70/application
        </providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</notifyContextAvailabilityRequest>'
orionCurl --url "$url" --payload "${payload}"

echo "3: ***********************************"
--REGEXPECT--
1: ***********************************
HTTP/1.1 200 OK
Content-Length: 165
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<notifyContextAvailabilityResponse>
  <responseCode>
    <code>200</code>
    <reasonPhrase>OK</reasonPhrase>
  </responseCode>
</notifyContextAvailabilityResponse>
2: ***********************************
HTTP/1.1 200 OK
Content-Length: 228
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<notifyContextAvailabilityResponse>
  <responseCode>
    <code>400</code>
    <reasonPhrase>Bad Request</reasonPhrase>
    <details>bad length - 24 chars expected</details>
  </responseCode>
</notifyContextAvailabilityResponse>
3: ***********************************
--TEARDOWN--
brokerStop CB
