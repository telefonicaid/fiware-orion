# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

#
# What to test:
#
# One convenience operation for each of the 4 special types used in conv ops:
#  o AppendContextElementResponse    (POST /v1/contextEntities/*/attributes)
#  o ContextElementResponse          (GET /v1/contextEntities/*)
#  o UpdateContextElementResponse    (PUT /v1/contextEntities/*)
#  o ContextAttributeResponse        (GET /v1/contextEntities/*/attributes/*)
#

--NAME--
ConvOps with attributes as JSON objects

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--
echo "1. Create E1/A1 using conv op POST /v1/contextEntities/E1/attributes"
url="/v1/contextEntities/E1/attributes"
payload='{
    "attributes": [
        {
            "name": "A1",
            "type": "Attr",
            "value": "1"
        }
    ]
}'
orionCurl --url "$url" --payload "$payload" --urlParams attributeFormat=object
echo
echo


echo "2. query E1/A1 using conv op GET /v1/contextEntities/E1 (with attributeFormat=object)"
url="/v1/contextEntities/E1"
orionCurl --url "$url" --urlParams attributeFormat=object
echo
echo

echo "3. query E1/A1 using conv op GET /v1/contextEntities/E1 (without attributeFormat=object)"
orionCurl --url "$url"
echo
echo


echo "4. Update E1/A1 using conv op PUT /v1/contextEntities/E1/attributes"
url="/v1/contextEntities/E1"
payload='{
    "attributes": [
        {
            "name": "A1",
            "type": "Attr",
            "value": "99"
        }
    ]
}'
orionCurl --url "$url" --payload "$payload" --urlParams attributeFormat=object -X PUT
echo
echo


echo "5. query E1/A1 using conv op GET /v1/contextEntities/E1/attributes/A1 (with attributeFormat=object)"
url="/v1/contextEntities/E1/attributes/A1"
orionCurl --url "$url" --urlParams attributeFormat=object
echo
echo


echo "6. query E1/A1 using conv op GET /v1/contextEntities/E1/attributes/A1 (without attributeFormat=object)"
url="/v1/contextEntities/E1/attributes/A1"
orionCurl --url "$url"
echo
echo


--REGEXPECT--
1. Create E1/A1 using conv op POST /v1/contextEntities/E1/attributes
HTTP/1.1 200 OK
Content-Length: 159
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": {
                "A1": {
                    "type": "Attr",
                    "value": ""
                }
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "E1",
    "isPattern": "false",
    "type": ""
}


2. query E1/A1 using conv op GET /v1/contextEntities/E1 (with attributeFormat=object)
HTTP/1.1 200 OK
Content-Length: 156
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": {
            "A1": {
                "type": "Attr",
                "value": "1"
            }
        },
        "id": "E1",
        "isPattern": "false",
        "type": ""
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


3. query E1/A1 using conv op GET /v1/contextEntities/E1 (without attributeFormat=object)
HTTP/1.1 200 OK
Content-Length: 163
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "A1",
                "type": "Attr",
                "value": "1"
            }
        ],
        "id": "E1",
        "isPattern": "false",
        "type": ""
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


4. Update E1/A1 using conv op PUT /v1/contextEntities/E1/attributes
HTTP/1.1 200 OK
Content-Length: 119
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": {
                "A1": {
                    "type": "Attr",
                    "value": ""
                }
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


5. query E1/A1 using conv op GET /v1/contextEntities/E1/attributes/A1 (with attributeFormat=object)
HTTP/1.1 200 OK
Content-Length: 98
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": {
        "A1": {
            "type": "Attr",
            "value": "99"
        }
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


6. query E1/A1 using conv op GET /v1/contextEntities/E1/attributes/A1 (without attributeFormat=object)
HTTP/1.1 200 OK
Content-Length: 105
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "name": "A1",
            "type": "Attr",
            "value": "99"
        }
    ],
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
