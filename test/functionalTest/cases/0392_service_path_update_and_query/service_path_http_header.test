# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ServicePath HTTP Headers

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--
payload='{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "OfficeRoom"
    }
  ]
}'
echo "+++++ 0. OK"
orionCurl --url /v1/queryContext --payload "$payload" --servicePath /h0123456789012345678901234567890123456789012345678/h1/h2/h3/h4/h5/h6/h7/h8/h9
echo


echo "+++++ 1. Path-Component more than 50 chars"
orionCurl --url /v1/queryContext --payload "$payload" --servicePath /h01234567890123456789012345678901234567890123456789
echo


echo "+++++ 2. Too many levels in path"
orionCurl --url /v1/queryContext --payload "$payload" --servicePath /h1/h2/h3/h4/h5/h6/h7/h8/h9/h10/h11
echo


echo "+++++ 3: bad char in component"
orionCurl --url /v1/queryContext --payload "$payload" --servicePath '/h-1/h2/h3/h4/h5/h6/h7/h8/h9/h9'
echo


echo "+++++ 4: service path must start with a '/'"
orionCurl --url /v1/queryContext --payload "$payload" --servicePath 'X'
echo


echo "+++++ 5: four service paths"
orionCurl --url /v1/queryContext --payload "$payload" --servicePath '/home/kz/1, /home/kz/2, /home/kz/3, /home/kz/4'
echo


#
# When started under valgrind, a "GET /version" is issued to make sure the broker is running, and this gives us ONE EXTRA
# Request found in the log-file. The Service Path is '/#' for this GET /version request and it is removed from the diff by
# the final grep -v '/#', to make this functional test work both as normal functest and under the valgrind suite.
#
echo "+++++ 6: service paths from log file"
grep servicePathSplit /tmp/contextBroker.log | awk -F\| '{ print $10 }' | awk -F= '{ print $2 }' | grep -v '/#'
echo


echo "+++++ 7: eleven service paths"
orionCurl --url /v1/queryContext --payload "$payload" --servicePath '/home/kz/1, /home/kz/2, /home/kz/3, /home/kz/4, /home/kz/5, /home/kz/6, /home/kz/7, /home/kz/88, /home/kz/9, /home/kz/10, /home/kz/11'
echo

--REGEXPECT--
+++++ 0. OK
HTTP/1.1 200 OK
Content-Length: 70
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404",
        "reasonPhrase": "No context element found"
    }
}

+++++ 1. Path-Component more than 50 chars
HTTP/1.1 200 OK
Content-Length: 109
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "orionError": {
        "code": "400",
        "details": "component-name too long in ServicePath",
        "reasonPhrase": "Bad Request"
    }
}

+++++ 2. Too many levels in path
HTTP/1.1 200 OK
Content-Length: 105
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "orionError": {
        "code": "400",
        "details": "too many components in ServicePath",
        "reasonPhrase": "Bad Request"
    }
}

+++++ 3: bad char in component
HTTP/1.1 200 OK
Content-Length: 127
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "orionError": {
        "code": "400",
        "details": "a component of ServicePath contains an illegal character",
        "reasonPhrase": "Bad Request"
    }
}

+++++ 4: service path must start with a '/'
HTTP/1.1 200 OK
Content-Length: 143
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "orionError": {
        "code": "400",
        "details": "Only /absolute/ Service Paths allowed [a service path must begin with /]",
        "reasonPhrase": "Bad Request"
    }
}

+++++ 5: four service paths
HTTP/1.1 200 OK
Content-Length: 70
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404",
        "reasonPhrase": "No context element found"
    }
}

+++++ 6: service paths from log file
Service Path 0: '/h0123456789012345678901234567890123456789012345678/h1/h2/h3/h4/h5/h6/h7/h8/h9'
Service Path 0: '/h01234567890123456789012345678901234567890123456789'
Service Path 0: '/h1/h2/h3/h4/h5/h6/h7/h8/h9/h10/h11'
Service Path 0: '/h-1/h2/h3/h4/h5/h6/h7/h8/h9/h9'
Service Path 0: 'X'
Service Path 0: '/home/kz/1'
Service Path 1: '/home/kz/2'
Service Path 2: '/home/kz/3'
Service Path 3: '/home/kz/4'

+++++ 7: eleven service paths
HTTP/1.1 200 OK
Content-Length: 137
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "orionError": {
        "code": "400",
        "details": "too many service paths - a maximum of ten service paths is allowed",
        "reasonPhrase": "Bad Request"
    }
}

--TEARDOWN--
brokerStop CB
dbDrop CB
