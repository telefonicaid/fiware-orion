# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
POST Subscriptions V2 Errors

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. POST /v2/subscriptions (without id/idpattern)
# 02. POST /v2/subscriptions (subject entities not an array)
# 03. POST /v2/subscriptions (both id and idPattern)
# 04. POST /v2/subscriptions (not an object)
# 05. POST /v2/subscriptions (empty body)
# 06. POST /v2/subscriptions (missing subject)
# 07. POST /v2/subscriptions (missing notification)
# 08. POST /v2/subscriptions (empty subject condition)
# 09. POST /v2/subscriptions (malformed URL)


echo "01. POST /v2/subscriptions (without id/idpattern)"
echo "================================================="
payload='
{
    "subject": {
        "entities": [
            {

            }
        ],
        "condition": {
            "attrs": [ ],
            "expression": {
               "q": "temperature>40"
            }
         }
    },
    "notification": {
        "http":{"url": "http://localhost:1234"},
        "attrs": ["temperature", "humidity"]
    },
    "expires": "2050-04-05T14:00:00.00Z",
    "throttling": 5
}
'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "02. POST /v2/subscriptions (subject entities not an array)"
echo "=========================================================="
payload='
{
    "subject": {
        "entities": "none",
        "condition": {
            "attrs": [ ],
            "expression": {
               "q": "temperature>40"
            }
         }
    },
    "notification": {
        "http":{"url": "http://localhost:1234"},
        "attrs": ["temperature", "humidity"]
    },
    "expires": "2050-04-05T14:00:00.00Z"
}
'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "03. POST /v2/subscriptions (both id and idPattern)"
echo "=================================================="
payload='
{
    "subject": {
        "entities": [
            {
                "id": "one",
                "idPattern": "two"
            }
        ],
        "condition": {
            "attrs": [ "temperature" ],
            "expression": {
               "q": "temperature>40"
            }
         }
    },
    "notification": {
        "http":{"url": "http://localhost:1234"},
        "attrs": ["temperature", "humidity"]
    },
    "expires": "2050-04-05T14:00:00.00Z"
}
'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo

echo "04. POST /v2/subscriptions (not an object)"
echo "=========================================="
payload='"something"'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "05. POST /v2/subscriptions (empty body)"
echo "======================================="
orionCurl --url /v2/subscriptions -X POST
echo
echo

echo "06. POST /v2/subscriptions (missing subject)"
echo "============================================"
payload='
{
    "notification": {
        "http":{"url": "http://localhost:1234"},
        "attrs": ["temperature", "humidity"],
        "throttling": 5
    },
    "expires": "2050-04-05T14:00:00.00Z"
}
'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "07. POST /v2/subscriptions (missing notification)"
echo "================================================="
payload='
{
    "subject": {
        "entities": [
            {
               "idPattern": ".*",
               "type": "Room"
            }
        ],
        "condition": {
            "attrs": [ "temperature" ],
            "expression": {
               "q": "temperature>40"
            }
         }
    },
    "expires": "2050-04-05T14:00:00.00Z"
}
'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "08. POST /v2/subscriptions (empty subject condition)"
echo "===================================================="
payload='
{
    "subject": {
        "entities": [
            {
                "idPattern": ".*",
                "type": "Room"
            }
        ],
        "condition": {}
    },
    "notification": {
        "http":{"url": "http://localhost:1234"},
        "attrs": ["temperature", "humidity"],
        "throttling": 5
    },
    "expires": "2050-04-05T14:00:00.00Z"
}
'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "09. POST /v2/subscriptions (malformed URL)"
echo "=========================================="
payload='
{
    "subject": {
        "entities": [
            {
                 "idPattern": ".*",
                 "type": "Room"
            }
        ],
        "condition": {
            "attrs": [ "temperature" ],
            "expression": {
               "q": "temperature>40",
               "geometry": "point",
               "coords": "-40.4,-3.5",
               "georel": "near;minDistance:5000"
            }
         }
    },
    "notification": {
        "http":{"url": "localhost 1234"},
        "attrs": ["temperature", "humidity"]
    },
    "expires": "2050-04-05T14:00:00.00Z",
    "throttling": 5
}

'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


--REGEXPECT--
01. POST /v2/subscriptions (without id/idpattern)
=================================================
HTTP/1.1 400 Bad Request
Content-Length: 96
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "/entities/ vector item does not have /id/ nor /idPattern/",
    "error": "BadRequest"
}


02. POST /v2/subscriptions (subject entities not an array)
==========================================================
HTTP/1.1 400 Bad Request
Content-Length: 65
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "/entities/ is not an array",
    "error": "BadRequest"
}


03. POST /v2/subscriptions (both id and idPattern)
==================================================
HTTP/1.1 400 Bad Request
Content-Length: 91
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "/entities/ vector item has both /id/ and /idPattern/",
    "error": "BadRequest"
}


04. POST /v2/subscriptions (not an object)
==========================================
HTTP/1.1 400 Bad Request
Content-Length: 75
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "Errors found in incoming JSON buffer",
    "error": "ParseError"
}


05. POST /v2/subscriptions (empty body)
=======================================
HTTP/1.1 411 Length Required
Content-Length: 98
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "Zero/No Content-Length in PUT/POST/PATCH request",
    "error": "ContentLengthRequired"
}


06. POST /v2/subscriptions (missing subject)
============================================
HTTP/1.1 400 Bad Request
Content-Length: 76
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "no subject for subscription specified",
    "error": "BadRequest"
}


07. POST /v2/subscriptions (missing notification)
=================================================
HTTP/1.1 400 Bad Request
Content-Length: 81
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "no notification for subscription specified",
    "error": "BadRequest"
}


08. POST /v2/subscriptions (empty subject condition)
====================================================
HTTP/1.1 400 Bad Request
Content-Length: 57
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "condition is empty",
    "error": "BadRequest"
}


09. POST /v2/subscriptions (malformed URL)
==========================================
HTTP/1.1 400 Bad Request
Content-Length: 75
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "Invalid URL parsing notification url",
    "error": "BadRequest"
}


--TEARDOWN--
brokerStop CB
dbDrop CB

