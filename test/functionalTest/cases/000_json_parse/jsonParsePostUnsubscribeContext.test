# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
JSON Parse Post UnsubscribeContext
--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--
echo "1: ***********************************"
url="/v1/unsubscribeContext"
payload='{
  "subscriptionId": "012345678901234567890123"
}'
orionCurl --url ${url} --payload "${payload}" --json

echo "2: ***********************************"
url="/v1/subscribeContext"
payload='{
  "entities": [
    {
      "type": "Room",
      "isPattern": "false",
      "id": "ConferenceRoom"
    },
    {
      "type": "Room",
      "isPattern": "false",
      "id": "OfficeRoom"
    }
  ],
  "attributes": [
    "temperature",
    "occupancy",
    "lightstatus"
  ],
  "reference": "127.0.0.1",
  "duration": "P5Y",
  "restriction": {
    "attributeExpression": "testRestriction",
    "scopes" : [
      {
        "type" : "t1",
        "value" : "v1"
      },
      {
        "type" : "t2",
        "value" : "v2"
      }
    ]
  },
  "notifyConditions": [
    {
      "type": "ONCHANGE",
      "condValues": [
        "CondValue1",
        "CondValue2"
      ]
      ,
      "restriction": "restriction"
    }
  ],
  "throttling": "P5Y"
}'
orionCurl --url ${url} --payload "${payload}" --json

subscriptionId=$(echo "$_response" | grep subscriptionId | awk -F\" '{ print $4 }')

echo "3: ***********************************"
url="/v1/unsubscribeContext"
payload='{
  "subscriptionId": "'${subscriptionId}'"
}'
orionCurl --url ${url} --payload "${payload}" --json

echo "4: ***********************************"
--REGEXPECT--
1: ***********************************
HTTP/1.1 200 OK
Content-Length: 206
Content-Type: application/json
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404",
        "details": "subscriptionId: /012345678901234567890123/",
        "reasonPhrase": "No context element found"
    },
    "subscriptionId": "012345678901234567890123"
}
2: ***********************************
HTTP/1.1 200 OK
Content-Length: 134
Content-Type: application/json
Date: REGEX(.*)

{
    "subscribeResponse": {
        "duration": "P5Y",
        "subscriptionId": "REGEX([0-9a-f]{24})",
        "throttling": "P5Y"
    }
}
3: ***********************************
HTTP/1.1 200 OK
Content-Length: 122
Content-Type: application/json
Date: REGEX(.*)

{
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    },
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
4: ***********************************
--TEARDOWN--
brokerStop CB
