z# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ConvOp postAttributeValueInstanceWithTypeAndId: POST /v1/contextEntities/type/{entity::type}/id/{entity::id}/attributes/{attribute::name}/{metaID}

--SHELL-INIT--
dbInit CB
brokerStart CB 0

--SHELL--

#
# 01. POST /v1/contextEntities/type/T1/id/E1/attributes/A1/M1?entity::type=T2 and see it fail
# 02. POST /v1/contextEntities/type/T1/id/E1/attributes/A1/M1, with metaID 'M2' in payload, see it fail
# 03. POST /v1/contextEntities/type/T1/id/E1/attributes/A1/M1 and see it work
# 04. POST /v1/contextEntities/type/T1/id/E1/attributes/A2/M1, with metaID 'M1' in payload and see it work
# 05. Query E1/T1, see A1 and A2
#

echo "01. POST /v1/contextEntities/type/T1/id/E1/attributes/A1/M1?entity::type=T2 and see it fail"
echo "==========================================================================================="
payload='{
  "value": 1
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/M1?entity::type=T2 --payload "$payload"
echo
echo


echo "02. POST /v1/contextEntities/type/T1/id/E1/attributes/A1/M1, with metaID 'M2' in payload, see it fail"
echo "====================================================================================================="
payload='{
  "value": 2,
  "metadatas": [
    {
      "name": "ID",
      "type": "string",
      "value": "M2"
    }
  ]
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/M1 --payload "$payload"
echo
echo


echo "03. POST /v1/contextEntities/type/T1/id/E1/attributes/A1/M1 and see it work"
echo "============================================================================"
payload='{
  "value": 3
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/M1 --payload "$payload"
echo
echo


echo "04. POST /v1/contextEntities/type/T1/id/E1/attributes/A2/M1, with metaID 'M1' in payload and see it work"
echo "========================================================================================================"
payload='{
  "value": 4,
  "metadatas": [
    {
      "name": "ID",
      "type": "string",
      "value": "M1"
    }
  ]
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A2/M1 --payload "$payload"
echo
echo


echo "05. Query E1/T1, see A1 and A2"
echo "=============================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ]
}'
orionCurl --url /v1/queryContext --payload "$payload"
echo
echo


--REGEXPECT--
01. POST /v1/contextEntities/type/T1/id/E1/attributes/A1/M1?entity::type=T2 and see it fail
===========================================================================================
HTTP/1.1 200 OK
Content-Length: 89
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "400", 
    "details": "non-matching entity::types in URL", 
    "reasonPhrase": "Bad Request"
}


02. POST /v1/contextEntities/type/T1/id/E1/attributes/A1/M1, with metaID 'M2' in payload, see it fail
=====================================================================================================
HTTP/1.1 200 OK
Content-Length: 110
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "400", 
    "details": "unmatching metadata ID value URI/payload: /M1/ vs /M2/", 
    "reasonPhrase": "Bad Request"
}


03. POST /v1/contextEntities/type/T1/id/E1/attributes/A1/M1 and see it work
============================================================================
HTTP/1.1 200 OK
Content-Length: 34
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "200", 
    "reasonPhrase": "OK"
}


04. POST /v1/contextEntities/type/T1/id/E1/attributes/A2/M1, with metaID 'M1' in payload and see it work
========================================================================================================
HTTP/1.1 200 OK
Content-Length: 34
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "200", 
    "reasonPhrase": "OK"
}


05. Query E1/T1, see A1 and A2
==============================
HTTP/1.1 200 OK
Content-Length: 334
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "metadatas": [
                            {
                                "name": "ID", 
                                "type": "string", 
                                "value": "M1"
                            }
                        ], 
                        "name": "A1", 
                        "type": "", 
                        "value": "3"
                    }, 
                    {
                        "metadatas": [
                            {
                                "name": "ID", 
                                "type": "string", 
                                "value": "M1"
                            }
                        ], 
                        "name": "A2", 
                        "type": "", 
                        "value": "4"
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


--TEARDOWN--
brokerStop CB
dbDrop CB
