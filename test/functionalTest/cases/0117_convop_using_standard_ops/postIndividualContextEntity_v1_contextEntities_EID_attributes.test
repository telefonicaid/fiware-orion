# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ConvOp postIndividualContextEntityAttributes: POST /v1/contextEntities/{entityId::id}/attributes

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. POST /v1/contextEntities/E1/attributes
# 02. Query the entity 'E1' that was just created
# 03. Query the entity 'E1' with URI-param attributesFormat=object
# 04. POST /v1/contextEntities/E2/attributes?entity::type=E (id='E2', type='F' in payload) and see it fail
# 05. POST /v1/contextEntities/E2/attributes?entity::type=E (id='E3', type='E' in payload) and see it fail
# 06. POST /v1/contextEntities/E2/attributes?entity::type=E (isPattern='true' in payload) and see it fail
# 07. POST /v1/contextEntities/E2/attributes?entity::type=E (id='E2', type='E' in payload) and see it work
# 08. Query the entity 'E2' that was just created
# 09. Change attribute 'A' of the entity 'E2'
# 10. Query the entity 'E2' that was just modified
#


echo "01. POST /v1/contextEntities/E1/attributes"
echo "=========================================="
payload='{
    "id": "E1",
    "type": "E",
    "isPattern": "false",
    "attributes": [
        {
            "name": "A1",
            "type": "AT",
            "value": "10"
        }
    ]
}'
orionCurl --url /v1/contextEntities/E1/attributes --payload "${payload}"
echo
echo


echo "02. Query the entity 'E1' that was just created"
echo "==============================================="
payload='{
  "entities": [
    {
      "type": "E",
      "isPattern": "false",
      "id": "E1"
    }
  ]
}'
orionCurl --url /v1/queryContext --payload "${payload}"
echo
echo


echo "03. Query the entity 'E1' with URI-param attributesFormat=object"
echo "================================================================"
payload='{
  "entities": [
    {
      "type": "E",
      "isPattern": "false",
      "id": "E1"
    }
  ]
}'
orionCurl --url /v1/queryContext --payload "${payload}" --urlParams attributesFormat=object
echo
echo


echo "04. POST /v1/contextEntities/E2/attributes?entity::type=E (id='E2', type='F' in payload) and see it fail"
echo "========================================================================================================"
payload='{
    "id": "E2",
    "type": "F",
    "isPattern": "false",
    "attributes": [
        {
            "name": "A1",
            "type": "AT",
            "value": "10"
        }
    ]
}'
orionCurl --url /v1/contextEntities/E2/attributes?entity::type=E --payload "${payload}"
echo
echo


echo "05. POST /v1/contextEntities/E2/attributes?entity::type=E (id='E3', type='E' in payload) and see it fail"
echo "========================================================================================================"
payload='{
    "id": "E3",
    "type": "E",
    "isPattern": "false",
    "attributes": [
        {
            "name": "A1",
            "type": "AT",
            "value": "10"
        }
    ]
}'
orionCurl --url /v1/contextEntities/E2/attributes?entity::type=E --payload "${payload}"
echo
echo


echo "06. POST /v1/contextEntities/E2/attributes?entity::type=E (isPattern='true' in payload) and see it fail"
echo "======================================================================================================="
payload='{
    "id": "E2",
    "type": "E",
    "isPattern": "true",
    "attributes": [
        {
            "name": "A1",
            "type": "AT",
            "value": "10"
        }
    ]
}'
orionCurl --url /v1/contextEntities/E2/attributes?entity::type=E --payload "${payload}"
echo
echo


echo "07. POST /v1/contextEntities/E2/attributes?entity::type=E (id='E2', type='E' in payload) and see it work"
echo "========================================================================================================"
payload='{
    "id": "E2",
    "type": "E",
    "isPattern": "false",
    "attributes": [
        {
            "name": "A1",
            "type": "AT",
            "value": "10"
        }
    ]
}'
orionCurl --url /v1/contextEntities/E2/attributes?entity::type=E --payload "${payload}"
echo
echo


echo "08. Query the entity 'E2' that was just created"
echo "==============================================="
payload='{
  "entities": [
    {
      "type": "E",
      "isPattern": "false",
      "id": "E2"
    }
  ]
}'
orionCurl --url /v1/queryContext --payload "${payload}"
echo
echo



echo "09. Change attribute 'A' of the entity 'E2'"
echo "==========================================="
payload='{
    "id": "E2",
    "type": "E",
    "isPattern": "false",
    "attributes": [
        {
            "name": "A1",
            "type": "AT",
            "value": "200"
        }
    ]
}'
orionCurl --url /v1/contextEntities/E2/attributes?entity::type=E --payload "${payload}"
echo
echo


echo "10. Query the entity 'E2' that was just modified"
echo "================================================"
payload='{
  "entities": [
    {
      "type": "E",
      "isPattern": "false",
      "id": "E2"
    }
  ]
}'
orionCurl --url /v1/queryContext --payload "${payload}"
echo
echo


--REGEXPECT--
01. POST /v1/contextEntities/E1/attributes
==========================================
HTTP/1.1 200 OK
Content-Length: 165
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "A1",
                    "type": "AT",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "E1",
    "isPattern": "false",
    "type": "E"
}


02. Query the entity 'E1' that was just created
===============================================
HTTP/1.1 200 OK
Content-Length: 186
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "AT",
                        "value": "10"
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "E"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. Query the entity 'E1' with URI-param attributesFormat=object
================================================================
HTTP/1.1 200 OK
Content-Length: 179
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": {
                    "A1": {
                        "type": "AT",
                        "value": "10"
                    }
                },
                "id": "E1",
                "isPattern": "false",
                "type": "E"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


04. POST /v1/contextEntities/E2/attributes?entity::type=E (id='E2', type='F' in payload) and see it fail
========================================================================================================
HTTP/1.1 200 OK
Content-Length: 111
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "400",
        "details": "entityId::type differs in URL and payload",
        "reasonPhrase": "Bad Request"
    }
}


05. POST /v1/contextEntities/E2/attributes?entity::type=E (id='E3', type='E' in payload) and see it fail
========================================================================================================
HTTP/1.1 200 OK
Content-Length: 109
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "400",
        "details": "entityId::id differs in URL and payload",
        "reasonPhrase": "Bad Request"
    }
}


06. POST /v1/contextEntities/E2/attributes?entity::type=E (isPattern='true' in payload) and see it fail
=======================================================================================================
HTTP/1.1 200 OK
Content-Length: 140
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "400",
        "details": "entityId::isPattern set to true in contextUpdate convenience operation",
        "reasonPhrase": "Bad Request"
    }
}


07. POST /v1/contextEntities/E2/attributes?entity::type=E (id='E2', type='E' in payload) and see it work
========================================================================================================
HTTP/1.1 200 OK
Content-Length: 165
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "A1",
                    "type": "AT",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "E2",
    "isPattern": "false",
    "type": "E"
}


08. Query the entity 'E2' that was just created
===============================================
HTTP/1.1 200 OK
Content-Length: 186
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "AT",
                        "value": "10"
                    }
                ],
                "id": "E2",
                "isPattern": "false",
                "type": "E"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


09. Change attribute 'A' of the entity 'E2'
===========================================
HTTP/1.1 200 OK
Content-Length: 165
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "A1",
                    "type": "AT",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "E2",
    "isPattern": "false",
    "type": "E"
}


10. Query the entity 'E2' that was just modified
================================================
HTTP/1.1 200 OK
Content-Length: 187
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "AT",
                        "value": "200"
                    }
                ],
                "id": "E2",
                "isPattern": "false",
                "type": "E"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


--TEARDOWN--
brokerStop CB
dbDrop CB
