# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ConvOp getIndividualContextEntity: GET /v1/contextEntities/{entityId::id}

--SHELL-INIT--
dbInit CB
brokerStart CB 0

--SHELL--
#
# FIXME P5: Once the broker implements forward queries for empty entity types, this test case should
#           include forwarding.
#
# FIXME P5: This convenience operation can only respond with ONE entity.
#           So, to avoid problems, this functest is designed to have only one matching entity
#           for each query.
#           Once/If the broker changes this behaviour and permits the response to this conv op
#           to include a vector of context elements, this func test should be enhanced to include
#           tests of this.
#
# 01. Update/APPEND E1/T1/A1 without service-path
# 02. Update/APPEND E1//A1 with service-path /A1
# 03. Update/APPEND E1/T1/A2 with service-path /A2
# 04. Update/APPEND E1//A2 with service-path /A3
# 05. Update/APPEND E2/T2/A2 with service-path /A2
# 06. Update/APPEND E3//A2 with service-path /A2
# 07. Query E2 with service-path '/A2'
# 08. Query E1 with service-path '/A2' and URI param !exist=entity::type
# 09. Query E1 with service-path '/A2' and URI param exist=entity::type
# 10. Query E1 without service-path and URI param entity::type=T1
# 11. Query E3 with service-path '/A2' and URI param !exist=entity::type
# 12. Query E2 with service-path '/A2' and attributesFormat set to JSON-object
#

echo "01. Update/APPEND E1/T1/A1 without service-path"
echo "==============================================="
payload='{
  "contextElements": [
    {
      "type": "T1",
      "isPattern": "false",
      "id": "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "degree",
          "value": "a1t1e1"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload"
echo
echo


echo "02. Update/APPEND E1//A1 with service-path /A1"
echo "=============================================="
payload='{
  "contextElements": [
    {
      "type": "",
      "isPattern": "false",
      "id": "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "degree",
          "value": "a1__e1"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload"  --servicePath /A1
echo
echo


echo "03. Update/APPEND E1/T1/A2 with service-path /A2"
echo "================================================"
payload='{
  "contextElements": [
    {
      "type": "T1",
      "isPattern": "false",
      "id": "E1",
      "attributes": [
        {
          "name": "A2",
          "type": "degree",
          "value": "a2t1e1"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --servicePath /A2
echo
echo


echo "04. Update/APPEND E1//A2 with service-path /A3"
echo "=============================================="
payload='{
  "contextElements": [
    {
      "type": "",
      "isPattern": "false",
      "id": "E1",
      "attributes": [
        {
          "name": "A2",
          "type": "degree",
          "value": "a2__e1"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --servicePath /A3
echo
echo


echo "05. Update/APPEND E2/T2/A2 with service-path /A2"
echo "================================================"
payload='{
  "contextElements": [
    {
      "type": "T2",
      "isPattern": "false",
      "id": "E2",
      "attributes": [
        {
          "name": "A2",
          "type": "degree",
          "value": "a2_t2_e2"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --servicePath /A2
echo
echo


echo "06. Update/APPEND E3//A2 with service-path /A2"
echo "=============================================="
payload='{
  "contextElements": [
    {
      "type": "",
      "isPattern": "false",
      "id": "E3",
      "attributes": [
        {
          "name": "A2",
          "type": "degree",
          "value": "a2__e3"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --servicePath /A2
echo
echo


echo "07. Query E2 with service-path '/A2'"
echo "===================================="
orionCurl --url /v1/contextEntities/E2 --servicePath /A2
echo
echo


echo "08. Query E1 with service-path '/A2' and URI param !exist=entity::type"
echo "======================================================================"
orionCurl --url /v1/contextEntities/E1?!exist=entity::type --servicePath /A2
echo
echo


echo "09. Query E1 with service-path '/A2' and URI param exist=entity::type"
echo "====================================================================="
orionCurl --url /v1/contextEntities/E1?exist=entity::type --servicePath /A2
echo
echo

echo "10. Query E1 with service-path '/A2' and URI param entity::type=T1"
echo "=================================================================="
orionCurl --url /v1/contextEntities/E1?entity::type=T1 --servicePath /A2
echo
echo


echo "11. Query E3 with service-path '/A2' and URI param !exist=entity::type"
echo "======================================================================"
orionCurl --url /v1/contextEntities/E3?!exist=entity::type --servicePath /A2
echo
echo


echo "12. Query E2 with service-path '/A2' and attributesFormat set to JSON-object"
echo "============================================================================"
orionCurl --url /v1/contextEntities/E2 --servicePath /A2 --urlParams attributesFormat=object
echo
echo


--REGEXPECT--
01. Update/APPEND E1/T1/A1 without service-path
===============================================
HTTP/1.1 200 OK
Content-Length: 189
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "degree",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


02. Update/APPEND E1//A1 with service-path /A1
==============================================
HTTP/1.1 200 OK
Content-Length: 187
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "degree",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": ""
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. Update/APPEND E1/T1/A2 with service-path /A2
================================================
HTTP/1.1 200 OK
Content-Length: 189
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A2",
                        "type": "degree",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


04. Update/APPEND E1//A2 with service-path /A3
==============================================
HTTP/1.1 200 OK
Content-Length: 187
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A2",
                        "type": "degree",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": ""
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


05. Update/APPEND E2/T2/A2 with service-path /A2
================================================
HTTP/1.1 200 OK
Content-Length: 189
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A2",
                        "type": "degree",
                        "value": ""
                    }
                ],
                "id": "E2",
                "isPattern": "false",
                "type": "T2"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


06. Update/APPEND E3//A2 with service-path /A2
==============================================
HTTP/1.1 200 OK
Content-Length: 187
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A2",
                        "type": "degree",
                        "value": ""
                    }
                ],
                "id": "E3",
                "isPattern": "false",
                "type": ""
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


07. Query E2 with service-path '/A2'
====================================
HTTP/1.1 200 OK
Content-Length: 174
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "A2",
                "type": "degree",
                "value": "a2_t2_e2"
            }
        ],
        "id": "E2",
        "isPattern": "false",
        "type": "T2"
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


08. Query E1 with service-path '/A2' and URI param !exist=entity::type
======================================================================
HTTP/1.1 200 OK
Content-Length: 158
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextElement": {
        "id": "E1",
        "isPattern": "false",
        "type": ""
    },
    "statusCode": {
        "code": "404",
        "details": "Entity id: /E1/",
        "reasonPhrase": "No context element found"
    }
}


09. Query E1 with service-path '/A2' and URI param exist=entity::type
=====================================================================
HTTP/1.1 200 OK
Content-Length: 172
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "A2",
                "type": "degree",
                "value": "a2t1e1"
            }
        ],
        "id": "E1",
        "isPattern": "false",
        "type": "T1"
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


10. Query E1 with service-path '/A2' and URI param entity::type=T1
==================================================================
HTTP/1.1 200 OK
Content-Length: 172
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "A2",
                "type": "degree",
                "value": "a2t1e1"
            }
        ],
        "id": "E1",
        "isPattern": "false",
        "type": "T1"
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


11. Query E3 with service-path '/A2' and URI param !exist=entity::type
======================================================================
HTTP/1.1 200 OK
Content-Length: 170
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "A2",
                "type": "degree",
                "value": "a2__e3"
            }
        ],
        "id": "E3",
        "isPattern": "false",
        "type": ""
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


12. Query E2 with service-path '/A2' and attributesFormat set to JSON-object
============================================================================
HTTP/1.1 200 OK
Content-Length: 167
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": {
            "A2": {
                "type": "degree",
                "value": "a2_t2_e2"
            }
        },
        "id": "E2",
        "isPattern": "false",
        "type": "T2"
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
