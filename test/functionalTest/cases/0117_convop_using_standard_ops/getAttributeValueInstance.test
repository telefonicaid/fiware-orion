# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ConvOp getAttributeValueInstance: GET /v1/contextEntities/{entityId::id}/attributes/{attribute::name}/{matadata::Id}

--SHELL-INIT--
dbInit CB
brokerStart CB 0

--SHELL--

#
# 01. GET /v1/contextEntities/E1/attributes/A1/ID_A?entity::type=T1 and see it fail
# 02. Create E1/T1/A1 with metadata ID ID_A
# 03. GET /v1/contextEntities/E1/attributes/A1/ID_A?entity::type=T1 and see it work
# 04. GET /v1/contextEntities/E1/attributes/A1/ID_B?entity::type=T1 and see it fail
# 05. GET /v1/contextEntities/E1/attributes/A1/ID_A?entity::type=T1&attributesFormat=object
# 06. Create E2//A1 with metadata ID ID_B
# 07. GET /v1/contextEntities/E2/attributes/A1/ID_B?!exist=entity::type and see it work
# 08. GET /v1/contextEntities/E2/attributes/A1/ID_B?exist=entity::type and see it fail
#

echo "01. GET /v1/contextEntities/E1/attributes/A1/ID_A?entity::type=T1 and see it fail"
echo "================================================================================="
orionCurl --url /v1/contextEntities/E1/attributes/A1/ID_A?entity::type=T1
echo
echo


echo "02. Create E1/T1/A1 with metadata ID ID_A"
echo "========================================="
payload='{
  "contextElements": [
    {
      "type": "T1",
      "isPattern": "false",
      "id": "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "TA",
          "value": "a1",
          "metadatas": [
            {
              "name": "ID",
              "type": "xsd:string",
              "value": "ID_A"
            }
          ]
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload"
echo
echo


echo "03. GET /v1/contextEntities/E1/attributes/A1/ID_A?entity::type=T1 and see it work"
echo "================================================================================="
orionCurl --url /v1/contextEntities/E1/attributes/A1/ID_A?entity::type=T1
echo
echo


echo "04. GET /v1/contextEntities/E1/attributes/A1/ID_B?entity::type=T1 and see it fail"
echo "================================================================================="
orionCurl --url /v1/contextEntities/E1/attributes/A1/ID_B?entity::type=T1
echo
echo


echo "05. GET /v1/contextEntities/E1/attributes/A1/ID_A?entity::type=T1&attributesFormat=object"
echo "========================================================================================="
orionCurl --url '/v1/contextEntities/E1/attributes/A1/ID_A?entity::type=T1&attributesFormat=object'
echo
echo


echo "06. Create E2//A1 with metadata ID ID_B"
echo "======================================="
payload='{
  "contextElements": [
    {
      "isPattern": "false",
      "id": "E2",
      "attributes": [
        {
          "name": "A1",
          "type": "TA",
          "value": "a1",
          "metadatas": [
            {
              "name": "ID",
              "type": "xsd:string",
              "value": "ID_B"
            }
          ]
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload"
echo
echo


echo "07. GET /v1/contextEntities/E2/attributes/A1/ID_B?!exist=entity::type and see it work"
echo "====================================================================================="
orionCurl --url /v1/contextEntities/E2/attributes/A1/ID_B?!exist=entity::type
echo
echo


echo "08. GET /v1/contextEntities/E2/attributes/A1/ID_B?exist=entity::type and see it fail"
echo "===================================================================================="
orionCurl --url /v1/contextEntities/E2/attributes/A1/ID_B?exist=entity::type
echo
echo


--REGEXPECT--
01. GET /v1/contextEntities/E1/attributes/A1/ID_A?entity::type=T1 and see it fail
=================================================================================
HTTP/1.1 200 OK
Content-Length: 99
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404", 
        "details": "Entity id: /E1/", 
        "reasonPhrase": "No context element found"
    }
}


02. Create E1/T1/A1 with metadata ID ID_A
=========================================
HTTP/1.1 200 OK
Content-Length: 244
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "metadatas": [
                            {
                                "name": "ID", 
                                "type": "string", 
                                "value": "ID_A"
                            }
                        ], 
                        "name": "A1", 
                        "type": "TA", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. GET /v1/contextEntities/E1/attributes/A1/ID_A?entity::type=T1 and see it work
=================================================================================
HTTP/1.1 200 OK
Content-Length: 162
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "metadatas": [
                {
                    "name": "ID", 
                    "type": "string", 
                    "value": "ID_A"
                }
            ], 
            "name": "A1", 
            "type": "TA", 
            "value": "a1"
        }
    ], 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


04. GET /v1/contextEntities/E1/attributes/A1/ID_B?entity::type=T1 and see it fail
=================================================================================
HTTP/1.1 200 OK
Content-Length: 99
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404", 
        "details": "Entity id: /E1/", 
        "reasonPhrase": "No context element found"
    }
}


05. GET /v1/contextEntities/E1/attributes/A1/ID_A?entity::type=T1&attributesFormat=object
=========================================================================================
HTTP/1.1 200 OK
Content-Length: 155
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": {
        "A1": {
            "metadatas": [
                {
                    "name": "ID", 
                    "type": "string", 
                    "value": "ID_A"
                }
            ], 
            "type": "TA", 
            "value": "a1"
        }
    }, 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


06. Create E2//A1 with metadata ID ID_B
=======================================
HTTP/1.1 200 OK
Content-Length: 242
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "metadatas": [
                            {
                                "name": "ID", 
                                "type": "string", 
                                "value": "ID_B"
                            }
                        ], 
                        "name": "A1", 
                        "type": "TA", 
                        "value": ""
                    }
                ], 
                "id": "E2", 
                "isPattern": "false", 
                "type": ""
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


07. GET /v1/contextEntities/E2/attributes/A1/ID_B?!exist=entity::type and see it work
=====================================================================================
HTTP/1.1 200 OK
Content-Length: 162
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "metadatas": [
                {
                    "name": "ID", 
                    "type": "string", 
                    "value": "ID_B"
                }
            ], 
            "name": "A1", 
            "type": "TA", 
            "value": "a1"
        }
    ], 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


08. GET /v1/contextEntities/E2/attributes/A1/ID_B?exist=entity::type and see it fail
====================================================================================
HTTP/1.1 200 OK
Content-Length: 99
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404", 
        "details": "Entity id: /E2/", 
        "reasonPhrase": "No context element found"
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
