# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ExtraOp getAttributesForEntityType:  GET /v1/contextTypes/{entity::type}

--SHELL-INIT--
dbInit CB
brokerStart CB 0-255

--SHELL--

#
# 01. GET /v1/contextTypes/T1 and see it fail
# 02. POST /v1/updateContext, creating E1-T1-A1+A2
# 03. GET /v1/contextTypes/T1 and see it work
# 04. POST /v1/updateContext, creating E1-T1-A3+A4, servicePath /s1
# 05. GET /v1/contextTypes/T1, without servicePath, see four types
# 06. GET /v1/contextTypes/T1, with servicePath /s1, see two types
# 07. GET /v1/contextTypes/T1, with servicePath /, see two types
#

echo "01. GET /v1/contextTypes/T1 and see it fail"
echo "==========================================="
orionCurl --url /v1/contextTypes/T1
echo
echo


echo "02. POST /v1/updateContext, creating E1-T1-A1+A2"
echo "================================================"
payload='{
  "contextElements": [
    {
      "type": "T1",
      "id":   "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "string",
          "value": "1"
        },
        {
          "name": "A2",
          "type": "string",
          "value": "2"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload"
echo
echo


echo "03. GET /v1/contextTypes/T1 and see it work"
echo "==========================================="
orionCurl --url /v1/contextTypes/T1
echo
echo


echo "04. POST /v1/updateContext, creating E1-T1-A3+A4, servicePath /s1"
echo "================================================================="
payload='{
  "contextElements": [
    {
      "type": "T1",
      "id":   "E1",
      "attributes": [
        {
          "name": "A3",
          "type": "string",
          "value": "3"
        },
        {
          "name": "A4",
          "type": "string",
          "value": "4"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --servicePath /s1
echo
echo


echo "05. GET /v1/contextTypes/T1, without servicePath, see four types"
echo "================================================================"
orionCurl --url /v1/contextTypes/T1
echo
echo


echo "06. GET /v1/contextTypes/T1, with servicePath /s1, see two types"
echo "================================================================"
orionCurl --url /v1/contextTypes/T1 --servicePath /s1
echo
echo


echo "07. GET /v1/contextTypes/T1, with servicePath /, see two types"
echo "=============================================================="
orionCurl --url /v1/contextTypes/T1 --servicePath /
echo
echo


--REGEXPECT--
01. GET /v1/contextTypes/T1 and see it fail
===========================================
HTTP/1.1 200 OK
Content-Length: 83
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "name": "T1",
    "statusCode": {
        "code": "404",
        "reasonPhrase": "No context element found"
    }
}


02. POST /v1/updateContext, creating E1-T1-A1+A2
================================================
HTTP/1.1 200 OK
Content-Length: 230
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "string",
                        "value": ""
                    },
                    {
                        "name": "A2",
                        "type": "string",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. GET /v1/contextTypes/T1 and see it work
===========================================
HTTP/1.1 200 OK
Content-Length: 86
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        "A1",
        "A2"
    ],
    "name": "T1",
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


04. POST /v1/updateContext, creating E1-T1-A3+A4, servicePath /s1
=================================================================
HTTP/1.1 200 OK
Content-Length: 230
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A3",
                        "type": "string",
                        "value": ""
                    },
                    {
                        "name": "A4",
                        "type": "string",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


05. GET /v1/contextTypes/T1, without servicePath, see four types
================================================================
HTTP/1.1 200 OK
Content-Length: 96
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        "A1",
        "A2",
        "A3",
        "A4"
    ],
    "name": "T1",
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


06. GET /v1/contextTypes/T1, with servicePath /s1, see two types
================================================================
HTTP/1.1 200 OK
Content-Length: 86
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        "A3",
        "A4"
    ],
    "name": "T1",
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


07. GET /v1/contextTypes/T1, with servicePath /, see two types
==============================================================
HTTP/1.1 200 OK
Content-Length: 86
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        "A1",
        "A2"
    ],
    "name": "T1",
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
