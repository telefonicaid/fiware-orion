# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ExtraOp getEntityTypes:  GET /v1/contextTypes

--SHELL-INIT--
dbInit CB
brokerStart CB 0

--SHELL--

#
# 01. GET /v1/contextTypes and see a list of zero types
# 02. POST /v1/updateContext, creating E1-T1-A1+A2
# 03. POST /v1/updateContext, creating E1-T2-A1
# 04. POST /v1/updateContext, creating E1-T3-A1+A2
# 05. GET /v1/contextTypes and see a list of three types
# 06. POST /v1/updateContext, creating E1-T4-A1, servicePath /s1
# 07. POST /v1/updateContext, creating E1-T5-A1, servicePath /s2
# 08. GET /v1/contextTypes, servicePath /s1 and see a list of one type (T4)
# 09. GET /v1/contextTypes, servicePath /s2 and see a list of one type (T5)
# 10. GET /v1/contextTypes and see a list of five types
# 11. GET /v1/contextTypes?collapse=true and see the list without attributes
#

echo "01. GET /v1/contextTypes and see a list of zero types"
echo "====================================================="
orionCurl --url /v1/contextTypes
echo
echo


echo "02. POST /v1/updateContext, creating E1-T1-A1+A2"
echo "================================================"
payload='{
  "contextElements": [
    {
      "type": "T1",
      "id":   "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "string",
          "value": "1"
        },
        {
          "name": "A2",
          "type": "string",
          "value": "2"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload"
echo
echo


echo "03. POST /v1/updateContext, creating E1-T2-A1"
echo "============================================="
payload='{
  "contextElements": [
    {
      "type": "T2",
      "id":   "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "string",
          "value": "21"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload"
echo
echo


echo "04. POST /v1/updateContext, creating E1-T3-A1+A2"
echo "================================================"
payload='{
  "contextElements": [
    {
      "type": "T3",
      "id":   "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "string",
          "value": "31"
        },
        {
          "name": "A2",
          "type": "string",
          "value": "32"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload"
echo
echo


echo "05. GET /v1/contextTypes and see a list of three types"
echo "======================================================"
orionCurl --url /v1/contextTypes
echo
echo


echo "06. POST /v1/updateContext, creating E1-T4-A1, servicePath /s1"
echo "=============================================================="
payload='{
  "contextElements": [
    {
      "type": "T4",
      "id":   "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "string",
          "value": "s1"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --servicePath /s1
echo
echo


echo "07. POST /v1/updateContext, creating E1-T5-A1, servicePath /s2"
echo "=============================================================="
payload='{
  "contextElements": [
    {
      "type": "T5",
      "id":   "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "string",
          "value": "s2"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --servicePath /s2
echo
echo


echo "08. GET /v1/contextTypes, servicePath /s1 and see a list of one type (T4)"
echo "========================================================================="
orionCurl --url /v1/contextTypes --servicePath /s1
echo
echo


echo "09. GET /v1/contextTypes, servicePath /s2 and see a list of one type (T5)"
echo "========================================================================="
orionCurl --url /v1/contextTypes --servicePath /s2
echo
echo


echo "10. GET /v1/contextTypes and see a list of five types"
echo "====================================================="
orionCurl --url /v1/contextTypes
echo
echo

echo "11. GET /v1/contextTypes?collapse=true and see the list without attributes"
echo "=========================================================================="
orionCurl --url /v1/contextTypes?collapse=true
echo
echo


--REGEXPECT--
01. GET /v1/contextTypes and see a list of zero types
=====================================================
HTTP/1.1 200 OK
Content-Length: 71
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404",
        "reasonPhrase": "No context element found"
    }
}


02. POST /v1/updateContext, creating E1-T1-A1+A2
================================================
HTTP/1.1 200 OK
Content-Length: 230
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "string",
                        "value": ""
                    },
                    {
                        "name": "A2",
                        "type": "string",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. POST /v1/updateContext, creating E1-T2-A1
=============================================
HTTP/1.1 200 OK
Content-Length: 189
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "string",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T2"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


04. POST /v1/updateContext, creating E1-T3-A1+A2
================================================
HTTP/1.1 200 OK
Content-Length: 230
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "string",
                        "value": ""
                    },
                    {
                        "name": "A2",
                        "type": "string",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T3"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


05. GET /v1/contextTypes and see a list of three types
======================================================
HTTP/1.1 200 OK
Content-Length: 171
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    },
    "types": [
        {
            "attributes": [
#SORT_START
                "A2"REGEX(,?)
                "A1"REGEX(,?)
#SORT_END
            ],
            "name": "T1"
        },
        {
            "attributes": [
                "A1"
            ],
            "name": "T2"
        },
        {
            "attributes": [
#SORT_START
                "A2"REGEX(,?)
                "A1"REGEX(,?)
#SORT_END
            ],
            "name": "T3"
        }
    ]
}


06. POST /v1/updateContext, creating E1-T4-A1, servicePath /s1
==============================================================
HTTP/1.1 200 OK
Content-Length: 189
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "string",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T4"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


07. POST /v1/updateContext, creating E1-T5-A1, servicePath /s2
==============================================================
HTTP/1.1 200 OK
Content-Length: 189
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "string",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T5"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


08. GET /v1/contextTypes, servicePath /s1 and see a list of one type (T4)
=========================================================================
HTTP/1.1 200 OK
Content-Length: 93
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    },
    "types": [
        {
            "attributes": [
                "A1"
            ],
            "name": "T4"
        }
    ]
}


09. GET /v1/contextTypes, servicePath /s2 and see a list of one type (T5)
=========================================================================
HTTP/1.1 200 OK
Content-Length: 93
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    },
    "types": [
        {
            "attributes": [
                "A1"
            ],
            "name": "T5"
        }
    ]
}


10. GET /v1/contextTypes and see a list of five types
=====================================================
HTTP/1.1 200 OK
Content-Length: 239
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    },
    "types": [
        {
            "attributes": [
#SORT_START
                "A2"REGEX(,?)
                "A1"REGEX(,?)
#SORT_END
            ],
            "name": "T1"
        },
        {
            "attributes": [
                "A1"
            ],
            "name": "T2"
        },
        {
            "attributes": [
#SORT_START
                "A2"REGEX(,?)
                "A1"REGEX(,?)
#SORT_END
            ],
            "name": "T3"
        },
        {
            "attributes": [
                "A1"
            ],
            "name": "T4"
        },
        {
            "attributes": [
                "A1"
            ],
            "name": "T5"
        }
    ]
}


11. GET /v1/contextTypes?collapse=true and see the list without attributes
==========================================================================
HTTP/1.1 200 OK
Content-Length: 129
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    },
    "types": [
        {
            "name": "T1"
        },
        {
            "name": "T2"
        },
        {
            "name": "T3"
        },
        {
            "name": "T4"
        },
        {
            "name": "T5"
        }
    ]
}


--TEARDOWN--
brokerStop CB
dbDrop CB
