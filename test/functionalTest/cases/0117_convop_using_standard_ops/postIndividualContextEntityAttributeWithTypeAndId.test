# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ConvOp postIndividualContextEntityAttributeWithTypeAndId: POST /v1/contextEntities/type/{entity::type}/id/{entity::id}/attributes/{attribute::name}

--SHELL-INIT--
dbInit CB
brokerStart CB 0

--SHELL--

#
# 01. POST /v1/contextEntities/type/T1/id/E1/attributes/A1, A1=1
# 02. GET /v1/contextEntities/type/T1/id/E1/attributes/A1
# 03. POST /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T2, and see it fail
# 04. POST /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T1, and see it work
# 05. POST /v1/contextEntities/type/T1/id/E1/attributes/A1?!exist=entity::type, and see it fail
# 06. POST /v1/contextEntities/type/T1/id/E1/attributes/A1?exist=entity::type, A1=2
# 07. GET /v1/contextEntities/type/T1/id/E1/attributes/A1
# 08. POST /v1/contextEntities/type/T1/id/E1/attributes/A1, A1=s1, with servicePath=/s1
# 09. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, with servicePath=/s1
# 10. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, with servicePath=/
# 11. POST /v1/queryContext, without servicePath, see two results
#

echo "01. POST /v1/contextEntities/type/T1/id/E1/attributes/A1, A1=1"
echo "=============================================================="
payload='{
  "value": 1
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1 --payload "$payload"
echo
echo


echo "02. GET /v1/contextEntities/type/T1/id/E1/attributes/A1"
echo "======================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1
echo
echo


echo "03. POST /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T2, and see it fail"
echo "========================================================================================="
payload='{
  "value": 3
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T2 --payload "$payload"
echo
echo


echo "04. POST /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T1, and see it work"
echo "========================================================================================="
payload='{
  "value": 4
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T1 --payload "$payload"
echo
echo


echo "05. POST /v1/contextEntities/type/T1/id/E1/attributes/A1?!exist=entity::type, and see it fail"
echo "============================================================================================="
payload='{
  "value": 1
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1?!exist=entity::type --payload "$payload"
echo
echo


echo "06. POST /v1/contextEntities/type/T1/id/E1/attributes/A1?exist=entity::type, A1=2"
echo "================================================================================="
payload='{
  "value": 2
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1?exist=entity::type --payload "$payload"
echo
echo


echo "07. GET /v1/contextEntities/type/T1/id/E1/attributes/A1"
echo "======================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1
echo
echo


echo "08. POST /v1/contextEntities/type/T1/id/E1/attributes/A1, A1=s1, with servicePath=/s1"
echo "====================================================================================="
payload='{
  "value": "s1"
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1 --payload "$payload" --servicePath /s1
echo
echo


echo "09. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, with servicePath=/s1"
echo "============================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1 --servicePath /s1
echo
echo


echo "10. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, with servicePath=/"
echo "==========================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1 --servicePath /
echo
echo


echo "11. POST /v1/queryContext, without servicePath, see two results"
echo "==============================================================="
payload='{
  "entities": [
    {
      "type": "T1",
      "id": "E1"
    }
  ]
}'
orionCurl --url /v1/queryContext --payload "$payload"
echo
echo


--REGEXPECT--
01. POST /v1/contextEntities/type/T1/id/E1/attributes/A1, A1=1
==============================================================
HTTP/1.1 200 OK
Content-Length: 34
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "200",
    "reasonPhrase": "OK"
}


02. GET /v1/contextEntities/type/T1/id/E1/attributes/A1
=======================================================
HTTP/1.1 200 OK
Content-Length: 100
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "name": "A1",
            "type": "",
            "value": "1"
        }
    ],
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


03. POST /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T2, and see it fail
=========================================================================================
HTTP/1.1 200 OK
Content-Length: 89
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "400",
    "details": "non-matching entity::types in URL",
    "reasonPhrase": "Bad Request"
}


04. POST /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T1, and see it work
=========================================================================================
HTTP/1.1 200 OK
Content-Length: 34
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "200",
    "reasonPhrase": "OK"
}


05. POST /v1/contextEntities/type/T1/id/E1/attributes/A1?!exist=entity::type, and see it fail
=============================================================================================
HTTP/1.1 200 OK
Content-Length: 101
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "400",
    "details": "entity::type cannot be empty for this request",
    "reasonPhrase": "Bad Request"
}


06. POST /v1/contextEntities/type/T1/id/E1/attributes/A1?exist=entity::type, A1=2
=================================================================================
HTTP/1.1 200 OK
Content-Length: 34
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "200",
    "reasonPhrase": "OK"
}


07. GET /v1/contextEntities/type/T1/id/E1/attributes/A1
=======================================================
HTTP/1.1 200 OK
Content-Length: 100
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "name": "A1",
            "type": "",
            "value": "2"
        }
    ],
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


08. POST /v1/contextEntities/type/T1/id/E1/attributes/A1, A1=s1, with servicePath=/s1
=====================================================================================
HTTP/1.1 200 OK
Content-Length: 34
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "200",
    "reasonPhrase": "OK"
}


09. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, with servicePath=/s1
=============================================================================
HTTP/1.1 200 OK
Content-Length: 101
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "name": "A1",
            "type": "",
            "value": "s1"
        }
    ],
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


10. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, with servicePath=/
===========================================================================
HTTP/1.1 200 OK
Content-Length: 100
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "name": "A1",
            "type": "",
            "value": "2"
        }
    ],
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


11. POST /v1/queryContext, without servicePath, see two results
===============================================================
HTTP/1.1 200 OK
Content-Length: 347
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "",
                        "value": "2"
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        },
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "",
                        "value": "s1"
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


--TEARDOWN--
brokerStop CB
dbDrop CB
