# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ConvOp getIndividualContextEntityAttributeWithTypeAndId: GET /v1/contextEntities/type/{entity::type}/id/{entity::id}/attributes/{attribute::name}

--SHELL-INIT--
dbInit CB
dbInit CP1
brokerStart CB 0
brokerStart CP1 0

--SHELL--

#
# 01. GET /v1/contextEntities/type/T1/id/E1/attributes/A1 and see it fail
# 02. Update/APPEND E1/T1/A1, service-path /s1
# 03. Update/APPEND E1/T1/A1, service-path /s2
# 04. Update/APPEND E1/T1/A1, service-path /s3
# 05. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, no service-path, and see ONLY ONE hit
# 06. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, service-path /#, and see ONLY ONE hit
# 07. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, service-path /s1, and see 1 hit
# 08. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?attributesFormat=object, service-path /s1, and see it work
# 09. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T1, service-path /s1, and see it work
# 10. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T2, service-path /s1, and see it fail
# 11. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?!exist=entity::type, service-path /s1, and see it fail
# 12. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?exist=entity::type, service-path /s1, and see it work
# 13. GET /v1/contextEntities/type/T1/id/E2/attributes/A1 and see it fail
# 14. Register E2/T1/A1 with providing application CP1
# 15. GET /v1/contextEntities/type/T1/id/E2/attributes/A1 and see it fail, as E2/T1/A1 does not exist in CP1
# 16. Update/APPEND E2/T1/A1 in CP1
# 17. GET /v1/contextEntities/type/T1/id/E2/attributes/A1 and see it work
#


echo "01. GET /v1/contextEntities/type/T1/id/E1/attributes/A1 and see it fail"
echo "======================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1
echo
echo


echo "02. Update/APPEND E1/T1/A1, service-path /s1"
echo "============================================"
payload='{
  "contextElements": [
    {
      "type": "T1",
      "isPattern": "false",
      "id": "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "degree",
          "value": "a1t1e1-s1"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --servicePath /s1
echo
echo


echo "03. Update/APPEND E1/T1/A1, service-path /s2"
echo "============================================"
payload='{
  "contextElements": [
    {
      "type": "T1",
      "isPattern": "false",
      "id": "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "degree",
          "value": "a1t1e1-s2"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --servicePath /s2
echo
echo


echo "04. Update/APPEND E1/T1/A1, service-path /s3"
echo "============================================"
payload='{
  "contextElements": [
    {
      "type": "T1",
      "isPattern": "false",
      "id": "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "degree",
          "value": "a1t1e1-s3"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --servicePath /s3
echo
echo


echo "05. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, no service-path, and see ONLY ONE hit"
echo "=============================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1
echo
echo


echo "06. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, service-path /#, and see ONLY ONE hit"
echo "=============================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1 --servicePath /#
echo
echo


echo "07. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, service-path /s1, and see 1 hit"
echo "========================================================================================"
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1 --servicePath /s1
echo
echo


echo "08. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?attributesFormat=object, service-path /s1, and see it work"
echo "=================================================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1?attributesFormat=object --servicePath /s1
echo
echo


echo "09. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T1, service-path /s2, and see it work"
echo "=========================================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T1 --servicePath /s2
echo
echo


echo "10. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T2, service-path /s1, and see it fail"
echo "=========================================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T2 --servicePath /s1
echo
echo


echo "11. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?!exist=entity::type, service-path /s1, and see it fail"
echo "=============================================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1?!exist=entity::type --servicePath /s1
echo
echo


echo "12. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?exist=entity::type, service-path /s3, and see it work"
echo "============================================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1?exist=entity::type --servicePath /s3
echo
echo


echo "13. GET /v1/contextEntities/type/T1/id/E2/attributes/A1 and see it fail"
echo "======================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E2/attributes/A1
echo
echo


echo "14. Register E2/T1/A1 with providing application CP1"
echo "===================================================="
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "type": "T1",
         "id": "E2"
      }
    ],
    "attributes": [
      {
        "name": "A1",
        "type": "string"
      }
    ],
    "providingApplication": "http://localhost:'${CP1_PORT}'/v1"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload"
echo
echo


echo "15. GET /v1/contextEntities/type/T1/id/E2/attributes/A1 and see it fail, as E2/T1/A1 does not exist in CP1"
echo "=========================================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E2/attributes/A1
echo
echo


echo "16. Update/APPEND E2/T1/A1 in CP1"
echo "================================="
payload='{
    "contextElements": [
        {
            "type" : "T1",
            "isPattern" : "false",
            "id" : "E2",
            "attributes" : [
                {
                    "name" : "A1",
                    "type" : "a",
                    "value" : "E1-T1-A1 in CP1"
                }
            ]
        }
    ],
    "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --port $CP1_PORT
echo
echo


echo "17. GET /v1/contextEntities/type/T1/id/E2/attributes/A1 and see it work"
echo "======================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E2/attributes/A1
echo
echo


--REGEXPECT--
01. GET /v1/contextEntities/type/T1/id/E1/attributes/A1 and see it fail
=======================================================================
HTTP/1.1 200 OK
Content-Length: 114
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404",
        "details": "Entity-Attribute pair: /E1-A1/",
        "reasonPhrase": "No context element found"
    }
}


02. Update/APPEND E1/T1/A1, service-path /s1
============================================
HTTP/1.1 200 OK
Content-Length: 189
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "degree",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. Update/APPEND E1/T1/A1, service-path /s2
============================================
HTTP/1.1 200 OK
Content-Length: 189
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "degree",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


04. Update/APPEND E1/T1/A1, service-path /s3
============================================
HTTP/1.1 200 OK
Content-Length: 189
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "degree",
                        "value": ""
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


05. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, no service-path, and see ONLY ONE hit
==============================================================================================
HTTP/1.1 200 OK
Content-Length: 114
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "name": "A1",
            "type": "degree",
            "value": "a1t1e1-s1"
        }
    ],
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


06. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, service-path /#, and see ONLY ONE hit
==============================================================================================
HTTP/1.1 200 OK
Content-Length: 114
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "name": "A1",
            "type": "degree",
            "value": "a1t1e1-s1"
        }
    ],
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


07. GET /v1/contextEntities/type/T1/id/E1/attributes/A1, service-path /s1, and see 1 hit
========================================================================================
HTTP/1.1 200 OK
Content-Length: 114
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "name": "A1",
            "type": "degree",
            "value": "a1t1e1-s1"
        }
    ],
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


08. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?attributesFormat=object, service-path /s1, and see it work
==================================================================================================================
HTTP/1.1 200 OK
Content-Length: 107
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": {
        "A1": {
            "type": "degree",
            "value": "a1t1e1-s1"
        }
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


09. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T1, service-path /s2, and see it work
==========================================================================================================
HTTP/1.1 200 OK
Content-Length: 114
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "name": "A1",
            "type": "degree",
            "value": "a1t1e1-s2"
        }
    ],
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


10. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?entity::type=T2, service-path /s1, and see it fail
==========================================================================================================
HTTP/1.1 200 OK
Content-Length: 104
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "400",
        "details": "non-matching entity::types in URL",
        "reasonPhrase": "Bad Request"
    }
}


11. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?!exist=entity::type, service-path /s1, and see it fail
==============================================================================================================
HTTP/1.1 200 OK
Content-Length: 116
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "400",
        "details": "entity::type cannot be empty for this request",
        "reasonPhrase": "Bad Request"
    }
}


12. GET /v1/contextEntities/type/T1/id/E1/attributes/A1?exist=entity::type, service-path /s3, and see it work
=============================================================================================================
HTTP/1.1 200 OK
Content-Length: 114
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "name": "A1",
            "type": "degree",
            "value": "a1t1e1-s3"
        }
    ],
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


13. GET /v1/contextEntities/type/T1/id/E2/attributes/A1 and see it fail
=======================================================================
HTTP/1.1 200 OK
Content-Length: 114
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404",
        "details": "Entity-Attribute pair: /E2-A1/",
        "reasonPhrase": "No context element found"
    }
}


14. Register E2/T1/A1 with providing application CP1
====================================================
HTTP/1.1 200 OK
Content-Length: 62
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "P1M",
    "registrationId": "REGEX([0-9a-f]{24})"
}


15. GET /v1/contextEntities/type/T1/id/E2/attributes/A1 and see it fail, as E2/T1/A1 does not exist in CP1
==========================================================================================================
HTTP/1.1 200 OK
Content-Length: 114
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404",
        "details": "Entity-Attribute pair: /E2-A1/",
        "reasonPhrase": "No context element found"
    }
}


16. Update/APPEND E2/T1/A1 in CP1
=================================
HTTP/1.1 200 OK
Content-Length: 184
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "a",
                        "value": ""
                    }
                ],
                "id": "E2",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


17. GET /v1/contextEntities/type/T1/id/E2/attributes/A1 and see it work
=======================================================================
HTTP/1.1 200 OK
Content-Length: 115
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "name": "A1",
            "type": "a",
            "value": "E1-T1-A1 in CP1"
        }
    ],
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


--TEARDOWN--
brokerStop CB
brokerStop CP1
dbDrop CB
dbDrop CP1
