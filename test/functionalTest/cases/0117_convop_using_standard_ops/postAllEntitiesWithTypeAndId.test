# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ConvOp postAllEntitiesWithTypeAndId: POST /v1/contextEntities/type/{entity::type}/id/{entity::id}

--SHELL-INIT--
dbInit CB
brokerStart CB 0

--SHELL--

#
# 01. POST /v1/contextEntities/type/T1/id/E1, with entityId::id in payload, see it fail
# 02. POST /v1/contextEntities/type/T1/id/E1, with entityId::type in payload, see it fail
# 03. POST /v1/contextEntities/type/T1/id/E1, attribute A1=1
# 04. Query E1/A1, see A1=1
# 05. POST /v1/contextEntities/type/T1/id/E1, attribute A1=2
# 06. Query E1/A1, see A1=2
# 07. POST /v1/contextEntities/type/T1/id/E1?attributesFormat=object, attribute A1=3
# 08. POST /v1/contextEntities/type/T1/id/E1?entity::type=T1, attribute A1=4
# 09. POST /v1/contextEntities/type/T1/id/E1?entity::type=T2 and see it fail
# 10. POST /v1/contextEntities/type/T1/id/E1?!exist=entity::type and see it fail
# 11. Query E1/T1, see A1=4
# 12. POST /v1/contextEntities/type/T1/id/E1?exist=entity::type
# 13. POST /v1/contextEntities/type/T1/id/E1,A1=7 servicePath=/test
# 14. Query E1/A1, servicePath=/, see A1=6
# 15. Query E1/A1, servicePath=/test, see A1=7
#

echo "01. POST /v1/contextEntities/type/T1/id/E1, with entityId::id in payload, see it fail"
echo "====================================================================================="
payload='{
  "id": "E1"
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1 --payload "$payload"
echo
echo


echo "02. POST /v1/contextEntities/type/T1/id/E1, with entityId::type in payload, see it fail"
echo "======================================================================================="
payload='{
  "type": "T1"
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1 --payload "$payload"
echo
echo


echo "03. POST /v1/contextEntities/type/T1/id/E1, attribute A1=1"
echo "=========================================================="
payload='{
  "attributes": [
    {
      "name": "A1",
      "value": 1
    }
  ]
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1 --payload "$payload"
echo
echo


echo "04. Query E1/A1, see A1=1"
echo "========================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A1"
  ]
}'
orionCurl --url /v1/queryContext --payload "$payload"
echo
echo


echo "05. POST /v1/contextEntities/type/T1/id/E1, attribute A1=2"
echo "=========================================================="
payload='{
  "attributes": [
    {
      "name": "A1",
      "value": 2
    }
  ]
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1 --payload "$payload"
echo
echo


echo "06. Query E1/A1, see A1=2"
echo "========================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A1"
  ]
}'
orionCurl --url /v1/queryContext --payload "$payload"
echo
echo


echo "07. POST /v1/contextEntities/type/T1/id/E1?attributesFormat=object"
echo "=================================================================="
payload='{
  "attributes": [
    {
      "name": "A1",
      "value": 3
    }
  ]
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1?attributesFormat=object --payload "$payload"
echo
echo


echo "08. POST /v1/contextEntities/type/T1/id/E1?entity::type=T1"
echo "=========================================================="
payload='{
  "attributes": [
    {
      "name": "A1",
      "value": 4
    }
  ]
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1?entity::type=T1 --payload "$payload"
echo
echo


echo "09. POST /v1/contextEntities/type/T1/id/E1?entity::type=T2 and see it fail"
echo "=========================================================================="
payload='{
  "attributes": [
    {
      "name": "A1",
      "value": 4
    }
  ]
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1?entity::type=T2 --payload "$payload"
echo
echo


echo "10. POST /v1/contextEntities/type/T1/id/E1?!exist=entity::type and see it fail"
echo "=============================================================================="
payload='{
  "attributes": [
    {
      "name": "A1",
      "value": 5
    }
  ]
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1?!exist=entity::type --payload "$payload"
echo
echo


echo "11. Query E1/T1, see A1=4"
echo "========================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A1"
  ]
}'
orionCurl --url /v1/queryContext --payload "$payload"
echo
echo


echo "12. POST /v1/contextEntities/type/T1/id/E1?exist=entity::type"
echo "============================================================="
payload='{
  "attributes": [
    {
      "name": "A1",
      "value": 5
    }
  ]
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1?exist=entity::type --payload "$payload"
echo
echo


echo "13. POST /v1/contextEntities/type/T1/id/E1,A1=7 servicePath=/test"
echo "================================================================="
payload='{
  "attributes": [
    {
      "name": "A1",
      "value": 6
    }
  ]
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1 --payload "$payload" --servicePath /test
echo
echo


echo "14. Query E1/A1, servicePath=/, see A1=6"
echo "========================================"
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A1"
  ]
}'
orionCurl --url /v1/queryContext --payload "$payload" --servicePath /
echo
echo


echo "15. Query E1/A1, servicePath=/test, see A1=6"
echo "============================================"
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A1"
  ]
}'
orionCurl --url /v1/queryContext --payload "$payload" --servicePath /test
echo
echo


--REGEXPECT--
01. POST /v1/contextEntities/type/T1/id/E1, with entityId::id in payload, see it fail
=====================================================================================
HTTP/1.1 200 OK
Content-Length: 101
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "400",
        "details": "invalid payload: unknown fields",
        "reasonPhrase": "Bad Request"
    }
}


02. POST /v1/contextEntities/type/T1/id/E1, with entityId::type in payload, see it fail
=======================================================================================
HTTP/1.1 200 OK
Content-Length: 101
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "400",
        "details": "invalid payload: unknown fields",
        "reasonPhrase": "Bad Request"
    }
}


03. POST /v1/contextEntities/type/T1/id/E1, attribute A1=1
==========================================================
HTTP/1.1 200 OK
Content-Length: 164
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "A1",
                    "type": "",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "E1",
    "isPattern": "false",
    "type": "T1"
}


04. Query E1/A1, see A1=1
=========================
HTTP/1.1 200 OK
Content-Length: 184
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "",
                        "value": "1"
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


05. POST /v1/contextEntities/type/T1/id/E1, attribute A1=2
==========================================================
HTTP/1.1 200 OK
Content-Length: 164
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "A1",
                    "type": "",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "E1",
    "isPattern": "false",
    "type": "T1"
}


06. Query E1/A1, see A1=2
=========================
HTTP/1.1 200 OK
Content-Length: 184
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "",
                        "value": "2"
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


07. POST /v1/contextEntities/type/T1/id/E1?attributesFormat=object
==================================================================
HTTP/1.1 200 OK
Content-Length: 157
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": {
                "A1": {
                    "type": "",
                    "value": ""
                }
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "E1",
    "isPattern": "false",
    "type": "T1"
}


08. POST /v1/contextEntities/type/T1/id/E1?entity::type=T1
==========================================================
HTTP/1.1 200 OK
Content-Length: 164
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "A1",
                    "type": "",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "E1",
    "isPattern": "false",
    "type": "T1"
}


09. POST /v1/contextEntities/type/T1/id/E1?entity::type=T2 and see it fail
==========================================================================
HTTP/1.1 200 OK
Content-Length: 103
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "400",
        "details": "non-matching entity::types in URL",
        "reasonPhrase": "Bad Request"
    }
}


10. POST /v1/contextEntities/type/T1/id/E1?!exist=entity::type and see it fail
==============================================================================
HTTP/1.1 200 OK
Content-Length: 115
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "400",
        "details": "entity::type cannot be empty for this request",
        "reasonPhrase": "Bad Request"
    }
}


11. Query E1/T1, see A1=4
=========================
HTTP/1.1 200 OK
Content-Length: 184
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "",
                        "value": "4"
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


12. POST /v1/contextEntities/type/T1/id/E1?exist=entity::type
=============================================================
HTTP/1.1 200 OK
Content-Length: 164
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "A1",
                    "type": "",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "E1",
    "isPattern": "false",
    "type": "T1"
}


13. POST /v1/contextEntities/type/T1/id/E1,A1=7 servicePath=/test
=================================================================
HTTP/1.1 200 OK
Content-Length: 164
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "A1",
                    "type": "",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "E1",
    "isPattern": "false",
    "type": "T1"
}


14. Query E1/A1, servicePath=/, see A1=6
========================================
HTTP/1.1 200 OK
Content-Length: 184
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "",
                        "value": "5"
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


15. Query E1/A1, servicePath=/test, see A1=6
============================================
HTTP/1.1 200 OK
Content-Length: 184
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1",
                        "type": "",
                        "value": "6"
                    }
                ],
                "id": "E1",
                "isPattern": "false",
                "type": "T1"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


--TEARDOWN--
brokerStop CB
dbDrop CB
