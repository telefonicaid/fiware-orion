# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ExtraOp getAttributeValueInstanceWithTypeAndId:  GET /v1/contextEntities/type/{entity::type}/id/{entity::id}/attributes/{attribute::name}/{metaID}

--SHELL-INIT--
dbInit CB
dbInit CP1

export BROKER_AWAIT_SLEEP_TIME=6
brokerStart CB
brokerStart CP1
unset BROKER_AWAIT_SLEEP_TIME

--SHELL--

#
# 01. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary and see it fail
# 02. Update/APPEND E1/T1/A1/mID=primary
# 03. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary and see it work
# 04. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?attributesFormat=object and see it work
# 05. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?entity::type=T1 and see it work
# 06. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?exist=entity::type and see it work
# 07. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?entity::type=T2 and see it fail
# 08. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?!exist=entity::type and see it fail
# 09. GET /v1/contextEntities/type/T1/id/E1/attributes/A2/backup and see it find nothing
# 10. Register E1/T1/A2/mID=backup for CP1
# 11. GET /v1/contextEntities/type/T1/id/E1/attributes/A2/backup and see it fail remotely
# 12. Update/APPEND E1/T1/A2/mID=backup in CP1
# 13. GET /v1/contextEntities/type/T1/id/E1/attributes/A2/backup and see it work remotely
#

echo "01. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary and see it fail"
echo "==============================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/primary
echo
echo


echo "02. Update/APPEND E1/T1/A1/mID=primary"
echo "======================================"
payload='{
  "contextElements": [
    {
      "type": "T1",
      "id":   "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "string",
          "value": "1",
          "metadatas": [
            {
              "name":   "ID",
              "type":   "string",
              "value":  "primary"
            }
          ]
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload"
echo
echo


echo "03. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary and see it work"
echo "==============================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/primary
echo
echo


echo "04. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?attributesFormat=object and see it work"
echo "======================================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?attributesFormat=object
echo
echo


echo "05. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?entity::type=T1 and see it work"
echo "==============================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?entity::type=T1
echo
echo


echo "06. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?exist=entity::type and see it work"
echo "=================================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?exist=entity::type
echo
echo


echo "07. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?entity::type=T2 and see it fail"
echo "==============================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?entity::type=T2
echo
echo


echo "08. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?!exist=entity::type and see it fail"
echo "==================================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?!exist=entity::type
echo
echo


echo "09. GET /v1/contextEntities/type/T1/id/E1/attributes/A2/backup and see it find nothing"
echo "======================================================================================"
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A2/backup
echo
echo


echo "10. Register E1/T1/A2/mID=backup for CP1"
echo "========================================"
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id":   "E1",
         "type": "T1"
      }
    ],
    "attributes": [
      {
        "name": "A2",
        "type": "string",
        "isDomain": "false",
        "metadatas": [
          {
            "name":   "ID",
            "type":   "string",
            "value":  "primary"
          }
        ]
      }
    ],
    "providingApplication": "http://localhost:'$CP1_PORT'/v1"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" 

echo
echo


echo "11. GET /v1/contextEntities/type/T1/id/E1/attributes/A2/backup and see it fail remotely"
echo "======================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A2/backup
echo
echo


echo "12. Update/APPEND E1/T1/A2/mID=backup in CP1"
echo "============================================"
payload='{
  "contextElements": [
    {
      "type": "T1",
      "id":   "E1",
      "attributes": [
        {
          "name": "A2",
          "type": "string",
          "value": "1",
          "metadatas": [
            {
              "name":   "ID",
              "type":   "string",
              "value":  "backup"
            }
          ]
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --port $CP1_PORT
echo
echo


echo "13. GET /v1/contextEntities/type/T1/id/E1/attributes/A2/backup and see it work remotely"
echo "======================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A2/backup
echo
echo


--REGEXPECT--
01. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary and see it fail
===============================================================================
HTTP/1.1 200 OK
Content-Length: 132
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404", 
        "details": "Entity-Attribute-MetaID triplet: /E1-A1-primary/", 
        "reasonPhrase": "No context element found"
    }
}


02. Update/APPEND E1/T1/A1/mID=primary
======================================
HTTP/1.1 200 OK
Content-Length: 251
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "metadatas": [
                            {
                                "name": "ID", 
                                "type": "string", 
                                "value": "primary"
                            }
                        ], 
                        "name": "A1", 
                        "type": "string", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary and see it work
===============================================================================
HTTP/1.1 200 OK
Content-Length: 168
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "metadatas": [
                {
                    "name": "ID", 
                    "type": "string", 
                    "value": "primary"
                }
            ], 
            "name": "A1", 
            "type": "string", 
            "value": "1"
        }
    ], 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


04. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?attributesFormat=object and see it work
=======================================================================================================
HTTP/1.1 200 OK
Content-Length: 161
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": {
        "A1": {
            "metadatas": [
                {
                    "name": "ID", 
                    "type": "string", 
                    "value": "primary"
                }
            ], 
            "type": "string", 
            "value": "1"
        }
    }, 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


05. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?entity::type=T1 and see it work
===============================================================================================
HTTP/1.1 200 OK
Content-Length: 168
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "metadatas": [
                {
                    "name": "ID", 
                    "type": "string", 
                    "value": "primary"
                }
            ], 
            "name": "A1", 
            "type": "string", 
            "value": "1"
        }
    ], 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


06. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?exist=entity::type and see it work
==================================================================================================
HTTP/1.1 200 OK
Content-Length: 168
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "metadatas": [
                {
                    "name": "ID", 
                    "type": "string", 
                    "value": "primary"
                }
            ], 
            "name": "A1", 
            "type": "string", 
            "value": "1"
        }
    ], 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


07. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?entity::type=T2 and see it fail
===============================================================================================
HTTP/1.1 200 OK
Content-Length: 104
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "400", 
        "details": "non-matching entity::types in URL", 
        "reasonPhrase": "Bad Request"
    }
}


08. GET /v1/contextEntities/type/T1/id/E1/attributes/A1/primary?!exist=entity::type and see it fail
===================================================================================================
HTTP/1.1 200 OK
Content-Length: 116
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "400", 
        "details": "entity::type cannot be empty for this request", 
        "reasonPhrase": "Bad Request"
    }
}


09. GET /v1/contextEntities/type/T1/id/E1/attributes/A2/backup and see it find nothing
======================================================================================
HTTP/1.1 200 OK
Content-Length: 131
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404", 
        "details": "Entity-Attribute-MetaID triplet: /E1-A2-backup/", 
        "reasonPhrase": "No context element found"
    }
}


10. Register E1/T1/A2/mID=backup for CP1
========================================
HTTP/1.1 200 OK
Content-Length: 62
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


11. GET /v1/contextEntities/type/T1/id/E1/attributes/A2/backup and see it fail remotely
=======================================================================================
HTTP/1.1 200 OK
Content-Length: 131
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404", 
        "details": "Entity-Attribute-MetaID triplet: /E1-A2-backup/", 
        "reasonPhrase": "No context element found"
    }
}


12. Update/APPEND E1/T1/A2/mID=backup in CP1
============================================
HTTP/1.1 200 OK
Content-Length: 250
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "metadatas": [
                            {
                                "name": "ID", 
                                "type": "string", 
                                "value": "backup"
                            }
                        ], 
                        "name": "A2", 
                        "type": "string", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


13. GET /v1/contextEntities/type/T1/id/E1/attributes/A2/backup and see it work remotely
=======================================================================================
HTTP/1.1 200 OK
Content-Length: 167
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "metadatas": [
                {
                    "name": "ID", 
                    "type": "string", 
                    "value": "backup"
                }
            ], 
            "name": "A2", 
            "type": "string", 
            "value": "1"
        }
    ], 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


--TEARDOWN--
brokerStop CB
brokerStop CP1
dbDrop CB
dbDrop CP1
