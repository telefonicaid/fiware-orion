# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
ConvOp putAttributeValueInstanceWithTypeAndId: PUT /v1/contextEntities/type/{entity::type}/id/{entity::id}/attributes/{attribute::name}/{metaID}

--SHELL-INIT--
dbInit CB
dbInit CP1
brokerStart CB  0
brokerStart CP1 0

--SHELL--

#
# 01. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1,A1=1 see it fail
# 02. Update/APPEND E1-T1-A1-M1
# 03. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1,A1=3 see it work
# 04. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M2,A1=4 see it fail
# 05. Query E1-T1, see one attribute A1 with metaID M1
# 06. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1,A1=6 see it work
# 07. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1, with metaID=M2 in payload, see it fail
# 08. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1?entity::type=T2, and see it fail
# 09. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1?exist=entity::type and see it work (URI param ignored)
# 10. Register E2-T1 in CB for CP1
# 11. PUT /v1/contextEntities/type/T1/id/E2/attributes/A1/M1, see it fail (does not exist in CP1)
# 12. GET /v1/contextEntities/type/T1/id/E2/attributes/A1/M1 and see it fail (remotely)
# 13. Update/APPEND E2-T1-A1-M1, A1=13 in CP1
# 14. GET /v1/contextEntities/type/T1/id/E2/attributes/A1/M1 and see it work (remotely)
# 15. PUT /v1/contextEntities/type/T1/id/E2/attributes/A1/M1, see it work
# 16. PUT /v1/contextEntities/type/T1/id/E2/attributes/A1/M2, see it fail
# 17. Query E2-T1, see E2-T1-A1-M1 (A1 == 15)
#

echo "01. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1,A1=1 see it fail"
echo "==========================================================================="
payload='{
  "value": 1
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/M1 --payload "$payload" -X PUT
echo
echo


echo "02. Update/APPEND E1-T1-A1-M1"
echo "============================="
payload='{
  "contextElements": [
    {
      "type" : "T1",
      "id"   : "E1",
      "attributes" : [
        {
          "name" :  "A1",
          "value" : 2,
          "metadatas": [
            {
              "name":  "ID",
              "type":  "string",
              "value": "M1"
            }
          ]
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload"
echo
echo


echo "03. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1,A1=3 see it work"
echo "==========================================================================="
payload='{
  "value": 3
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/M1 --payload "$payload" -X PUT
echo
echo


echo "04. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M2,A1=4 see it fail"
echo "==========================================================================="
payload='{
  "value": 4
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/M2 --payload "$payload" -X PUT
echo
echo


echo "05. Query E1-T1, see one attribute A1 with metaID M1"
echo "===================================================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ]
}'
orionCurl --url /v1/queryContext --payload "${payload}"
echo
echo


echo "06. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1,A1=6 see it work"
echo "==========================================================================="
payload='{
  "value": 6
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/M1 --payload "$payload" -X PUT
echo
echo


echo "07. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1, with metaID=M2 in payload, see it fail"
echo "=================================================================================================="
payload='{
  "value" : 2,
  "metadatas": [
    {
      "name":  "ID",
      "type":  "string",
      "value": "M2"
    }
  ]
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/M1 --payload "$payload" -X PUT
echo
echo


echo "08. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1?entity::type=T2, and see it fail"
echo "==========================================================================================="
payload='{
  "value": 8
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/M1?entity::type=T2 --payload "$payload" -X PUT
echo
echo


echo "09. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1?exist=entity::type and see it work (URI param ignored)"
echo "================================================================================================================="
payload='{
  "value": 9
}'
orionCurl --url /v1/contextEntities/type/T1/id/E1/attributes/A1/M1?exist=entity::type --payload "$payload" -X PUT
echo
echo


echo "10. Register E2-T1 in CB for CP1"
echo "================================"
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "type": "T1",
         "id": "E2"
      }
    ],
    "attributes": [
      {
        "name": "A1",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${CP1_PORT}'/v1"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload"
echo
echo


echo "11. PUT /v1/contextEntities/type/T1/id/E2/attributes/A1/M1, see it fail (does not exist in CP1)"
echo "==============================================================================================="
payload='{
  "value": 5,
  "metadatas": [
    {
      "name":  "ID",
      "type":  "string",
      "value": "M1"
    }
  ]
}'
orionCurl --url /v1/contextEntities/type/T1/id/E2/attributes/A1/M1 --payload "$payload" -X PUT
echo
echo


echo "12. GET /v1/contextEntities/type/T1/id/E2/attributes/A1/M1 and see it fail (remotely)"
echo "====================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E2/attributes/A1/M1
echo
echo


echo "13. Update/APPEND E2-T1-A1-M1, A1=13 in CP1"
echo "==========================================="
payload='{
  "contextElements": [
    {
      "type": "T1",
      "id":   "E2",
      "attributes": [
        {
          "name": "A1",
          "value": 13,
          "metadatas": [
            {
              "name":  "ID",
              "type":  "string",
              "value": "M1"
            }
          ]
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --port $CP1_PORT
echo
echo


echo "14. GET /v1/contextEntities/type/T1/id/E2/attributes/A1/M1 and see it work (remotely)"
echo "====================================================================================="
orionCurl --url /v1/contextEntities/type/T1/id/E2/attributes/A1/M1
echo
echo


echo "15. PUT /v1/contextEntities/type/T1/id/E2/attributes/A1/M1, see it work"
echo "======================================================================="
payload='{
  "value": 15
}'
orionCurl --url /v1/contextEntities/type/T1/id/E2/attributes/A1/M1 --payload "$payload" -X PUT
echo
echo


echo "16. PUT /v1/contextEntities/type/T1/id/E2/attributes/A1/M2, see it fail"
echo "======================================================================="
payload='{
  "value": 16
}'
orionCurl --url /v1/contextEntities/type/T1/id/E2/attributes/A1/M2 --payload "$payload" -X PUT
echo
echo


echo "17. Query E2-T1, see E2-T1-A1-M1 (A1 == 15)"
echo "==========================================="
payload='{
  "entities": [
    {
      "id":   "E2",
      "type": "T1"
    }
  ]
}'
orionCurl --url /v1/queryContext --payload "$payload"
echo
echo


--REGEXPECT--
01. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1,A1=1 see it fail
===========================================================================
HTTP/1.1 200 OK
Content-Length: 71
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "404", 
    "details": "E1", 
    "reasonPhrase": "No context element found"
}


02. Update/APPEND E1-T1-A1-M1
=============================
HTTP/1.1 200 OK
Content-Length: 240
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "metadatas": [
                            {
                                "name": "ID", 
                                "type": "string", 
                                "value": "M1"
                            }
                        ], 
                        "name": "A1", 
                        "type": "", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1,A1=3 see it work
===========================================================================
HTTP/1.1 200 OK
Content-Length: 34
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "200", 
    "reasonPhrase": "OK"
}


04. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M2,A1=4 see it fail
===========================================================================
HTTP/1.1 200 OK
Content-Length: 144
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "472", 
    "details": "action: UPDATE - entity: [E1, T1] - offending attribute: A1", 
    "reasonPhrase": "request parameter is invalid/not allowed"
}


05. Query E1-T1, see one attribute A1 with metaID M1
====================================================
HTTP/1.1 200 OK
Content-Length: 241
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "metadatas": [
                            {
                                "name": "ID", 
                                "type": "string", 
                                "value": "M1"
                            }
                        ], 
                        "name": "A1", 
                        "type": "", 
                        "value": "3"
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


06. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1,A1=6 see it work
===========================================================================
HTTP/1.1 200 OK
Content-Length: 34
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "200", 
    "reasonPhrase": "OK"
}


07. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1, with metaID=M2 in payload, see it fail
==================================================================================================
HTTP/1.1 200 OK
Content-Length: 110
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "400", 
    "details": "unmatching metadata ID value URI/payload: /M1/ vs /M2/", 
    "reasonPhrase": "Bad Request"
}


08. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1?entity::type=T2, and see it fail
===========================================================================================
HTTP/1.1 200 OK
Content-Length: 89
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "400", 
    "details": "non-matching entity::types in URL", 
    "reasonPhrase": "Bad Request"
}


09. PUT /v1/contextEntities/type/T1/id/E1/attributes/A1/M1?exist=entity::type and see it work (URI param ignored)
=================================================================================================================
HTTP/1.1 200 OK
Content-Length: 34
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "200", 
    "reasonPhrase": "OK"
}


10. Register E2-T1 in CB for CP1
================================
HTTP/1.1 200 OK
Content-Length: 62
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


11. PUT /v1/contextEntities/type/T1/id/E2/attributes/A1/M1, see it fail (does not exist in CP1)
===============================================================================================
HTTP/1.1 200 OK
Content-Length: 71
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "404", 
    "details": "E2", 
    "reasonPhrase": "No context element found"
}


12. GET /v1/contextEntities/type/T1/id/E2/attributes/A1/M1 and see it fail (remotely)
=====================================================================================
HTTP/1.1 200 OK
Content-Length: 127
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "statusCode": {
        "code": "404", 
        "details": "Entity-Attribute-MetaID triplet: /E2-A1-M1/",
        "reasonPhrase": "No context element found"
    }
}


13. Update/APPEND E2-T1-A1-M1, A1=13 in CP1
===========================================
HTTP/1.1 200 OK
Content-Length: 240
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "metadatas": [
                            {
                                "name": "ID", 
                                "type": "string", 
                                "value": "M1"
                            }
                        ], 
                        "name": "A1", 
                        "type": "", 
                        "value": ""
                    }
                ], 
                "id": "E2", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


14. GET /v1/contextEntities/type/T1/id/E2/attributes/A1/M1 and see it work (remotely)
=====================================================================================
HTTP/1.1 200 OK
Content-Length: 158
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "attributes": [
        {
            "metadatas": [
                {
                    "name": "ID", 
                    "type": "string", 
                    "value": "M1"
                }
            ], 
            "name": "A1", 
            "type": "", 
            "value": "13"
        }
    ], 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


15. PUT /v1/contextEntities/type/T1/id/E2/attributes/A1/M1, see it work
=======================================================================
HTTP/1.1 200 OK
Content-Length: 34
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "200", 
    "reasonPhrase": "OK"
}


16. PUT /v1/contextEntities/type/T1/id/E2/attributes/A1/M2, see it fail
=======================================================================
HTTP/1.1 200 OK
Content-Length: 144
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "472", 
    "details": "action: UPDATE - entity: [E2, T1] - offending attribute: A1", 
    "reasonPhrase": "request parameter is invalid/not allowed"
}


17. Query E2-T1, see E2-T1-A1-M1 (A1 == 15)
===========================================
HTTP/1.1 200 OK
Content-Length: 242
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "metadatas": [
                            {
                                "name": "ID", 
                                "type": "string", 
                                "value": "M1"
                            }
                        ], 
                        "name": "A1", 
                        "type": "", 
                        "value": "15"
                    }
                ], 
                "id": "E2", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


--TEARDOWN--
brokerStop CB
brokerStop CP1
dbDrop CB
dbDrop CP1
