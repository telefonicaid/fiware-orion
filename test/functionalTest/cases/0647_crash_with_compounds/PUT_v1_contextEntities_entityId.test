# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Attribute Compound Value parsing for PUT /v1/contextEntities/entityId (updateContextElementRequest)

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# Just one request needed here to make dure the broker doesn't crash when receiving
# a compound attribute value for "PUT /v1/contextEntities/entityId":
#
# 01. PUT /v1/contextEntities/entityId with compound attribute value using JSON
#
# However, to see 'good' results, the entity should exist:
#
# 02. POST /v1/contextEntities/entityId with compound attribute value using JSON
#
# Now we try PUT again (and GET to assure it's working):
#
# 03. PUT /v1/contextEntities/entityId with compound attribute value using JSON
# 04. GET /v1/contextEntities/entityId with compound attribute value using JSON
#

echo "01. PUT /v1/contextEntities/entityId with compound attribute value using JSON"
echo "============================================================================="
payload='{
  "attributes": [
    {
        "name": "sdf",
        "type": "",
        "value": {"a": 1}
    }
  ]
}'
orionCurl --url /v1/contextEntities/entityId -X PUT --payload "$payload"
echo
echo


echo "02. POST /v1/contextEntities/entityId with compound attribute value using JSON"
echo "=============================================================================="
payload='{
  "attributes": [
    {
        "name": "sdf",
        "type": "",
        "value": {"a": 1}
    }
  ]
}'
orionCurl --url /v1/contextEntities/entityId --payload "$payload"
echo
echo


echo "03. PUT /v1/contextEntities/entityId with compound attribute value using JSON"
echo "============================================================================="
payload='{
  "attributes": [
    {
        "name": "sdf",
        "type": "",
        "value": {"a": 5}
    }
  ]
}'
orionCurl --url /v1/contextEntities/entityId -X PUT --payload "$payload"
echo
echo


echo "04. GET /v1/contextEntities/entityId with compound attribute value using JSON"
echo "============================================================================="
orionCurl --url /v1/contextEntities/entityId
echo
echo


--REGEXPECT--
01. PUT /v1/contextEntities/entityId with compound attribute value using JSON
=============================================================================
HTTP/1.1 200 OK
Content-Length: 91
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404",
        "details": "entityId",
        "reasonPhrase": "No context element found"
    }
}


02. POST /v1/contextEntities/entityId with compound attribute value using JSON
==============================================================================
HTTP/1.1 200 OK
Content-Length: 169
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "sdf",
                    "type": "",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ],
    "id": "entityId",
    "isPattern": "false",
    "type": ""
}


03. PUT /v1/contextEntities/entityId with compound attribute value using JSON
=============================================================================
HTTP/1.1 200 OK
Content-Length: 123
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "sdf",
                    "type": "",
                    "value": ""
                }
            ],
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


04. GET /v1/contextEntities/entityId with compound attribute value using JSON
=============================================================================
HTTP/1.1 200 OK
Content-Length: 172
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "sdf",
                "type": "",
                "value": {
                    "a": "5"
                }
            }
        ],
        "id": "entityId",
        "isPattern": "false",
        "type": ""
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
