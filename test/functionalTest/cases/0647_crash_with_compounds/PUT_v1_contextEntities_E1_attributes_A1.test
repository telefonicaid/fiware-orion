# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Attribute Compound Value parsing for PUT /v1/contextEntities/E/attributes/A (updateContextAttributeRequest)

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# Just one request needed here to make dure the broker doesn't crash when receiving
# a compound attribute value for "PUT /v1/contextEntities/E/attributes/A":
#
# 01. PUT /v1/contextEntities/E/attributes/A with compound attribute value using JSON
#
# To assure the compounds work, we have to create the entity A with attribute E:
# 02. POST /v1/updateContext to create Entity E, attribute A
# 03. POST /v1/queryContext to make sure 03 worked
#
# Now we do the PUTs again:
#
# 04. PUT /v1/contextEntities/E/attributes/A with compound attribute value using JSON
# 05. POST /v1/queryContext to make sure 05 worked
#


echo "01. PUT /v1/contextEntities/E/attributes/A with compound attribute value using JSON"
echo "==================================================================================="
payload1='{
  "type": "Room",
  "value": { "a": 1 },
  "metadatas": [
    {
      "name": "ID",
      "type": "none",
      "value": "253"
    }
  ]
}'
orionCurl --url /v1/contextEntities/E/attributes/A -X PUT --payload "$payload1"
echo
echo


echo "02. POST /v1/updateContext to create Entity E, attribute A"
echo "=========================================================="
payload3='{
  "contextElements": [
    {
      "type": "T",
      "isPattern": "false",
      "id": "E",
      "attributes": [
        {
          "name": "A",
          "type": "AT1",
          "value": "3",
          "metadatas": [
            {
              "name": "ID",
              "type": "none",
              "value": "253"
            }
          ]
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload3"
echo
echo


echo "03. GET /v1/contextEntities/E to make sure 03 worked"
echo "===================================================="
orionCurl --url /v1/contextEntities/E
echo
echo


echo "04. PUT /v1/contextEntities/E/attributes/A with compound attribute value using JSON"
echo "==================================================================================="
payload5='{
  "type": "Room",
  "value": { "a": 5 },
  "metadatas": [
    {
      "name": "ID",
      "type": "none",
      "value": 253
    }
  ]
}'
orionCurl --url /v1/contextEntities/E/attributes/A -X PUT --payload "$payload5"
echo
echo


echo "05. GET /v1/contextEntities/E to make sure 05 worked"
echo "===================================================="
orionCurl --url /v1/contextEntities/E
echo
echo


--REGEXPECT--
01. PUT /v1/contextEntities/E/attributes/A with compound attribute value using JSON
===================================================================================
HTTP/1.1 200 OK
Content-Length: 70
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "404",
    "details": "E",
    "reasonPhrase": "No context element found"
}


02. POST /v1/updateContext to create Entity E, attribute A
==========================================================
HTTP/1.1 200 OK
Content-Length: 239
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "metadatas": [
                            {
                                "name": "ID",
                                "type": "none",
                                "value": "253"
                            }
                        ],
                        "name": "A",
                        "type": "AT1",
                        "value": ""
                    }
                ],
                "id": "E",
                "isPattern": "false",
                "type": "T"
            },
            "statusCode": {
                "code": "200",
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. GET /v1/contextEntities/E to make sure 03 worked
====================================================
HTTP/1.1 200 OK
Content-Length: 217
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "metadatas": [
                    {
                        "name": "ID",
                        "type": "none",
                        "value": "253"
                    }
                ],
                "name": "A",
                "type": "AT1",
                "value": "3"
            }
        ],
        "id": "E",
        "isPattern": "false",
        "type": "T"
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


04. PUT /v1/contextEntities/E/attributes/A with compound attribute value using JSON
===================================================================================
HTTP/1.1 200 OK
Content-Length: 34
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "code": "200",
    "reasonPhrase": "OK"
}


05. GET /v1/contextEntities/E to make sure 05 worked
====================================================
HTTP/1.1 200 OK
Content-Length: 224
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "metadatas": [
                    {
                        "name": "ID",
                        "type": "none",
                        "value": "253"
                    }
                ],
                "name": "A",
                "type": "Room",
                "value": {
                    "a": "5"
                }
            }
        ],
        "id": "E",
        "isPattern": "false",
        "type": "T"
    },
    "statusCode": {
        "code": "200",
        "reasonPhrase": "OK"
    }
}


--TEARDOWN--
brokerStop CB
dbDrop CB
