# Copyright 2019 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Notify only attributes that change get with alterationType on entityDelete

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print


--SHELL--

#
# 01. Create entity E-A,B,C
# 02. Create a subscription with onlyChangedAttrs: true, alterationsTypes: entityDelete and notify alterationType
# 03. Delete E
# 04. Dump notification get E with alterationType entityDelete
#


echo '01. Create entity E-A,B,C'
echo '========================='
payload='{
  "id": "E",
  "type": "T",
  "A": {
    "value": 1,
    "type": "Number"
  },
  "B": {
    "value": 1,
    "type": "Number"
  },
  "C": {
    "value": 1,
    "type": "Number"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo '02. Create a subscription with onlyChangedAttrs: true, alterationsTypes: entityDelete and notify alterationType'
echo '==============================================================================================================='
payload='{
  "subject": {
    "entities": [
      {
        "id": "E",
        "type": "T"
      }
    ],
    "condition": {
      "alterationTypes": [ "entityDelete" ]
    }
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    },
    "attrs": [ "alterationType" ],
    "onlyChangedAttrs": true
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo '03. Delete E'
echo '============'
orionCurl --url /v2/entities/E -X DELETE
echo
echo


echo '04. Dump notification get E with alterationType entityDelete'
echo '============================================================'
accumulatorDump
echo
echo


--REGEXPECT--
01. Create entity E-A,B,C
=========================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/entities/E?type=T
Content-Length: 0



02. Create a subscription with onlyChangedAttrs: true, alterationsTypes: entityDelete and notify alterationType
===============================================================================================================
HTTP/1.1 201 Created
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Content-Length: 0



03. Delete E
============
HTTP/1.1 204 No Content
Date: REGEX(.*)
Fiware-Correlator: REGEX([0-9a-f\-]{36})



04. Dump notification get E with alterationType entityDelete
============================================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 146
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "alterationType": {
                "metadata": {},
                "type": "Text",
                "value": "entityDelete"
            },
            "id": "E",
            "type": "T"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================


--TEARDOWN--
brokerStop CB
dbDrop CB
accumulatorStop
