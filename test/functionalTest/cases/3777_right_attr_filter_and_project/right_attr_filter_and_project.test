# Copyright 2018 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Right attribute filter and proyection implementation

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. Create entity E1 with attributes A, B
# 02. Create entity E2 with attributes A, C
# 03. GET /v2/entities?q=C, gets E2 attrs A and C
# 04. GET /v2/entities?attrs=C, gets E1 without attributes and E2 with attr C
# 05. GET /v2/entities?q=C&attrs=A, get E2 attr A
# 06. GET /v2/entities?q=foo, get no entity
# 07. GET /v2/entities?attrs=foo, get both entities without attributes
#


echo "01. Create entity E1 with attributes A, B"
echo "========================================="
payload='{
  "id": "E1",
  "type": "T",
  "A": {
    "value": "1A",
    "type": "Text"
  },
  "B": {
    "value": "1B",
    "type": "Text"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "02. Create entity E2 with attributes A, C"
echo "========================================="
payload='{
  "id": "E2",
  "type": "T",
  "A": {
    "value": "2A",
    "type": "Text"
  },
  "C": {
    "value": "2C",
    "type": "Text"
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "03. GET /v2/entities?q=C, gets E2 attrs A and C"
echo "==============================================="
orionCurl --url '/v2/entities?q=C'
echo
echo


echo "04. GET /v2/entities?attrs=C, gets E1 without attributes and E2 with attr C"
echo "==========================================================================="
orionCurl --url '/v2/entities?attrs=C'
echo
echo


echo "05. GET /v2/entities?q=C&attrs=A, get E2 attr A"
echo "==============================================="
orionCurl --url '/v2/entities?q=C&attrs=A'
echo
echo


echo "06. GET /v2/entities?q=foo, get no entity"
echo "========================================="
orionCurl --url '/v2/entities?q=foo'
echo
echo


echo "07. GET /v2/entities?attrs=foo, get both entities without attributes"
echo "===================================================================="
orionCurl --url '/v2/entities?attrs=foo'
echo
echo


--REGEXPECT--
01. Create entity E1 with attributes A, B
=========================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E1?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. Create entity E2 with attributes A, C
=========================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E2?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. GET /v2/entities?q=C, gets E2 attrs A and C
===============================================
HTTP/1.1 200 OK
Content-Length: 118
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "A": {
            "metadata": {},
            "type": "Text",
            "value": "2A"
        },
        "C": {
            "metadata": {},
            "type": "Text",
            "value": "2C"
        },
        "id": "E2",
        "type": "T"
    }
]


04. GET /v2/entities?attrs=C, gets E1 without attributes and E2 with attr C
===========================================================================
HTTP/1.1 200 OK
Content-Length: 94
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "id": "E1",
        "type": "T"
    },
    {
        "C": {
            "metadata": {},
            "type": "Text",
            "value": "2C"
        },
        "id": "E2",
        "type": "T"
    }
]


05. GET /v2/entities?q=C&attrs=A, get E2 attr A
===============================================
HTTP/1.1 200 OK
Content-Length: 71
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "A": {
            "metadata": {},
            "type": "Text",
            "value": "2A"
        },
        "id": "E2",
        "type": "T"
    }
]


06. GET /v2/entities?q=foo, get no entity
=========================================
HTTP/1.1 200 OK
Content-Length: 2
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[]


07. GET /v2/entities?attrs=foo, get both entities without attributes
====================================================================
HTTP/1.1 200 OK
Content-Length: 47
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "id": "E1",
        "type": "T"
    },
    {
        "id": "E2",
        "type": "T"
    }
]


--TEARDOWN--
brokerStop CB
dbDrop CB
