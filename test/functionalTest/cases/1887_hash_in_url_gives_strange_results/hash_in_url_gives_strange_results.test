# Copyright 2016 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

#
# NOTE: where before the hash sign were used, now we use a '<' sign.
#       This is because the hash sign is cutting the URL in modern versions
#       of curl. The version of curl in CentOS 6.* doesn't do this (cut URL at #),
#       so the original test worked just fine.
#       However, in more modern distros, the test with '#' doesn't make any sense.
#       Changing the '#' for '<', the test makes sense again.
#       The old name has been kept. This might be a good or bad idea. Up for discussion ...
#
#       See https://stackoverflow.com/questions/46281537/why-modern-curl-versions-cut-off-the-anchor-part-of-the-url
#
--NAME--
Hash sign in URL gives strange results

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. GET /v2/entities/E1_#/attrs/A1/value
# 02. GET /v2/entities/E1/attrs/A1_#/value
# 03. GET /v2/entities/E1_#/attrs/A1/value, Accept text/plain
# 04. GET /v2/entities/E1/attrs/A1_#/value, Accept text/plain
#

echo '01. GET /v2/entities/E1_</attrs/A1/value'
echo '========================================'
orionCurl --url '/v2/entities/E1_</attrs/A1/value'
echo
echo


echo '02. GET /v2/entities/E1/attrs/A1_</value'
echo '========================================'
orionCurl --url '/v2/entities/E1/attrs/A1_</value'
echo
echo


echo '03. GET /v2/entities/E1_</attrs/A1/value, Accept text/plain'
echo '==========================================================='
orionCurl --url '/v2/entities/E1_</attrs/A1/value' --out text/plain
echo
echo


echo '04. GET /v2/entities/E1/attrs/A1_</value, Accept text/plain'
echo '==========================================================='
orionCurl --url '/v2/entities/E1/attrs/A1_</value' --out text/plain
echo
echo


--REGEXPECT--
01. GET /v2/entities/E1_</attrs/A1/value
========================================
HTTP/1.1 400 Bad Request
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "invalid character in URI",
    "error": "BadRequest"
}


02. GET /v2/entities/E1/attrs/A1_</value
========================================
HTTP/1.1 400 Bad Request
Content-Length: 63
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "invalid character in URI",
    "error": "BadRequest"
}


03. GET /v2/entities/E1_</attrs/A1/value, Accept text/plain
===========================================================
HTTP/1.1 400 Bad Request
Content-Length: 63
Content-Type: text/plain
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{"error":"BadRequest","description":"invalid character in URI"}


04. GET /v2/entities/E1/attrs/A1_</value, Accept text/plain
===========================================================
HTTP/1.1 400 Bad Request
Content-Length: 63
Content-Type: text/plain
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{"error":"BadRequest","description":"invalid character in URI"}


--TEARDOWN--
brokerStop CB
dbDrop CB
