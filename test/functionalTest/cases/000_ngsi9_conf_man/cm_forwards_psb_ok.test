# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# fermin at tid dot es

--NAME--
CM forwards PSB OK
--SHELL-INIT--
dbInit CB
dbInit CM

brokerStart CB 0-255
brokerStart CM 0-255

--SHELL--
# Do a /v1 request to check the operation is avoided
url="/v1/queryContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>pressure</attribute>
    <attribute>lightstatus</attribute>
  </attributeList>
</queryContextRequest>'
orionCurl --url "$url" --payload "${payload}" --port ${CM_PORT}

echo "1: ++++++++++++++++++++"
# Do initial registration in the CM

url="/v1/registry/registerContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
  <registerContextRequest>
    <contextRegistrationList>
      <contextRegistration>
        <entityIdList>
          <entityId type="Room" isPattern="false">
            <id>ConferenceRoom</id>
          </entityId>
          <entityId type="Room" isPattern="false">
            <id>OfficeRoom</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>temperature</name>
            <type>degree</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/application</providingApplication>
      </contextRegistration>
    </contextRegistrationList>
    <duration>PT1H</duration>
    <registrationId></registrationId>
  </registerContextRequest>'
orionCurl --url "$url" --payload "${payload}" --port ${CM_PORT}

REG_ID=$(echo "$_response" | grep registrationId | awk -F '>' '{print $2}' | awk -F '<' '{print $1}' | grep -v '^$' )

echo "2: ++++++++++++++++++++"

# Check the registration in CM 
url="/v1/registry/discoverContextAvailability"
payload='<?xml version="1.0" encoding="UTF-8"?>
<discoverContextAvailabilityRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>ConferenceRoom</id>
    </entityId>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>temperature</attribute>
    <attribute>pressure</attribute>
  </attributeList>
</discoverContextAvailabilityRequest>'
orionCurl --url "$url" --payload "${payload}" --port ${CM_PORT}

echo "3: ++++++++++++++++++++"

# Check the registration in PSB
url="/v1/registry/discoverContextAvailability"
payload='<?xml version="1.0" encoding="UTF-8"?>
  <discoverContextAvailabilityRequest>
    <entityIdList>
      <entityId type="Room" isPattern="false">
        <id>ConferenceRoom</id>
      </entityId>
      <entityId type="Room" isPattern="false">
        <id>OfficeRoom</id>
      </entityId>
    </entityIdList>
    <attributeList>
      <attribute>temperature</attribute>
      <attribute>pressure</attribute>
    </attributeList>
  </discoverContextAvailabilityRequest>'
orionCurl --url "$url" --payload "${payload}"

echo "4: ++++++++++++++++++++"

# Update registration in CM
url="/v1/registry/registerContext"
payload='<?xml version="1.0" encoding="UTF-8"?>
  <registerContextRequest>
    <contextRegistrationList>
      <contextRegistration>
        <entityIdList>
          <entityId type="Car" isPattern="false">
            <id>MyCar</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>speed</name>
            <type>float</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/mycar</providingApplication>
      </contextRegistration>
    </contextRegistrationList>
    <duration>PT5H</duration>
    <registrationId>'$REG_ID'</registrationId>
  </registerContextRequest>'
orionCurl --url "$url" --payload "${payload}" --port ${CM_PORT}

echo "5: ++++++++++++++++++++"

# Check the registration in CM
url="/v1/registry/discoverContextAvailability"
payload='<?xml version="1.0" encoding="UTF-8"?>
<discoverContextAvailabilityRequest>
  <entityIdList>
    <entityId type="Car" isPattern="false">
      <id>MyCar</id>
    </entityId>
  </entityIdList>
  <attributeList>
  </attributeList>
</discoverContextAvailabilityRequest>'
orionCurl --url "$url" --payload "${payload}" --port ${CM_PORT}

echo "6: ++++++++++++++++++++"

# Check the registration in PSB
url="/v1/registry/discoverContextAvailability"
payload='<?xml version="1.0" encoding="UTF-8"?>
<discoverContextAvailabilityRequest>
  <entityIdList>
    <entityId type="Car" isPattern="false">
      <id>MyCar</id>
    </entityId>
  </entityIdList>
  <attributeList>
  </attributeList>
</discoverContextAvailabilityRequest>'
orionCurl --url "$url" --payload "${payload}"

echo "7: ++++++++++++++++++++"

# Check that everything is ok at database layer
mongoCmd ${CB_DATABASE_NAME} 'db.registrations.count()'
mongoCmd ${CM_DATABASE_NAME} 'db.registrations.count()'

RESULT=$(mongoCmd ${CB_DATABASE_NAME} 'db.registrations.find({}, {_id: 1})')
# The next line is based in processing the following pattern:
#   { "_id" : ObjectId("5213a9a1db818a34990755c3") }
ID1=$(echo $RESULT | awk '{print $4}' | awk -F '"' '{print $2}')

RESULT=$(mongoCmd ${CM_DATABASE_NAME} 'db.registrations.find({}, {fwdRegId: 1, _id: 0})')
# The next line is based in processing the following pattern:
#   { "fwdRegId" : "5213a9a1db818a34990755c3" }
ID2=$(echo $RESULT | awk '{print $4}' | awk -F '"' '{print $2}')

if [ "$ID1" == "$ID2" ]
then
   echo "OK"
else
   echo "different IDs: <$ID1> and <$ID2>"
fi

--REGEXPECT--
HTTP/1.1 200 OK
Content-Length: 128
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<orionError>
  <code>400</code>
  <reasonPhrase>Bad Request</reasonPhrase>
  <details>service not found</details>
</orionError>
1: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 141
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT1H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>
2: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 902
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="Room" isPattern="false">
            <id>ConferenceRoom</id>
          </entityId>
          <entityId type="Room" isPattern="false">
            <id>OfficeRoom</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>temperature</name>
            <type>degree</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/application</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
3: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 902
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="Room" isPattern="false">
            <id>ConferenceRoom</id>
          </entityId>
          <entityId type="Room" isPattern="false">
            <id>OfficeRoom</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>temperature</name>
            <type>degree</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/application</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
4: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 141
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT5H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>
5: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 774
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="Car" isPattern="false">
            <id>MyCar</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>speed</name>
            <type>float</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/mycar</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
6: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 774
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="Car" isPattern="false">
            <id>MyCar</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>speed</name>
            <type>float</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/mycar</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>
7: ++++++++++++++++++++
1
1
OK
--TEARDOWN--
brokerStop CB
brokerStop CM

dbDrop CB
dbDrop CM
