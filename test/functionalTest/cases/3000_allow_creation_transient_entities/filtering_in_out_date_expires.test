# Copyright 2018 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Filtering in and out dateExpires builtin attribute

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# 01. Create entity with attributes A, B and dateExpires
# 02. GET /v2/entities/E and get A and B
# 03. GET /v2/entities/E?attrs=dateExpires and get dateExpires
# 04. GET /v2/entities/E?attrs=dateExpires,A and get dateExpires and A
# 05. GET /v2/entities/E?attrs=dateExpires,* and get dateExpires, A and B
# 06. POST /v2/op/query on E and get A and B
# 07. POST /v2/op/query on E with attrs: [ dateExpires ] and get dateExpires
# 08. POST /v2/op/query on E with attrs: [ dateExpires, A ] and get dateExpires and A
# 09. POST /v2/op/query on E with attrs: [ dateExpires, * ] and get dateExpires, A and B
#

echo "01. Create entity with attributes A, B and dateExpires"
echo "======================================================"
payload='{
    "id": "E",
    "type": "T",
    "dateExpires":{
      "type": "DateTime",
      "value": "2050-01-01T00:00:00Z"
    },
    "A": {
      "type": "Text",
      "value": "foo"
    },
    "B": {
      "type": "Text",
      "value": "bar"
    }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "02. GET /v2/entities/E and get A and B"
echo "======================================"
orionCurl --url '/v2/entities/E'
echo
echo


echo "03. GET /v2/entities/E?attrs=dateExpires and get dateExpires"
echo "============================================================"
orionCurl --url '/v2/entities/E?attrs=dateExpires'
echo
echo


echo "04. GET /v2/entities/E?attrs=dateExpires,A and get dateExpires and A"
echo "===================================================================="
orionCurl --url '/v2/entities/E?attrs=dateExpires,A'
echo
echo


echo "05. GET /v2/entities/E?attrs=dateExpires,* and get dateExpires, A and B"
echo "======================================================================="
orionCurl --url '/v2/entities/E?attrs=dateExpires,*'
echo
echo


echo "06. POST /v2/op/query on E and get A and B"
echo "=========================================="
payload='{
  "entities": [
    {
      "id": "E",
      "type": "T"
    }
  ]
}'
orionCurl --url /v2/op/query --payload "$payload"
echo
echo


echo "07. POST /v2/op/query on E with attrs: [ dateExpires ] and get dateExpires"
echo "=========================================================================="
payload='{
  "entities": [
    {
      "id": "E",
      "type": "T"
    }
  ],
  "attrs": [ "dateExpires" ]
}'
orionCurl --url /v2/op/query --payload "$payload"
echo
echo


echo "08. POST /v2/op/query on E with attrs: [ dateExpires, A ] and get dateExpires and A"
echo "==================================================================================="
payload='{
  "entities": [
    {
      "id": "E",
      "type": "T"
    }
  ],
  "attrs": [ "dateExpires", "A" ]
}'
orionCurl --url /v2/op/query --payload "$payload"
echo
echo


echo "09. POST /v2/op/query on E with attrs: [ dateExpires, * ] and get dateExpires, A and B"
echo "======================================================================================"
payload='{
  "entities": [
    {
      "id": "E",
      "type": "T"
    }
  ],
  "attrs": [ "dateExpires", "*" ]
}'
orionCurl --url /v2/op/query --payload "$payload"
echo
echo


--REGEXPECT--
01. Create entity with attributes A, B and dateExpires
======================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. GET /v2/entities/E and get A and B
======================================
HTTP/1.1 200 OK
Content-Length: 117
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "A": {
        "metadata": {},
        "type": "Text",
        "value": "foo"
    },
    "B": {
        "metadata": {},
        "type": "Text",
        "value": "bar"
    },
    "id": "E",
    "type": "T"
}


03. GET /v2/entities/E?attrs=dateExpires and get dateExpires
============================================================
HTTP/1.1 200 OK
Content-Length: 103
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "dateExpires": {
        "metadata": {},
        "type": "DateTime",
        "value": "2050-01-01T00:00:00.00Z"
    },
    "id": "E",
    "type": "T"
}


04. GET /v2/entities/E?attrs=dateExpires,A and get dateExpires and A
====================================================================
HTTP/1.1 200 OK
Content-Length: 151
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "A": {
        "metadata": {},
        "type": "Text",
        "value": "foo"
    },
    "dateExpires": {
        "metadata": {},
        "type": "DateTime",
        "value": "2050-01-01T00:00:00.00Z"
    },
    "id": "E",
    "type": "T"
}


05. GET /v2/entities/E?attrs=dateExpires,* and get dateExpires, A and B
=======================================================================
HTTP/1.1 200 OK
Content-Length: 199
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "A": {
        "metadata": {},
        "type": "Text",
        "value": "foo"
    },
    "B": {
        "metadata": {},
        "type": "Text",
        "value": "bar"
    },
    "dateExpires": {
        "metadata": {},
        "type": "DateTime",
        "value": "2050-01-01T00:00:00.00Z"
    },
    "id": "E",
    "type": "T"
}


06. POST /v2/op/query on E and get A and B
==========================================
HTTP/1.1 200 OK
Content-Length: 119
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "A": {
            "metadata": {},
            "type": "Text",
            "value": "foo"
        },
        "B": {
            "metadata": {},
            "type": "Text",
            "value": "bar"
        },
        "id": "E",
        "type": "T"
    }
]


07. POST /v2/op/query on E with attrs: [ dateExpires ] and get dateExpires
==========================================================================
HTTP/1.1 200 OK
Content-Length: 105
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "dateExpires": {
            "metadata": {},
            "type": "DateTime",
            "value": "2050-01-01T00:00:00.00Z"
        },
        "id": "E",
        "type": "T"
    }
]


08. POST /v2/op/query on E with attrs: [ dateExpires, A ] and get dateExpires and A
===================================================================================
HTTP/1.1 200 OK
Content-Length: 153
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "A": {
            "metadata": {},
            "type": "Text",
            "value": "foo"
        },
        "dateExpires": {
            "metadata": {},
            "type": "DateTime",
            "value": "2050-01-01T00:00:00.00Z"
        },
        "id": "E",
        "type": "T"
    }
]


09. POST /v2/op/query on E with attrs: [ dateExpires, * ] and get dateExpires, A and B
======================================================================================
HTTP/1.1 200 OK
Content-Length: 201
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

[
    {
        "A": {
            "metadata": {},
            "type": "Text",
            "value": "foo"
        },
        "B": {
            "metadata": {},
            "type": "Text",
            "value": "bar"
        },
        "dateExpires": {
            "metadata": {},
            "type": "DateTime",
            "value": "2050-01-01T00:00:00.00Z"
        },
        "id": "E",
        "type": "T"
    }
]


--TEARDOWN--
brokerStop CB
dbDrop CB
