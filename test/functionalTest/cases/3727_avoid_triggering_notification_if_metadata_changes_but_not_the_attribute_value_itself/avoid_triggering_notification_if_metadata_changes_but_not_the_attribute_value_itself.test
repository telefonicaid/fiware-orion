# Copyright 2022 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
avoid_triggering_notification_if_metadata_changes_but_not_the_attribute_value_itself

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart --pretty-print

--SHELL--

#
# 01. POST /v2/entities, to create Room1 with attribute and metadata.
# 02. POST /v2/subscriptions, to create subscription for Room1 with notifyOnMetadataChange=false.
# 03. PATCH /v2/entities/Room1/attrs, to update the value of metadata.
# 04. Dump the accumulator, see no notification when metadata changes.
# 05. PATCH /v2/entities/Room1/attrs, to update the value of attribute.
# 06. Dump the accumulator, see the notification when value of attribute changes.
# 07. POST /v2/entities, to create Room2 with attribute and metadata.
# 08. POST /v2/subscriptions, to create subscription for Room2 with notifyOnMetadataChange=true.
# 09. PATCH /v2/entities/Room2/attrs, to update the value of metadata.
# 10. Dump the accumulator, see the notification when metadata changes.
# 11. PATCH /v2/entities/Room2/attrs, to update the value of attribute.
# 12. Dump the accumulator, see the notification when value of attribute changes.
# 13. POST /v2/subscriptions, to create subscription for Room3 with notifyOnMetadataChange=foo and see error.
#


echo '01. POST /v2/entities, to create Room1 with attribute and metadata.'
echo '==================================================================='
payload='{
  "id": "Room1",
  "type": "Room",
  "temperature": {
    "value": 26.5,
    "type": "Float",
    "metadata": {
      "accuracy": {
        "value": 0.8,
        "type": "Float"
      }
    }
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo



echo '02. POST /v2/subscriptions, to create subscription for Room1 with notifyOnMetadataChange=false.'
echo '==============================================================================================='
payload='{
  "description": "A subscription to get info about Room1",
  "subject": {
    "entities": [
      {
        "id": "Room1",
        "type": "Room"
      }
    ],
    "condition": {
      "attrs": [
        "temperature"
      ]
    }
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    },
    "attrs": [
      "temperature"
    ],
    "notifyOnMetadataChange": false
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
subId=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")
echo
echo



echo '03. PATCH /v2/entities/Room1/attrs, to update the value of metadata.'
echo '===================================================================='
payload='{
  "temperature": {
    "value": 26.5,
    "type": "Float",
    "metadata": {
      "accuracy": {
        "value": 1.8,
        "type": "Float"
      }
    }
  }
}'
orionCurl --url /v2/entities/Room1/attrs --payload "$payload" -X PATCH
echo
echo



echo "04. Dump the accumulator, see no notification when metadata changes."
echo "===================================================================="
accumulatorDump
accumulatorReset
echo
echo



echo '05. PATCH /v2/entities/Room1/attrs, to update the value of attribute.'
echo '====================================================================='
payload='{
  "temperature": {
    "value": 16.5,
    "type": "Float",
    "metadata": {
      "accuracy": {
        "value": 1.8,
        "type": "Float"
      }
    }
  }
}'
orionCurl --url /v2/entities/Room1/attrs --payload "$payload" -X PATCH
echo
echo



echo "06. Dump the accumulator, see the notification when value of attribute changes."
echo "==============================================================================="
accumulatorDump
accumulatorReset
echo
echo



echo '07. POST /v2/entities, to create Room2 with attribute and metadata.'
echo '==================================================================='
payload='{
  "id": "Room2",
  "type": "Room",
  "temperature": {
    "value": 26.5,
    "type": "Float",
    "metadata": {
      "accuracy": {
        "value": 1.5,
        "type": "Float"
      }
    }
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo



echo '08. POST /v2/subscriptions, to create subscription for Room2 with notifyOnMetadataChange=true.'
echo '=============================================================================================='
payload='{
  "description": "A subscription to get info about Room2",
  "subject": {
    "entities": [
      {
        "id": "Room2",
        "type": "Room"
      }
    ],
    "condition": {
      "attrs": [
        "temperature"
      ]
    }
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    },
    "attrs": [
      "temperature"
    ],
    "notifyOnMetadataChange": true
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
subId=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")
echo
echo



echo '09. PATCH /v2/entities/Room2/attrs, to update the value of metadata.'
echo '===================================================================='
payload='{
  "temperature": {
    "value": 26.5,
    "type": "Float",
    "metadata": {
      "accuracy": {
        "value": 2.5,
        "type": "Float"
      }
    }
  }
}'
orionCurl --url /v2/entities/Room2/attrs --payload "$payload" -X PATCH
echo
echo



echo "10. Dump the accumulator, see the notification when metadata changes."
echo "===================================================================="
accumulatorDump
accumulatorReset
echo
echo



echo '11. PATCH /v2/entities/Room2/attrs, to update the value of attribute.'
echo '====================================================================='
payload='{
  "temperature": {
    "value": 16.5,
    "type": "Float",
    "metadata": {
      "accuracy": {
        "value": 2.5,
        "type": "Float"
      }
    }
  }
}'
orionCurl --url /v2/entities/Room2/attrs --payload "$payload" -X PATCH
echo
echo



echo "12. Dump the accumulator, see the notification when value of attribute changes."
echo "==============================================================================="
accumulatorDump
accumulatorReset
echo
echo



echo '13. POST /v2/subscriptions, to create subscription for Room3 with notifyOnMetadataChange=foo and see error.'
echo '==========================================================================================================='
payload='{
  "description": "A subscription to get info about Room3",
  "subject": {
    "entities": [
      {
        "id": "Room3",
        "type": "Room"
      }
    ],
    "condition": {
      "attrs": [
        "temperature"
      ]
    }
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    },
    "attrs": [
      "temperature"
    ],
    "notifyOnMetadataChange": "foo"
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo



--REGEXPECT--
01. POST /v2/entities, to create Room1 with attribute and metadata.
===================================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/Room1?type=Room
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. POST /v2/subscriptions, to create subscription for Room1 with notifyOnMetadataChange=false.
===============================================================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. PATCH /v2/entities/Room1/attrs, to update the value of metadata.
====================================================================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



04. Dump the accumulator, see no notification when metadata changes.
====================================================================


05. PATCH /v2/entities/Room1/attrs, to update the value of attribute.
=====================================================================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



06. Dump the accumulator, see the notification when value of attribute changes.
===============================================================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 180
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "id": "Room1",
            "temperature": {
                "metadata": {
                    "accuracy": {
                        "type": "Float",
                        "value": 1.8
                    }
                },
                "type": "Float",
                "value": 16.5
            },
            "type": "Room"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================


07. POST /v2/entities, to create Room2 with attribute and metadata.
===================================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/Room2?type=Room
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



08. POST /v2/subscriptions, to create subscription for Room2 with notifyOnMetadataChange=true.
==============================================================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



09. PATCH /v2/entities/Room2/attrs, to update the value of metadata.
====================================================================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



10. Dump the accumulator, see the notification when metadata changes.
====================================================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 180
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "id": "Room2",
            "temperature": {
                "metadata": {
                    "accuracy": {
                        "type": "Float",
                        "value": 2.5
                    }
                },
                "type": "Float",
                "value": 26.5
            },
            "type": "Room"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================


11. PATCH /v2/entities/Room2/attrs, to update the value of attribute.
=====================================================================
HTTP/1.1 204 No Content
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



12. Dump the accumulator, see the notification when value of attribute changes.
===============================================================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 180
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36}); cbnotif=1

{
    "data": [
        {
            "id": "Room2",
            "temperature": {
                "metadata": {
                    "accuracy": {
                        "type": "Float",
                        "value": 2.5
                    }
                },
                "type": "Float",
                "value": 16.5
            },
            "type": "Room"
        }
    ],
    "subscriptionId": "REGEX([0-9a-f]{24})"
}
=======================================


13. POST /v2/subscriptions, to create subscription for Room3 with notifyOnMetadataChange=foo and see error.
===========================================================================================================
HTTP/1.1 400 Bad Request
Content-Length: 75
Content-Type: application/json
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)

{
    "description": "notifyOnMetadataChange is not a bool",
    "error": "BadRequest"
}


--TEARDOWN--
brokerStop CB
dbDrop CB
