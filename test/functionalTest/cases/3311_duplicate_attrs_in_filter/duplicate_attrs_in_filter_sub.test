# Copyright 2018 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Subscription with duplicated items in attrs filter

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart

--SHELL--

#
# 01. Create entity E with atributes A and B
# 02. Create subscription with attrs: A, A, A (triggers notif)
# 03. Update attribute A in entity (triggers notif)
# 04. Update subscription (triggeres notif)
# 05. Dump accumulator and see three notification, each one with A only one time
#


echo "01. Create entity E with atributes A and B"
echo "=========================================="
payload='{
  "id": "E",
  "type": "T",
  "A":{
    "type": "Number",
    "value": 1
  },
  "B":{
    "type": "Number",
    "value" : 2
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "02. Create subscription with attrs: A, A, A (triggers notif)"
echo "============================================================"
payload='{
  "subject": {
    "entities": [
      {
        "idPattern": "E.*"
      }
    ],
    "condition": {
      "attrs": [ "A" ]
    }
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    },
    "attrs": [ "A", "A", "A" ]
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo

SUB_ID=$(echo "$_responseHeaders" | grep Location | awk -F/ '{ print $4 }' | tr -d "\r\n")


echo "03. Update attribute A in entity (triggers notif)"
echo "================================================="
payload='{
  "A":{
    "type": "Number",
    "value": 2
  }
}'
orionCurl --url /v2/entities/E/attrs -X PATCH --payload "$payload"
echo
echo


echo "04. Update subscription (triggeres notif)"
echo "========================================="
payload='{
  "subject": {
    "entities": [
      {
        "id": "E"
      }
    ],
    "condition": {
      "attrs": [ "A" ]
    }
  },
  "notification": {
    "http": {
      "url": "http://localhost:'$LISTENER_PORT'/notify"
    },
    "attrs": [ "A", "A", "A" ]
  }
}'
orionCurl --url /v2/subscriptions/$SUB_ID -X PATCH --payload "$payload"
echo
echo


echo "05. Dump accumulator and see three notification, each one with A only one time"
echo "=============================================================================="
accumulatorDump
echo
echo


--REGEXPECT--
01. Create entity E with atributes A and B
==========================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/entities/E?type=T
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



02. Create subscription with attrs: A, A, A (triggers notif)
============================================================
HTTP/1.1 201 Created
Content-Length: 0
Location: /v2/subscriptions/REGEX([0-9a-f]{24})
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



03. Update attribute A in entity (triggers notif)
=================================================
HTTP/1.1 204 No Content
Content-Length: 0
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



04. Update subscription (triggeres notif)
=========================================
HTTP/1.1 204 No Content
Content-Length: 0
Fiware-Correlator: REGEX([0-9a-f\-]{36})
Date: REGEX(.*)



05. Dump accumulator and see three notification, each one with A only one time
==============================================================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 122
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36})

{"subscriptionId":"REGEX([0-9a-f]{24})","data":[{"id":"E","type":"T","A":{"type":"Number","value":1,"metadata":{}}}]}=======================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 122
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36})

{"subscriptionId":"REGEX([0-9a-f]{24})","data":[{"id":"E","type":"T","A":{"type":"Number","value":2,"metadata":{}}}]}=======================================
POST http://localhost:REGEX(\d+)/notify
Fiware-Servicepath: /
Content-Length: 122
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Ngsiv2-Attrsformat: normalized
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json; charset=utf-8
Fiware-Correlator: REGEX([0-9a-f\-]{36})

{"subscriptionId":"REGEX([0-9a-f]{24})","data":[{"id":"E","type":"T","A":{"type":"Number","value":2,"metadata":{}}}]}=======================================


--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
