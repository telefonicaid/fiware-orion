FORMAT: 1A
HOST: http://orion.lab.fiware.org
TITLE: FIWARE-NGSI v2 Specification
DATE: 30 September 2015
VERSION: 2.0-wip1
PREVIOUS_VERSION: <placeholder>
APIARY_PROJECT: fiware-ngsi-v2
SPEC_URL: https://telefonicaid.github.io/fiware-orion/api/v2/
GITHUB_SOURCE: http://github.com/telefonicaid/fiware-orion.git

# FIWARE-NGSI v2 Specification

This specification defines the FIWARE-NGSI version 2 API. FIWARE-NGSI v2 is intended to manage all the whole lifecycle of
context information including updates, queries, registrations and subscriptions.

# Preface

## Editors

  + José Manuel Cantera Fonseca, Telefónica I+D
  + Fermín Galán, Telefónica I+D. 
  + Tobias Jacobs, NEC
  
## Acknowledgements

The editors would like to express their gratitude to the following people who actively contributed to this specification:
Juan José Hierro, Marcos Reyes, Ken Gunnar, Antonio López, ... 
  
## Status

This is a work in progress and is changing on a daily basis.
Please send your comments to fiware-ngsi@lists.fiware.org. You can
trace the discussions checking the archives of the mailing list:
https://lists.fiware.org/private/fiware-ngsi/ (list subscription
required).

In addition, note that a list of currently open discussions is available at

* https://github.com/telefonicaid/fiware-orion/issues/1022
* https://github.com/telefonicaid/fiware-orion/issues/1034
* https://github.com/telefonicaid/fiware-orion/issues/1035

## Copyright

This specification is licensed under the
[FIWARE Open Specification License (implicit patent license)]
(http://forge.fiware.org/plugins/mediawiki/wiki/fiware/index.php/FI-WARE_Open_Specification_Legal_Notice_(implicit_patents_license)).

## Conformance

All the interfaces described by this specification are mandatory and must be implemented in order to be compliant with. 

# Specification

## Introduction

The FIWARE NGSI (Next Generation Service Interface) API defines 

* a **data model** for context information, based on a simple information model using the notion of *context entities*
* a **context data interface** for exchanging information by means of query, subscription, and update operations
* a **context availability interface** for exchanging information on how to obtain context information
(whether to separate the two interfaces is currently under discussion).
* a set of typical **roles** played by NGSI-compliant components

## Terminology

### Context data modelling and exchange

#### Context Entities

Context entities, or simply called entities, are the center of gravity
in the FIWARE NGSI information model. An entity represents a
real-world object like e.g. a sensor, a person, or a room. Each entity
is uniquely identified by its **entity id**. 

Furthermore, the type system of FIWARE NGSI enables entities to have 
an **entity type**. Entity types are semantic types; they are intended
to describe the type of real-world object represented by the entity.
For example, a context entity with id *sensor-365* could have the
type *temperatureSensor*.

#### Context Elements

*(Note: the distinction between context entities and context elements 
is still under discussion; therefore the notion of context elements
currently only appears in this section.)*

A context element is a data object (e.g. JSON object; see the section
on JSON representation below) which contains information about a
specific context entity. Consequently, a context element has a
mandatory property `id` in order to identify the context entity it
refers to. It furthermore can contain an optional property `type`
to describe the type of the entity. Further properties can be used
to represent more information about the entity (see the **context
attributes** section below).

It is important to understand that the relationship of entity and context element is one-to-many. This means that 
* each context element refers to exactly one entity
* there can be several context elements  referring to the same entity. The context elements can for example contain
different pieces of information about the entity

#### Context Attributes 

Context attributes are properties of context entities.
For example, the current speed of a car could be modeled as
attribute *current_speed* of entity *car-104*.

In the NGSI data model, attributes have an *attribute name*,
an *attribute type*, an *attribute value* and *metadata*. 
 * The attribute name describes which kind of property of the entity the attribute value represents, for example *current_speed*.
 * The attribute type represents the NGSI value type of the attribute value.
 Note that FIWARE NGSI has its own type system for attribute values, so NGSI value types are not the same as JSON types.
 * The attribute value finally contains
  * the actual data
  * optional **metadata** describing properties of the attribute value like e.g. accuracy, provider, or a timestamp
  
#### Context Metadata

Context metadata is used in FIWARE NGSI at several places, one of
them being an optional part of the attribute value as described
above. Similarly to attributes, each piece of metadata has 
 * **a metadata name**, describing the role of the metadata at the
 place where it occurs; for example, the metadata name *accuracy* 
 indicates that the metadata value describes how accurate a given 
 attribute value is
 * a **metadata type**, describing the NGSI value type of the metadata value
 * a **metadata value** containing the actual metadata

Note that in NGSI it is not forseen that metadata values can
themselves have metadata.

#### Restrictions and Operation Scopes

(placeholder to describe restrictions and operation scopes)

#### Context Queries

(placeholder for describing what a context query is, and some hints on how this
is typically done in the REST interface)

#### Context Subscriptions

(placeholder for describing the concept of context subscriptions)

#### Context Updates

(placeholder for describing updates)

### Exchanging Context Availability Information

FIWARE NGSI distinguishes between **context information** and **context availability information**. The former kind of information is the actual data, and it is exchanged by means of context queries, context subscriptions, and context updates as described above.

**Context availability information**, in contrast, is information about data providers. FIWARE NGSI defines a representation of such information and a set of operations for exchanging it.

The separation of availability information from the actual data enables FIWARE NGSI to be used across federated systems with multiple data providers, consumers, and brokers. Information on which component can deliver which context information enables ...

#### Context Registrations

(placeholder for describing what a context registration is and what it is used for)

#### Context Discovery

(placehoder for describing what discovery does)

#### Context Availability Subscription

(placeholder for describing context availability subscriptions)

#### Registering Context Availability Information

(placeholder for describing the operation of registering context)

### Roles of FIWARE NGSI components

(placeholder to describe roles like context provider, context producer,
context broker, context registry, context consumer)

## JSON entity representation

An entity is represented by a a JSON object which contain the following properties:

* `id` for the entity ID, represented by a JSON string. If the entity has an `id` attribute itself it will be ignored.
* `type` for the entity type, represented by a JSON string. If the entity has a `type` attribute itself it will be ignored.
  If the entity doesn't have a type, then this property is not included.
* A collection of properties, one per entity attribute. Properties representing attributes with no metadata
  or type are rendered as regular JSON values. Properties representing attributes which specify a type or include
  metadata are rendered as JSON objects with the following properties:
  * `value`: for the attribute value, rendered as a regular JSON value (string, number or boolean), object or array.
  * `type`: a JSON string which represents the user-defined NGSI attribute type.
  * A collection of properties one per metadata field associated to the attribute value. Metadata properties follow
    the same representation rules that applies to properties which represent attributes (except that a metadata
    cannot have metadata properties).

### Special attribute types

Generally speaking, user-defined attribute types are informative, they are processed by the NGSIv2 server in
an opaque way. Nonetheless, the types described below are used to convey an special meaning

* `date`:  identifies dates, in ISO8601 format. These attributes can be used with the
  greater than, lesser than, greater or equal, lesser or equal and range query operators. For instance
  (only the referred entity attribute is shown) :

```
{
  "timestamp": {
    "value": "2017-06-17T07:21:24.238Z",
    "type: "date"
  }
}
```

* `geo:point`: identifies the location of the entity in geo-location queries. If an entity have several attributes
  of this type all them define a possible location for the entity from a geo-location query point of view. (TBD:
  check feasibility). An example can be found below (only the referred entity attribute is shown). 

```
{
  "location": {
    "value": "41.3763726, 2.1864475,14",
    "type": "geo:point"
  }
}
```

### Canonical format description

This is a variant of the represention format aimed at clients that need a regular representation of the entities
and attributes, that can be used in the operations that support the `canonical` option.

* Entity `type` is mandatory. If the entity has no type, JSON `null` is used.
* Property `attrs` is mandatory and includes a JSON object for the attributes.
* Each attribute is described always with `value`, `type` and `metadata`. All fields are mandatory (attributes
  without type use JSON `null` for that property).
* Each metadata is described always with `value` and `type`. Both fields are mandatory (metadata
  without type use JSON `null` for that property).

```
{
  "type": "Room",
  "id": "Boe_Idearium",
  "attrs": {
    "speed": {
      "value": 88,
      "type": null,
      "metadata": { }
    },
    "pressure": {
      "value": 12.1,
      "type": null,
      "metadata": { }
    },
    "temperature": {
      "value": 22,
      "type": "urn:phenomenum:temperature",
      "metadata": { }
    },
    "colour": {
      "value": "black",
      "type": "myString",
      "metadata": { }
    }
  }
}
```

## Error responses

In the case of being present, the error payload is JSON object including the following fields:

+ `error` (required, string): a textual description of the error.
+ `description` (optional, string): additional information about the error.
+ `affectedItems` (optional, array[string]): a list of elements affected by the error. Depending on the operation, it may
  refer to entities, registrations or subscriptions.

Error list (HTTP response code in paranthesis):

* ParseError (400). The incoming JSON payload is incorrect.
* BadRequest (400). The incoming request is somehow invalid.
* NotFound (404). The context element referred in the request has not been found.
* TooManyResults (409). There are several results that match with the resource identification used
  in the request. This typically the case of requesting an entity with not enough information and the
  solution is to enhance entity identification adding more information, e.g. adding entity type
  and/or service path.
* LengthRequired (411). Zero/No Content-Length in PUT/POST/PATCH request
* RequestEntityTooLarge (413). Payload too large
* UnsupportedMediaType (415). Request content type is not supported.
* InvalidModification (422). Some piece of information is missing in payload.

## Simple Query Language

The Simple Query Language provides a simplified syntax to retrieve entities which match a set of conditions.
A query is composed by a list of statements separated by the ';' character. Each statement express a matching condition.
The query will return all the entities which match all the matching conditions (AND logical operator). 

There are two kind of statements: *unary statements* and *binary statements*.

Binary statements are composed by an attribute name (e.g. "temperature"), operator and value (which format
depends on the operator), e.g.:

```
temperature==50
temperature<=20
```

The list of operators (and the format of the values they use) is as follows:

+ **Equal**: `==`. It accepts the following values:
    + Single element, e.g. `temperature==40`. It matches entities whose attribute value
      that exact value.
    + A list of comma-separated values, e.g. `color==black,red`. It matches entities whose
      attribute value is one of the values (OR clause). Eg. entities which `color` is set to
      `black` will match, while entities which `color` is set to `white` will not match.
    + A range, specified as a minimum and maximum separated by `..`. It matches if
      the value is in the interval between the minimum and the maximum (both included). It can only be used
      with attributes which contain dates or numbers. E.g. `temperature==10..20` matchs if the
      temperature is greater or equal than 10 and lower or equal than 20.
+ **Unequal**: `!=`. It accepts the following values:
      + The value is a single element, e.g. `temperature!=40`. It matches entities whose attribute
      value is not that exact value.
      + A list of comma-separated values, e.g. `color!=black,red`. It matches entities whose
      attribute value is not any of the values (AND clause). Eg. entities whose `color` is set
      to `black` will not match, while entities whose `color` is set to `white`will match.
      + A range, specified as a minimum and maximum separated by `..`. It matches
      if the value is not in the interval between the minimum and the maximum (both included). It can only
      be used with attributes which contain dates or numbers. E.g. `temperature!=10..20` matches if
      the temperature is lower than 10 or greater than 20 (it will not match if the tempeature is 10 or the
      temperature is 20).
+ **Greater than**: `&gt;`. The value is a single element, e.g. `temperature&gt;40`. It
  matches entities which attribute value is strictly greater than that value. It only makes sense when
  used with attributes which contain dates or numbers (using with attributes of other type might lead to
  unexpected results).
+ **Lesser than**: `&lt`. The value is a single element, e.g. `temperature&lt;40`. It
  matches entities which attribute value is strictly lesser than that value. It only makes sense when
  used with attributes which contain dates or numbers (using with attributes of other type might lead to
  unexpected results).
+ **Greater or equal than**: `&gt;=`. The value is a single element, e.g. `temperature&gt;=40`.
  It matches entities which attribute value is greater than or equal to that value. It only makes sense when
  used with attributes which contain dates or numbers (using with attributes of other type might lead to
  unexpected results).
+ **Lesser or equal than**: `&lt;=`. The value is a single element, e.g. `temperature&lt;=40`. It
  matches entities which attribute value is lesser than or equal to that value. It only makes sense when
  used with attributes which contain dates or numbers (using with attributes of other type might lead to
  unexpected results).

In the case of equal or inequal, if the value to match include a `,`, you can use simple quote
(`'`), e.g: `color=='light,green','deep,blue'`.

Unary statements are composed of a unary operator (either `+`or `-`) and are used in two situations:

+ To check for attribute existence. E.g. `+temperature`matches entities which have
  a temperature attribute (no matter its value), while `-temperature` matches entities which do not have
  a temperature attribute.
+ To check for entity type existence, with the `type`keyword. E.g, `-type`   matches entities which do not have a type.
  
 
## Geographical Queries

Geographical queries are specified by means of the `geometry` and `coords` parameters.

**geometry** defines a geografical area so that only those entities located in such area match the query.
It is composed of a token list separated by ';'. The first token is the shape of the geometry,
the rest of tokens (if any) depends on the shape. 

In particular, the following geometries are supported:

+ `geometry=circle;radius:4000`, inside a circle (radius is in meters).
+ `geometry=circle;radius:4000;external`, outside a circle (radius is in meters).
+ `geometry=polygon`, inside a polygon.
+ `geometry=polygon;external`, outside a polygon.

**coords** represents a a list of pairs of geographical coordinates (latitude, longitude) separated by ','.
Every pair of coordinates represent a geographical point. The list length and its semantics depend on the shape
specified by the **geometry** parameter:

+ In the case of `circle` geometry, the parameter includes just one element, which
  is the center of the circle.
+ In the case of `polygon` includes a list of elements, which are the vertices of the polygon.


## Group API Entry Point

### Retrieve API Resources [GET /v2]

This resource does not have any attributes. Instead it offers the initial
API affordances in the form of the links in the JSON body.

It is recommended to follow the “url” link values,
[Link](https://tools.ietf.org/html/rfc5988) or Location headers where
applicable to retrieve resources. Instead of constructing your own URLs,
to keep your client decoupled from implementation details.


+ Response 200 (application/json)

    + Attributes (object)
        + entities_url: /v2/entities (required, string) - URL which points to the entities resource
        + types_url: /v2/types (required, string) - URL which points to the types resource
        + subscriptions_url: /v2/subscriptions (required, string) - URL which points to the subscriptions resource
        + registrations_url: /v2/registrations (required, string) - URL which points to the registrations resource

# Group Entities

### List entities [GET /v2/entities{?limit,offset,options,type,id,idPattern,q,geometry,coords,attrs}]

Retrieves a list of entities which match different criteria (by id, idPattern, type or those which match
a query or geographical query). A given entity have to match all the criteria to be retrieved
(i.e. criteria are combined in a logical AND way).
See [Simple Query Language](#simple_query_language) and [Geographical Queries](#geographical_queries). 

The response payload is an Array which contains one object per matching entity. Each entity follows
the JSON entity representation format (described in a section above).

Response code:

* Successful operation uses 200 OK
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + id: Boe_Idearium (optional, string) - A comma separated list of elements.
    Retrieve entities which ID match one of the elements in the list.
    
    + type: Room (optional, string) -  comma separated list of elements.
    Retrieve entities which type match one of the elements in the list.

    + idPattern (optional, string) - A correctly formated regular expression.
    Retrieve entities which ID matches the regular expression.
    
    + q (optional, string) - A query expression, composed of a list of statements separated by `;`,
    i.e. q=statement;statements;statement. See [Simple Query Language specification](#simple_query_language). 
    
    + geometry (optional, string) - Geografical area to which the query is restricted.
    It is composed of a token list separated by ';'. See [Geographical Queries](#geographical_queries).
    
    + coords (optional, string) - List of pairs of coordinates (latitude, longitude) separated by ','.
    See [Geographical Queries](#geographical_queries).
    
    + limit: 20 (optional, number) - Limits the number of entities to be retrieved
    
    + offset: 20 (optional, number) - Establishes the offset from which entities will be returned
    
    + attrs: seatNumber (optional, string) - Comma-separated list of attribute names which data will be included in the response.
    If this parameter is not included, all the attributes are retrieved.
    
    + options (optional, string) - Options dictionary
      + Members
          + count - when used, the total number of entities is returned in the response as a HTTP header named `X-Total-Count`.
          + canonical - when used, the response payload uses the "canonical form". See JSON entity representation format section for details.

+ Response 200 (application/json)

        [
         {
            "type": "Room",
            "id": "DC_S1-D41",
            "temperature": 35.6
         },
         {
            "type": "Room",
            "id": "Boe-Idearium",
            "temperature": 22.5
         },
         {
            "type": "Car",
            "id": "P-9873-K",
            "speed": {
                "value": 100,
                "type": "number",
                "accuracy": 2,
                "timestamp": {
                    "value": "2015-06-04T07:20:27.378Z",
                    "type": "date"
                }
            }
         }
        ]

### Create entity [POST /v2/entities]

The payload is an object representing the entity to be created. The object follows
the JSON entity representation format (described in a section above).

Response:

* Successful operation uses 201 Created. Reponse includes a `Location` header with the URL of the
  created entity.
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Request (application/json)

        {
            "type": "Room",
            "id": "Bcn-Welt",
            "temperature": 21.7,
            "humidity": 60,
            "location": {
                "value":  "41.3763726, 2.1864475",
                "type": "geo:point",
                "crs": "WGS84"
            }
        }

+ Response 201

    + Headers

            Location: /v2/entities/Bcn-Welt


## Entity by ID [/v2/entities/{entityId}{?attrs,options}]

### Retrieve entity [GET /v2/entities/{entityId}{?attrs,options}]

The response is an object representing the entity identified by the ID. The object follows
the JSON entity representation format (described in a section above).

This operation must return only one entity element, but it may happen that there are more
than one entity with the same ID (e.g. entities with same ID but different type). In those cases
an error mesage is returned, specifying in the description the URL that could be used to get
the list of conflicting entities, i.e. all the entities with such an ID.

Response:

* Successful operation uses 200 OK
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + entityId (required, string) - Entity id to be retrieved
    + attrs: temperature,humidity (optional, string) - Comma-separated list of attribute names which
    data will be included in the response. If this parameter is not included, all the attributes are retrieved.

+ Response 200 (application/json)

        {
            "type": "Room",
            "id": "Bcn_Welt",
            "temperature": 21.7,
            "humidity": 60,
            "location": {
                "value":  "41.3763726, 2.1864475",
                "type": "geo:point",
                "crs": "WGS84"
            }
        }

### Update or append entity attributes [POST /v2/entities/{entityId}?{options}]

The request payload is an object representing the attributes to append or update. The object follows
the JSON entity representation format (described in a section above), except that `id` and `type`
are not allowed.

The entity attributes are updated with the ones in the payload. In particular, depending on
whether `append` operation option is used or not.

* If `append` is not used: the entity attributes are updated (if they previously exist) or appended
  (in they don't previously exists) with the ones in the payload.
* If `append` is used (i.e. strict append semantics): all the attributes in the payload not previously
  existing in the entity are appended. In addition to that, in the case some of the attributes in the
  payload already exist in the entity, an error is returned.

If the entity doesn't previously exist, it is created.

Response:

* Successful operation uses 204 No Content
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + entityId (required, string) - Entity id to be updated
    + options (optional, string) - Operations options
        + Members
            + append - Force an append operation

+ Request (application/json)

    + Body

            {
                "ambientNoise": 31.5
            }

+ Response 204

### Update existing entity attributes [PATCH /v2/entities/{entityId}]

The request payload is an object representing the attributes to update. The object follows
the JSON entity representation format (described in a section above), except that `id` and `type`
are not allowed.

The entity attributes are updated with the ones in the payload. In addition to that, if one or more
attributes in the payload doesn't exist in the entity, an error if returned.

Response:

* Successful operation uses 204 No Content
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters 
    + entityId (required, string) - Entity id to be updated

+ Request (application/json)

        {
            "temperature": 25.5,
            "seatsNumber": 6
        }

+ Response 204

### Replace all entity attributes [PUT /v2/entities/{entityId}]

The request payload is an object representing the new entity attributes. The object follows
the JSON entity representation format (described in a section above), except that `id` and `type`
are not allowed.

The attributes previously existing in the entity are removed and replaced by the ones in the
request.

Response:

* Successful operation uses 204 No Content
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters 
    + entityId (required, string) - Entity id

+ Request (application/json)

        {
            "temperature": 25.5,
            "seatsNumber": 6
        }

+ Response 204

### Remove entity [DELETE /v2/entities/{entityId}]

Delete the entity.

Response:

* Successful operation uses 204 No Content
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters 
    + entityId (required, string) - Entity id to be deleted

+ Response 204


# Group Attributes

## Attribute by Entity ID [/v2/entities/{entityId}/attrs/{attrName}]

### Get attribute data [GET /v2/entities/{entityId}/attrs/{attrName}]

Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes
(described in a section above).

Response:

* Successful operation uses 20O OK.
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + attrName: temperature (required, string) - Attribute to be retrieved.

+ Response 200 (application/json)

        {
            "value": 21.7
        }

### Update attribute data [PUT /v2/entities/{entityId}/attrs/{attrName}]

The request payload is an object representing the new attributes data. Previous attribute data
is replaced by the one in the request. The object follows the JSON representation for attributes
(described in a section above).

Response:

* Successful operation uses 204 No Content
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + attrName: temperature (required, string) - Attribute name

+ Request (application/json)

        {
            "value": 25.0,
            "unitCode": "CEL"
        }

+ Response 200


### Remove a single attribute [DELETE /v2/entities/{entityId}/attrs/{attrName}]

Removes an entity attribute.

Response:

* Successful operation uses 204 No Content
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + attrName: temperature (required, string) - Attribute name

+ Response 204


# Group Attribute Value

## By Entity ID [/v2/entities/{entityId}/attrs/{attrName}/value{?options}]

### Get attribute data [GET /v2/entities/{entityId}/attrs/{attrName}/value{?options}]

It returns a JSON object with a `value` propierty with the value of the attribute. The `text` option
indicates that the attribute value must be provided as plain text (text/plain).

Response:

* Successful operation uses 20O OK.
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + attrName: temperature (required, string) - Attribute to be retrieved.
    + options: (optional, string) - Options dictionary

+ Response 200 (application/json)

        {
            "value": 21.7
        }

### Update attribute value [PUT /v2/entities/{entityId}/attrs/{attrName}/value]

The request payload is the new attribute value. It can be represented as a JSON object (application/json),
with a `value` property, or as plain text (text/plain).

Response:

* Successful operation uses 204 No Content
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + attrName: temperature (required, string) - Attribute name

+ Request (application/json)

        {
            "value": 25.0
        }

+ Response 200

# Group Types

## Entity types [/v2/types{?limit,offset,options}]

### Retrieve entity types [GET /v2/types/{?limit,offset,options}]

If `values` option is not in use, the operation returns a JSON object which properties are entity types. The properties
value is a JSON object with information about the type: `attrs` (the union set of attribute names along all the entities
of such type) and `count` (the number of entities belonging to that type).

If `values` option is used, the operation returns a JSON array with the list of entity type names as strings.

Response code:

* Successful operation uses 200 OK
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + limit: 10 (optional, number) - Limit the number of types to be retrieved
    + offset: 20 (optional, number) - Skip a number of records
    + options (optional, string) - Options dictionary
      + Members
          + count - when used, the total types number is returned as a HTTP in the response named `X-Total-Count`
          + values - when used, the response payload is a JSON array with a list of entity types

+ Response 200 (application/json)

        {
          "Car": {
            "attrs": {
              "speed": {
                "type": null
              },
              "fuel": {
                "type": "gasoline"
              },
              "fuel": {
                "type": "diesel"
              },
              "temperature": {
                "type": "urn:phenomenum:temperature"
              }
            },
            "count": 12
          },
          "Room": {
            "attrs": {
              "pressure": {
                "type": null
              },
              "humidity": {
                "type": "percentage"
              },
              "temperature": {
                "type": "urn:phenomenum:temperature"
              }
            },
            "count": 7
          }
        }

## Entity type [/v2/types/{entityType}]

### Retrieve entity type [GET /v2/types/{entityType}]

The operation returns a JSON object with information about the type: `attrs` (the union set of attribute names along all
the entities of such type) and `count` (the number of entities belonging to that type).

Response code:

* Successful operation uses 200 OK
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + entityType: Room (required, string) - Entity Type

+ Response 200 (application/json)

          {
            "attrs": {
              "pressure": {
                "type": null
              },
              "humidity": {
                "type": "percentage"
              },
              "temperature": {
                "type": "urn:phenomenum:temperature"
              }
            },
            "count": 7
          }

# Group Subscriptions

A subscription is represented by a JSON object with the following fields:

+ `id`: Subscription unique identifier. Automatically created at creation time.
+ `subject`: It is an object that describes the subject of the subscription.
+ `notification`: It is an object that describes the notification received by the subscriber.
+ `expires`: Subscription expiration date in ISO8601 format. Permanent subscriptions must omit
   this field.
+ `status` (not editable, only in GET operations): Either `active` (for permanent subscriptions or if
   the subscription has not expired yet) or `expired` (for expired subscriptions).

A `subject` contains the following subfields:

+ `entities`: A list of objects, each one composed of the following subfields (`id`/`idPattern` or `type` must be present):
    + `id` or `idPattern`: Id or pattern of the affected entities (optional). Both cannot be used at the same time.
    + `type`: Type of the affected entities (optional).
+ `condition`: Condition that will trigger the notification. It can have two optional properties:
    + `attributes`: array of attribute names
    + `expression`: an expression composed of `q`, `geometry` and `coords` (see "List entities" operation above
   about this field).

A `notification` object contains the following subfields:

+ `attributes`: List of attributes to be included in the notification message. If not specified (or empty), all attributes are included
  in the notification
+ `callback` : URL pointing to the service which will be invoked when a notification is generated. A NGSIv2
  compliant server must support `http` URL schema, other schemas (e.g. schemas for web sockets) could also be supported.
+ `throttling`: Minimal period of time in seconds which must elapse between two consecutive notifications. It
  is optional.
+ `timesSent` (not editable, only in GET operations): Number of notifications sent due to this subscription.
+ `lastNotification`: Last notification date in ISO8601 format.

Notification rules are as follow:

* If `attributes` and `expression` are used, a notification is sent whenever one of the attributes in the `attributes` list changes and
  at the same time `expression` matches.
* If `attributes` is used and `expression` is not used, a notification is sent whenever one of the attributes in the `attributes` list changes-
* If `attributes` is not used and `expression` is used, a notification is sent whenever any of the attributes of the entity changes and
  at the same time `expression` matches.
* If neither `attributes` or `expression` are used, a notification is sent whenever any of the attributes of the entity changes.

## Subscription List [/v2/subscriptions]

### Retrieve subscriptions [GET /v2/subscriptions]

Returns a list of all the subscriptions present in the system

Response:

* Successful operation uses 200 OK
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + limit: 10 (optional, number) - Limit the number of types to be retrieved
    + offset: 20 (optional, number) - Skip a number of records
    + options (optional, string) - Options dictionary
      + Members
          + count - when used, the total subscriptions number is returned as a HTTP in the response named `X-Total-Count`

+ Response 200

        [
            {
                "id": "abcdefg",
                "subject": {                    
                    "entities": [
                        {
                            "id": "Bcn_Welt",
                            "type": "Room"
                        }
                    ],
                    "condition": {
                       "attrs:" [ "temperature " ],
                       "expression:" {
                          "q": "temperature>40"
                       }
                    }
                },
                "notification": {
                    "callback": "http://localhost:1234",
                    "attributes": ["temperature", "humidity"],
                    "throttling": 5,
                    "count": 12,
                    "lastNotification": "2015-10-05T16:00:00.00Z"
                },
                "expires": "2016-04-05T14:00:00.00Z",
                "status": "active"
            }
        ]


### Create a new subscription [POST /v2/subscriptions]

Creates a new subscription.
The subscription is represented by a JSON object as described at the beginning of this section.

Response:

* Successful operation uses 201 Created
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Request (application/json)

        {
            "subject": {
                "entities": [
                    {
                        "type": "Room"
                    }
                ],
                "condition": {
                    "attributes:" [ "temperature " ],
                    "expression:" {
                       "q": "temperature>40"
                    }
                 }
            },
            "notification": {
                "callback": "http://localhost:1234",
                "attributes": ["temperature", "humidity"],
                "throttling": 5,
            },            
            "expires": "2016-04-05T14:00:00.00Z"
        }

+ Response 201

    + Headers

            Location: /v2/subscriptions/abcde98765


## Subscription By ID [/v2/subscriptions/{subscriptionId}]

### Retrieve subscription [GET /v2/subscriptions/{subscriptionId}]

The response is the subscription represented by a JSON object as described at the beginning of this section.

Response:

* Successful operation uses 200 OK
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + subscriptionId: abcdef (required, string) - subscription Id.

+ Response 200 (application/json)

        {
            "id": "abcdef",
            "subject": {
                "entities": [
                    {
                        "type": "Room"
                    }
                ],
                "condition": {
                    "attributes:" [ "temperature " ],
                    "expression:" {
                       "q": "temperature>40"
                    }
                 }
            },
            "notification": {
                "callback": "http://localhost:1234",
                "attributes": ["temperature", "humidity"],
                "throttling": 5,
                "count": 12,
                "lastNotification": "2015-10-05T16:00:00.00Z"
            },
            "expires": "2016-04-05T14:00:00.00Z",
            "status": "active"
        }


### Update subscription [PATCH /v2/subscriptions/{subscriptionId}]

Only the fields included in the request are updated in the subscription.

Response:

* Successful operation uses 204 No Content
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + subscriptionId: abcdef (required, string) - subscription Id.

+ Request (application/json)

        {
            "expires": "2016-04-05T14:00:00.00Z"
        }

+ Response 204

### Delete subscription [DELETE /v2/subscriptions/{subscriptionId}]

Cancels subscription.

Response:

* Successful operation uses 204 No Content
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + subscriptionId: abcdef (required, string) - subscription Id.

+ Response 204

# Group Registrations

Context Registration allows to associate external services to context data. One of the main
use cases of this functionality is the association of Context Providers.

A context registration is represented by a JSON object with the following fields:

+ `id`: Unique identifier assigned to the registration. Automatically created at creation time.
+ `subject` : It s an object that describes the subject of the registration.
+ `callback` : URL pointing to the service which is registered. In the case of a Context Provider
corresponds to the URL of the provider service.
+ `duration`: Duration of the registration in ISO8601 format. Default duration is infinite.

A `subject` contains the following subfields:

+ `entities`: A list of objects, each one composed of the following subfields (`id`/`idPattern` or type must be present):
    + `id` or `idPattern`: Id or pattern of the affected entities (optional). Both cannot be used at the same time.
    + `type`: Type of the affected entities (optional).
+ `attributes`: List of attributes to be provided (if not specified it would mean all).

## Registration list [/v2/registrations]

### Retrieve registrations [GET /v2/registrations]

Lists all the registrations present in the system.

Response:

* Successful operation uses 200 OK
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Response 200

        [
            {
                "id": "abcdefg",
                "subject": {
                    "entities": [
                        {
                            "id": "Bcn_Welt",
                            "type": "Room"
                        }
                    ],
                    "attributes": [
                        "temperature"
                    ]
                },
                "callback": "http://localhost:1234",               
                "duration": "PT1M"
            }
        ]

### Create a new context provider registration [POST /v2/registrations]

Creates a new registration. This is typically used for associating context providers
to certain data.
The registration is represented by a JSON object as described at the beginning of this section.

Response:

* Successful operation uses 201 Created
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Request (application/json)

        {
            "subject": {
                "entities": [
                    {
                        "type": "Room"
                    }
                ],
                "attributes": [
                      "humidity"
                ]
            },
            "callback":  "http://localhost:1234",
            "duration": "PT1M"
        }

+ Response 201

    + Headers

            Location: /v2/registrations/abcde98765

## Registration By ID [/v2/registrations/{registrationId}]

### Retrieve context provider registration [GET /v2/registrations/{registrationId}]

The response is the registration represented by a JSON object as described at the beginning of this section.

Response:

* Successful operation uses 200 OK
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + registrationId: abcdef (required, string) - registration Id.

+ Response 200 (application/json)

        {
            "id": "abcde",
            "subject": {
                "entities": [
                    {
                        "type": "Room"
                    }
                ],
                "attributes": [
                      "humidity"
                ]
            },
            "callback":  "http://localhost:1234",
            "duration": "PT1M"
        }

### Update context provider registration [PATCH /v2/registrations/{registrationId}]

Only the fields included in the request are updated in the registration.

Response:

* Successful operation uses 204 No Content
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + registrationId: abcdef (required, string) - registration Id.

+ Request (application/json)

        {
            "duration": "PT1M"
        }

+ Response 204

### Delete context provider registration [DELETE /v2/registrations/{registrationId}]

Cancels registration.

Response:

* Successful operation uses 204 No Content
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + registrationId: abcdef (required, string) - registration Id.

+ Response 204

# Group POJ RPC Operations

### Update [POST /v2/op/update]

This operation allows to create, update and/or delete several entities in a single batch operation.
The payload is an object with two properties:

+ `actionType`, to specify the kind of update action to do: either APPEND, APPEND_STRICT, UPDATE, DELETE.
+ `entities`, an array of entities, each one specified using the JSON entity representation format (described
  in a section above).

Response:

* Successful operation uses 200 OK.
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Request (application/json)

        {
            "actionType": "APPEND",
            "entities": [
                {
                    "type": "Room",
                    "id": "Bcn-Welt",
                    "temperature": 21.7,
                    "humidity": 60
                },
                {
                    "type": "Room",
                    "id": "Mad_Aud",
                    "temperature": 22.9,
                    "humidity": 85
                }
            ]
        }

+ Response 200


### Query [POST /v2/op/query{?limit,offset,options}]

The response payload is an Array which contains one object per matching entity. Each entity follows
the JSON entity representation format (described in a section above).

The payload may contain the following elements (all of them optional):

+ `entities`: a list of entites to search for. Each entity is represented by a JSON object with the following
  elements:
    + `id` or `idPattern` (both cannot be used at the same time): specifies the exact ID (in the case of `id`)
     or pattern (in the case of `idPattern`) of the entities to search for. If omitted, it means "any entity
     ID".
    + `type`: specifies the type of the entities to search for. If omitted, it means "any entity type".
+ `attributes`: a list of attributes names to search for. If omitted, it means "any attribute".
+ `scopes`: a list of scopes to restrict the results of the query. Each scope is represented by a JSON
   object with a `type` (a JSON string) and `value` (whose type depends on the `type` property). The
   different available scopes are described elsewhere.

Response code:

* Successful operation uses 200 OK
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + limit: 10 (optional, number) - Limit the number of entities to be retrieved
    + offset: 20 (optional, number) - Skip a number of records
    + options (optional, string) - Options dictionary
      + Members
          + count - the total number of entities is returned in the response as an
          HTTP header named `X-Total-Count`.
          + canonical - when used, the response payload uses the "canonical form".
          See JSON entity representation format section for details.


+ Request (application/json)

        {
            "entities": [
                {
                    "idPattern": ".*",
                    "type": "myFooType"
                },
                {
                    "id": "myBar",
                    "type": "myBarType"
                }
            ],
            "attributes": [
                "temperature",
                "humidity"
            ],
            "scopes": [
                {
                    "type": "FIWARE::...",
                    "value": "..."
                }
            ]
        }

+ Response 200 (application/json)

        [
         {
            "type": "Room",
            "id": "DC_S1-D41",
            "temperature": 35.6
         },
         {
            "type": "Room",
            "id": "Boe-Idearium",
            "temperature": 22.5
         },
         {
            "type": "Car",
            "id": "P-9873-K",
            "speed": {
                "value": 100,
                "type": "number",
                "accuracy": 2,
                "timestamp": {
                    "value": "2015-06-04T07:20:27.378Z",
                    "type": "date"
                }
            }
         }
        ]


### Register [POST /v2/op/register]

This operation allows to create, update and/or delete several registrations in a single batch operation.
The payload is an object with two properties:

+ `actionType`, to specify the kind of register action to do: either CREATE, UPDATE, DELETE.
+ `registrations`, an array of registration, each one specified using the JSON registration representation
  format (described in a section above). In the case of CREATE operation, the registration `id` must not be
  included.

Response:

* Successful operation uses 200 OK. In addition, in the case of successful CREATE, a list of IDs is returned,
  each one corresponding to the ID of the element in the request payload and in the same order.
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Request (application/json)

        {
          "actionType": "CREATE",
          "registrations: [
             {
               "subject": {
                  "entities": [
                     {
                        "type": "Room"
                     }
                  ],
                  "attributes": [
                     "humidity"
                 ]
               },
               "callback": "http://localhost:1234",
               "duration": "PT1M"
             },
             {
               "subject": {
                 "entities": [
                    {
                       "type": "Car"
                    }
                 ],
                 "attributes": [
                   "speed"
                 ]
               },
               "callback": "http://localhost:5678",
               "duration": "PT1M"
             }
          ]
        }

+ Response 200

        [
          "abcd",
          "efgh"
        ]


### Discover [POST /v2/op/discover/{?limit,offset,options}]

The response payload is an Array which contains one object per matching registration. Each registration follows
the JSON registration representation format (described in a section above).

The payload may contain the following elements (all of them optional):

+ `entities`: a list of entites to search for. Each entity is represented by a JSON object with the following
  elements:
    + `id` or `idPattern` (both cannot be used at the same time): specifies the exact ID (in the case of `id`)
     or pattern (in the case of `idPattern`) of the entities to search for. If omitted, it means "any entity
     ID".
    + `type`: specifies the type of the entities to search for. If omitted, it means "any entity type".
+ `attributes`: a list of attributes names to search for. If omitted, it means "any attribute".
+ `scopes`: a list of scopes to restrict the results of the query. Each scope is represented by a JSON
   object with a `type` (a JSON string) and `value` (whose type depends on the `type` property). The
   different available scopes are described elsewhere.

Response code:

* Successful operation uses 200 OK
* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.

+ Parameters
    + limit: 10 (optional, number) - Limit the number of registrations to be retrieved
    + offset: 22 (optional, number) - Skip a number of registrations
    + options (optional, string) - Options dictionary
        + Members
          + count - when used, the total number of registrations is returned in the response as a HTTP header named `X-Total-Count`


+ Request (application/json)

        {
          "entities": [
            {
              "idPattern": ".*",
              "type": "myFooType"
            },
            {
              "id": "myBar",
              "type": "myBarType"
            }
          ],
          "attributes": [
            "temperature",
            "humidity"
          ],
          "scopes": [
            {
              "type": "FIWARE::Filter::Foo",
              "value": "Bar"
            }
          ]
        }

+ Response 200 (application/json)

        [
          {
            "id": "abcde",
            "subject": {
              "entities": [
                "id": "Foo",
                "type": "myFooType"
              ],
              "attributes": [
                "humidity"
              ]
            },
            "callback": "http://localhost:1234",
            "duration": "PT1M"
          },
          {
            "id": "efgh",
            "subject": {
              "entities": [
                "id": "myBar",
                "type": "myBarType"
              ],
              "attributes": [
                "speed"
              ]
            },
            "callback": "http://localhost:5678",
            "duration": "PT1M"
          }
        ]

# Group OMA-NGSI Operations

(The need/usefulness of these operations is currently under discussion)

For the sake of completeness here is an enumeration of the OMA-NGSI (9 & 10) operations. These
operations will be supported under the 'v2' resource as well.

### subscribeContext [POST /v2/subscribeContext]

(Not needed, a it is covered by the RESTful POST /v2/subscriptions operation)

### updateContextSubscription [POST /v2/updateContextSubscription]

(Not needed, a it is covered by the RESTful PATCH /v2/subscriptions operation)

### unsubscribeContext [POST /v2/unsubscribeContext]

(Not needed, a it is covered by the RESTful DELETE /v2/subscriptions operation)

### notifyContext [POST /v2/notifyContext]

(The payload of the v2 notifyContext should be described)

### subscribeContextAvailability [POST /v2/subscribeContextAvailability]

(Not needed as POJ RPC, but we need to define a RESTful operation for this, analogous to the NGSI10 one)

### updateContextAvailabilitySubscription [POST /v2/updateContextAvailabilitySubscription]

(Not needed as POJ RPC, but we need to define a RESTful operation for this, analogous to the NGSI10 one)

### unsubscribeContextAvailability [POST /v2/unsubscribeContextAvailability]

(Not needed as POJ RPC, but we need to define a RESTful operation for this, analogous to the NGSI10 one)

### notifyContextAvailability [POST /v2/notifyContextAvailability]

(The payload of the v2 notifyContextAvailability should be described)
